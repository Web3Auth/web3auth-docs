# SUPERVISOR REPORT TEMPLATE
# Use this exact format for all supervisor communications

supervisor_report:
  # Basic task information
  task_completed: "[Exact name of completed task]"
  phase: "[Current phase name - e.g., PHASE_1_DATA_COLLECTION]"
  status: "[SUCCESS/PARTIAL/FAILED]"
  progress_percentage: "[0-100]%"
  timestamp: "[ISO timestamp - YYYY-MM-DDTHH:MM:SSZ]"

  # Outputs and deliverables
  outputs_created:
    - "[File name or deliverable 1]"
    - "[File name or deliverable 2]"
    # Add as many as needed

  # Validation results (CRITICAL)
  validation_results:
    scope_compliance: "[PASSED/FAILED]"
    quality_check: "[PASSED/FAILED]"
    technical_accuracy: "[PASSED/FAILED]"
    code_syntax_validation: "[PASSED/FAILED/N/A]"
    documentation_completeness: "[PASSED/FAILED]"

  # Next steps
  next_actions:
    immediate:
      - "[Next immediate task to be performed]"
    upcoming:
      - "[Following task after immediate]"
      - "[Subsequent task]"

  # Issues and blockers
  blockers_or_issues:
    current_blockers:
      - "[Any blocking issues or NONE]"
    technical_issues:
      - "[Any technical problems or NONE]"
    scope_questions:
      - "[Any scope-related uncertainties or NONE]"

  # Supervisor review requests
  supervisor_review_needed:
    quality_review: "[true/false]"
    scope_validation: "[true/false]"
    technical_approval: "[true/false]"
    decision_required: "[true/false]"
    specific_areas:
      - "[Specific item needing review or NONE]"

  # Performance metrics
  performance_metrics:
    time_spent: "[Hours or time range]"
    files_processed: "[Number if applicable]"
    data_extracted: "[Amount if applicable]"
    errors_encountered: "[Number]"
    quality_score: "[EXCELLENT/GOOD/FAIR/POOR]"

  # Context and details
  task_details:
    description: "[Brief description of what was accomplished]"
    methodology: "[How the task was completed]"
    challenges: "[Any challenges encountered or NONE]"
    learnings: "[Key insights or lessons learned]"

  # Compliance verification
  compliance_checklist:
    scope_adherence: "[✅/❌]"
    forbidden_actions_avoided: "[✅/❌]"
    quality_standards_met: "[✅/❌]"
    progress_logged: "[✅/❌]"
    outputs_validated: "[✅/❌]"

# EXAMPLE REPORT
example_supervisor_report:
  task_completed: "MDX File Parsing for Code Examples"
  phase: "PHASE_1_DATA_COLLECTION"
  status: "SUCCESS"
  progress_percentage: "25%"
  timestamp: "2024-07-04T14:30:00Z"

  outputs_created:
    - "data/raw/extracted_code_examples.json"
    - "data/processed/sdk_examples_by_platform.yaml"
    - "logs/mdx_parsing_log.txt"

  validation_results:
    scope_compliance: "PASSED"
    quality_check: "PASSED"
    technical_accuracy: "PASSED"
    code_syntax_validation: "PASSED"
    documentation_completeness: "PASSED"

  next_actions:
    immediate:
      - "Parse CommonQuestions components for Q&A pairs"
    upcoming:
      - "Extract troubleshooting content"
      - "Identify authentication flow patterns"

  blockers_or_issues:
    current_blockers:
      - "NONE"
    technical_issues:
      - "NONE"
    scope_questions:
      - "NONE"

  supervisor_review_needed:
    quality_review: false
    scope_validation: false
    technical_approval: false
    decision_required: false
    specific_areas:
      - "NONE"

  performance_metrics:
    time_spent: "2.5 hours"
    files_processed: "156"
    data_extracted: "2,847 code examples"
    errors_encountered: "3"
    quality_score: "EXCELLENT"

  task_details:
    description:
      "Successfully parsed all MDX files in SDK documentation to extract code examples with context"
    methodology: "Python script with BeautifulSoup for MDX parsing, regex for code block extraction"
    challenges: "Some MDX files had malformed frontmatter, handled with error recovery"
    learnings: "Code examples are well-structured and consistently formatted across documentation"

  compliance_checklist:
    scope_adherence: "✅"
    forbidden_actions_avoided: "✅"
    quality_standards_met: "✅"
    progress_logged: "✅"
    outputs_validated: "✅"
