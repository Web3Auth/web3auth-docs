{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I initialize the Web3Auth SDK in a JavaScript application?"}, {"role": "assistant", "content": "To initialize the Web3Auth SDK in a JavaScript application, you need to import the SDK and create a Web3Auth instance with your configuration:\n\n```javascript\nimport { Web3Auth, WEB3AUTH_NETWORK } from \"@web3auth/modal\";\n\nconst web3auth = new Web3Auth({\n  clientId: \"YOUR_CLIENT_ID\", // Get your Client ID from Web3Auth Dashboard\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET, // or WEB3AUTH_NETWORK.SAPPHIRE_DEVNET\n});\n\nawait web3auth.init();\n```\n\nKey points:\n- Replace `YOUR_CLIENT_ID` with your actual Client ID from the Web3Auth Dashboard\n- Choose the appropriate network (SAPPHIRE_MAINNET for production, SAPPHIRE_DEVNET for development)\n- Always call `init()` before using any other Web3Auth methods\n- The `init()` method is asynchronous, so use `await` or `.then()`"}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I perform Google login with Web3Auth in JavaScript?"}, {"role": "assistant", "content": "To perform Google login with Web3Auth in JavaScript, use the connect method:\n\n```javascript\nimport { Web3Auth, WEB3AUTH_NETWORK } from \"@web3auth/modal\";\n\nconst web3auth = new Web3Auth({\n  clientId: \"YOUR_CLIENT_ID\",\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n});\n\nawait web3auth.init();\n\n// Perform Google login\nconst loginWithGoogle = async () => {\n  try {\n    const provider = await web3auth.connect();\n    console.log(\"Login successful:\", provider);\n    \n    // Get user information\n    const userInfo = await web3auth.getUserInfo();\n    console.log(\"User info:\", userInfo);\n    \n    return provider;\n  } catch (error) {\n    console.error(\"Login failed:\", error);\n  }\n};\n```\n\nThe `getUserInfo()` method returns user profile information including email, name, picture, verifier, and verifierId."}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I set up Web3Auth in a React application?"}, {"role": "assistant", "content": "To set up Web3Auth in a React application, you can use the React hooks for seamless integration:\n\n```tsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { Web3AuthProvider } from \"@web3auth/modal-react-hooks\";\nimport { WEB3AUTH_NETWORK, Web3AuthOptions } from \"@web3auth/modal\";\nimport App from \"./App\";\n\nconst web3AuthOptions: Web3AuthOptions = {\n  clientId: \"YOUR_CLIENT_ID\",\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n  chainConfig: {\n    chainNamespace: \"eip155\",\n    chainId: \"0x1\",\n    rpcTarget: \"https://rpc.ankr.com/eth\",\n  },\n};\n\nconst web3AuthContextConfig = {\n  web3AuthOptions,\n};\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n  <Web3AuthProvider config={web3AuthContextConfig}>\n    <App />\n  </Web3AuthProvider>\n);\n```\n\nThen in your App component:\n\n```tsx\nimport { useWeb3Auth } from \"@web3auth/modal-react-hooks\";\n\nfunction App() {\n  const { connect, disconnect, provider, isConnected, user } = useWeb3Auth();\n\n  const login = async () => {\n    const web3authProvider = await connect();\n    console.log(\"Connected:\", web3authProvider);\n  };\n\n  return (\n    <div>\n      {isConnected ? (\n        <div>\n          <h2>Welcome, {user.name}!</h2>\n          <p>Email: {user.email}</p>\n          <button onClick={disconnect}>Logout</button>\n        </div>\n      ) : (\n        <button onClick={login}>Login</button>\n      )}\n    </div>\n  );\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I connect to Ethereum blockchain after Web3Auth login?"}, {"role": "assistant", "content": "After successful Web3Auth login, you can connect to the Ethereum blockchain using the provider:\n\n```javascript\nimport { Web3Auth } from \"@web3auth/modal\";\nimport { ethers } from \"ethers\";\n\n// After Web3Auth login\nconst provider = web3auth.provider;\n\n// Create ethers provider\nconst ethersProvider = new ethers.providers.Web3Provider(provider);\nconst signer = ethersProvider.getSigner();\n\n// Get user's address\nconst address = await signer.getAddress();\nconsole.log(\"User address:\", address);\n\n// Get balance\nconst balance = await ethersProvider.getBalance(address);\nconst balanceInEth = ethers.utils.formatEther(balance);\nconsole.log(\"Balance:\", balanceInEth, \"ETH\");\n\n// Send transaction\nconst sendTransaction = async (to, amount) => {\n  try {\n    const tx = await signer.sendTransaction({\n      to: to,\n      value: ethers.utils.parseEther(amount),\n    });\n    \n    console.log(\"Transaction hash:\", tx.hash);\n    const receipt = await tx.wait();\n    console.log(\"Transaction confirmed:\", receipt);\n    \n    return receipt;\n  } catch (error) {\n    console.error(\"Transaction failed:\", error);\n    throw error;\n  }\n};\n\n// Interact with smart contracts\nconst contractABI = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function transfer(address to, uint256 amount) returns (bool)\"\n];\n\nconst tokenContract = new ethers.Contract(\n  \"0xA0b86a33E6441e53c2b4f847AD4b6D8d39dAD2b4\",\n  contractABI,\n  signer\n);\n\n// Get token balance\nconst tokenBalance = await tokenContract.balanceOf(address);\nconsole.log(\"Token balance:\", ethers.utils.formatEther(tokenBalance));\n```"}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I set up Multi-Factor Authentication (MFA) in Web3Auth?"}, {"role": "assistant", "content": "Multi-Factor Authentication (MFA) in Web3Auth provides additional security through backup factors. Here's how to implement it:\n\n```javascript\nimport { Web3Auth, WEB3AUTH_NETWORK, MFA_LEVELS } from \"@web3auth/modal\";\n\nconst web3auth = new Web3Auth({\n  clientId: \"YOUR_CLIENT_ID\",\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n  mfaLevel: MFA_LEVELS.MANDATORY, // Force MFA setup\n});\n\n// Login with MFA\nconst loginWithMFA = async () => {\n  try {\n    const provider = await web3auth.connect();\n    console.log(\"Login with MFA successful\");\n    return provider;\n  } catch (error) {\n    console.error(\"MFA login failed:\", error);\n  }\n};\n\n// Enable MFA for existing users\nconst enableMFA = async () => {\n  try {\n    await web3auth.enableMFA();\n    console.log(\"MFA enabled successfully\");\n  } catch (error) {\n    console.error(\"Failed to enable MFA:\", error);\n  }\n};\n```\n\n## MFA Level Options:\n- **DEFAULT**: Shows MFA screen every 3rd login\n- **OPTIONAL**: Shows MFA screen every login, user can skip\n- **MANDATORY**: Forces MFA setup after login\n- **NONE**: Skips MFA setup completely\n\n## Available MFA Factors:\n1. **Recovery Phrase**: Fully non-custodial backup\n2. **Password**: User-defined password factor\n3. **Social Recovery**: Additional social login\n4. **Authenticator App**: TOTP-based authentication\n5. **Device Factor**: Device-specific secure storage\n\nMFA requires the minimum Scale Plan for production but can be tested on `sapphire_devnet` for free."}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I set up custom JWT authentication with Auth0 in Web3Auth?"}, {"role": "assistant", "content": "To set up custom JWT authentication with Auth0 in Web3Auth, you need to configure both Auth0 and Web3Auth Dashboard:\n\n## 1. Auth0 Configuration\n\nCreate an Auth0 Application:\n1. Go to Auth0 Dashboard → Applications → Create Application\n2. Choose \"Single Page Application\" type\n3. Configure Allowed Callback URLs: `https://auth.web3auth.io/auth`\n4. Configure Allowed Web Origins: `https://auth.web3auth.io`\n\n## 2. Web3Auth Dashboard Configuration\n\nCreate Custom Verifier:\n1. Go to Web3Auth Dashboard → Verifiers → Create Verifier\n2. Select \"Custom\" as verifier type\n3. Configure:\n   - **Verifier Name**: `auth0-jwt-verifier`\n   - **JWT Verifier ID**: `sub`\n   - **JWKS Endpoint**: `https://YOUR_AUTH0_DOMAIN.auth0.com/.well-known/jwks.json`\n\n## 3. Implementation\n\n```javascript\nimport { Web3Auth, WEB3AUTH_NETWORK, WALLET_ADAPTERS } from \"@web3auth/modal\";\nimport { AuthAdapter } from \"@web3auth/auth-adapter\";\nimport { createAuth0Client } from \"@auth0/auth0-spa-js\";\n\nconst web3auth = new Web3Auth({\n  clientId: \"YOUR_WEB3AUTH_CLIENT_ID\",\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n});\n\n// Configure Auth Adapter\nconst authAdapter = new AuthAdapter({\n  loginConfig: {\n    jwt: {\n      verifier: \"auth0-jwt-verifier\",\n      typeOfLogin: \"jwt\",\n      clientId: \"YOUR_WEB3AUTH_CLIENT_ID\",\n    },\n  },\n});\n\nweb3auth.configureAdapter(authAdapter);\nawait web3auth.init();\n\n// Initialize Auth0\nconst auth0Client = await createAuth0Client({\n  domain: \"YOUR_AUTH0_DOMAIN.auth0.com\",\n  clientId: \"YOUR_AUTH0_CLIENT_ID\",\n  authorizationParams: {\n    redirect_uri: window.location.origin,\n  },\n});\n\n// Login function\nconst loginWithAuth0 = async () => {\n  try {\n    await auth0Client.loginWithPopup();\n    const idToken = await auth0Client.getIdTokenClaims();\n    \n    const provider = await web3auth.connectTo(WALLET_ADAPTERS.AUTH, {\n      loginProvider: \"jwt\",\n      extraLoginOptions: {\n        id_token: idToken.__raw,\n        verifierIdField: \"sub\",\n        domain: \"YOUR_AUTH0_DOMAIN.auth0.com\",\n      },\n    });\n    \n    return provider;\n  } catch (error) {\n    console.error(\"Login failed:\", error);\n  }\n};\n```\n\nKey points:\n- Replace placeholders with actual values\n- Verifier name in code must match dashboard configuration\n- Use fresh JWT tokens for each login attempt"}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I initialize Web3Auth in an Android application?"}, {"role": "assistant", "content": "To initialize Web3Auth in an Android application using Kotlin:\n\n```kotlin\nimport com.web3auth.core.Web3Auth\nimport com.web3auth.core.types.Web3AuthOptions\nimport android.net.Uri\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var web3Auth: Web3Auth\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        web3Auth = Web3Auth(\n            Web3AuthOptions(\n                context = this,\n                clientId = \"YOUR_WEB3AUTH_CLIENT_ID\",\n                network = Network.SAPPHIRE_MAINNET,\n                redirectUrl = Uri.parse(\"${packageName}://auth\"),\n            )\n        )\n    }\n    \n    // Login with Google\n    private fun loginWithGoogle() {\n        val loginCompletableFuture = web3Auth.login(\n            LoginParams(Provider.GOOGLE)\n        )\n\n        loginCompletableFuture.whenComplete { response, error ->\n            if (error == null) {\n                val privateKey = response.privKey\n                val userInfo = response.userInfo\n                \n                runOnUiThread {\n                    Log.d(\"Web3Auth\", \"Login successful: ${userInfo.email}\")\n                }\n            } else {\n                runOnUiThread {\n                    Log.e(\"Web3Auth\", \"Login failed: ${error.message}\")\n                }\n            }\n        }\n    }\n}\n```\n\n## Required Configuration:\n\n1. **Add permissions to AndroidManifest.xml:**\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n2. **Add redirect URL to AndroidManifest.xml:**\n```xml\n<activity android:name=\".MainActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"{YOUR_APP_PACKAGE_NAME}\" android:host=\"auth\" />\n    </intent-filter>\n</activity>\n```\n\n3. **Add the redirect URL to your Web3Auth Dashboard whitelist**\n\nKey points:\n- Replace `YOUR_WEB3AUTH_CLIENT_ID` with your actual Client ID\n- Use `Network.SAPPHIRE_MAINNET` for production, `Network.SAPPHIRE_DEVNET` for development\n- The redirect URL format should be `{packageName}://auth`"}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I initialize Web3Auth in an iOS application using Swift?"}, {"role": "assistant", "content": "To initialize Web3Auth in an iOS application using Swift:\n\n```swift\nimport Web3Auth\n\nclass ViewController: UIViewController {\n    var web3Auth: Web3Auth?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupWeb3Auth()\n    }\n    \n    func setupWeb3Auth() async {\n        guard web3Auth == nil else { return }\n        \n        web3Auth = await Web3Auth(W3AInitParams(\n            clientId: \"YOUR_WEB3AUTH_CLIENT_ID\",\n            network: .sapphire_mainnet,\n            redirectUrl: \"bundleId://auth\"\n        ))\n        \n        if self.web3Auth?.state != nil {\n            print(\"User already logged in\")\n        }\n    }\n    \n    // Login with Google\n    func loginWithGoogle() {\n        Task {\n            do {\n                let result = try await web3Auth?.login(\n                    W3ALoginParams(loginProvider: .GOOGLE)\n                )\n                \n                if let result = result {\n                    await MainActor.run {\n                        print(\"Login successful!\")\n                        print(\"Private Key: \\(result.privKey ?? \"N/A\")\")\n                        print(\"User Info: \\(result.userInfo)\")\n                        \n                        self.handleSuccessfulLogin(result)\n                    }\n                }\n            } catch {\n                await MainActor.run {\n                    print(\"Login failed: \\(error.localizedDescription)\")\n                    self.showErrorAlert(error.localizedDescription)\n                }\n            }\n        }\n    }\n    \n    private func handleSuccessfulLogin(_ result: Web3AuthState) {\n        // Update UI, store user data, navigate to main screen\n    }\n    \n    private func showErrorAlert(_ message: String) {\n        let alert = UIAlertController(title: \"Login Error\", message: message, preferredStyle: .alert)\n        alert.addAction(UIAlertAction(title: \"OK\", style: .default))\n        present(alert, animated: true)\n    }\n}\n```\n\n## Required Configuration:\n\n1. **Add URL scheme to Info.plist:**\n```xml\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLName</key>\n        <string>bundleId</string>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>bundleId</string>\n        </array>\n    </dict>\n</array>\n```\n\n2. **Add the redirect URL to your Web3Auth Dashboard whitelist**\n\nKey points:\n- Replace `YOUR_WEB3AUTH_CLIENT_ID` with your actual Client ID\n- Replace `bundleId` with your app's actual bundle identifier\n- Use `.sapphire_mainnet` for production, `.sapphire_devnet` for development\n- The login result contains `privKey` for blockchain transactions and `userInfo` for user profile data"}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I fix Vite bundler issues with Web3Auth?"}, {"role": "assistant", "content": "Vite bundler issues with Web3Auth typically occur due to missing Node.js polyfills. Here's how to fix them:\n\n## 1. Update your vite.config.ts\n\n```typescript\nimport react from \"@vitejs/plugin-react\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [react()],\n  define: {\n    global: \"globalThis\",\n  },\n  resolve: {\n    alias: {\n      buffer: \"buffer\",\n      process: \"process/browser\",\n      util: \"util\",\n    },\n  },\n  optimizeDeps: {\n    include: [\"buffer\", \"process\"],\n  },\n});\n```\n\n## 2. Install required dependencies\n\n```bash\nnpm install --save-dev buffer process\n```\n\n## 3. Update your index.html\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script type=\"module\">\n      import { Buffer } from \"buffer\";\n      import process from \"process\";\n      window.Buffer = Buffer;\n      window.process = process;\n    </script>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Your App</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n```\n\n## 4. Alternative: Using vite-plugin-node-polyfills\n\n```bash\nnpm install --save-dev vite-plugin-node-polyfills\n```\n\n```typescript\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport { nodePolyfills } from \"vite-plugin-node-polyfills\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    nodePolyfills({\n      globals: {\n        Buffer: true,\n        global: true,\n        process: true,\n      },\n      protocolImports: true,\n    }),\n  ],\n});\n```\n\nThese configurations resolve common Vite bundler issues including `Buffer is not defined`, `global is not defined`, and `process is not defined` errors."}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I connect to Polygon blockchain with Web3Auth?"}, {"role": "assistant", "content": "To connect to Polygon blockchain with Web3Auth:\n\n```javascript\nimport { Web3Auth, WEB3AUTH_NETWORK } from \"@web3auth/modal\";\nimport { ethers } from \"ethers\";\n\n// Configure Polygon chain\nconst polygonChainConfig = {\n  chainNamespace: \"eip155\",\n  chainId: \"0x89\", // Polygon Mainnet\n  rpcTarget: \"https://polygon-rpc.com\",\n  displayName: \"Polygon Mainnet\",\n  blockExplorer: \"https://polygonscan.com\",\n  ticker: \"MATIC\",\n  tickerName: \"Polygon\",\n};\n\nconst web3auth = new Web3Auth({\n  clientId: \"YOUR_CLIENT_ID\",\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n  chainConfig: polygonChainConfig,\n});\n\nawait web3auth.init();\n\n// Login and get provider\nconst provider = await web3auth.connect();\n\n// Create ethers provider for Polygon\nconst ethersProvider = new ethers.providers.Web3Provider(provider);\nconst signer = ethersProvider.getSigner();\n\n// Get user's address\nconst address = await signer.getAddress();\nconsole.log(\"User address:\", address);\n\n// Get MATIC balance\nconst balance = await ethersProvider.getBalance(address);\nconst balanceInMatic = ethers.utils.formatEther(balance);\nconsole.log(\"Balance:\", balanceInMatic, \"MATIC\");\n\n// Send MATIC transaction\nconst sendMatic = async (to, amount) => {\n  try {\n    const tx = await signer.sendTransaction({\n      to: to,\n      value: ethers.utils.parseEther(amount),\n    });\n    \n    console.log(\"Transaction hash:\", tx.hash);\n    const receipt = await tx.wait();\n    console.log(\"Transaction confirmed:\", receipt);\n    \n    return receipt;\n  } catch (error) {\n    console.error(\"Transaction failed:\", error);\n  }\n};\n\n// Interact with Polygon contracts (e.g., USDC)\nconst usdcAddress = \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\";\nconst usdcABI = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function decimals() view returns (uint8)\",\n];\n\nconst usdcContract = new ethers.Contract(usdcAddress, usdcABI, signer);\n\n// Get USDC balance\nconst usdcBalance = await usdcContract.balanceOf(address);\nconst decimals = await usdcContract.decimals();\nconst formattedUsdcBalance = ethers.utils.formatUnits(usdcBalance, decimals);\nconsole.log(\"USDC Balance:\", formattedUsdcBalance);\n```\n\nKey points:\n- Chain ID `0x89` is for Polygon Mainnet, use `0x13881` for Mumbai Testnet\n- Polygon uses MATIC as the native token for gas fees\n- All Ethereum tools (ethers.js, web3.js) work with Polygon\n- Popular Polygon RPC endpoints: polygon-rpc.com, rpc.ankr.com/polygon"}]}
{"messages": [{"role": "system", "content": "You are a Web3Auth integration expert assistant. You help developers integrate Web3Auth authentication into their applications across multiple platforms including Web, React, Vue, Android, iOS, Flutter, Unity, and Unreal Engine. You provide accurate, complete code examples with proper imports, configuration, and best practices. You understand the nuances of different SDK platforms and can guide users through authentication flows, blockchain integration, troubleshooting, and advanced features like Custom Authentication and MFA."}, {"role": "user", "content": "How do I set up Smart Accounts with Web3Auth?"}, {"role": "assistant", "content": "Smart Accounts with Web3Auth provide account abstraction capabilities for gasless transactions and enhanced UX:\n\n## Installation\n\n```bash\nnpm install @web3auth/account-abstraction-provider\nnpm install @web3auth/modal\nnpm install @web3auth/base\n```\n\n## Basic Smart Account Setup\n\n```javascript\nimport { Web3Auth, WEB3AUTH_NETWORK } from \"@web3auth/modal\";\nimport { AccountAbstractionProvider } from \"@web3auth/account-abstraction-provider\";\nimport { WALLET_ADAPTERS } from \"@web3auth/base\";\n\nconst web3auth = new Web3Auth({\n  clientId: \"YOUR_WEB3AUTH_CLIENT_ID\",\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n  chainConfig: {\n    chainNamespace: \"eip155\",\n    chainId: \"0x1\", // Ethereum Mainnet\n    rpcTarget: \"https://rpc.ankr.com/eth\",\n  },\n});\n\n// Configure Account Abstraction Provider\nconst accountAbstractionProvider = new AccountAbstractionProvider({\n  config: {\n    chainConfig: {\n      chainNamespace: \"eip155\",\n      chainId: \"0x1\",\n      rpcTarget: \"https://rpc.ankr.com/eth\",\n    },\n    smartAccountInit: {\n      name: \"SAFE\", // or \"KERNEL\", \"BICONOMY\"\n      version: \"1.4.1\",\n    },\n    paymasterConfig: {\n      url: \"https://paymaster.biconomy.io/api/v1/YOUR_PAYMASTER_API_KEY\",\n    },\n  },\n});\n\n// Add the Account Abstraction adapter\nweb3auth.configureAdapter(accountAbstractionProvider);\n\nawait web3auth.init();\n\n// Login and get Smart Account\nconst login = async () => {\n  try {\n    const provider = await web3auth.connectTo(WALLET_ADAPTERS.ACCOUNT_ABSTRACTION, {\n      loginProvider: \"google\",\n    });\n    \n    console.log(\"Smart Account Provider:\", provider);\n    \n    // Get Smart Account address\n    const accounts = await provider.request({ method: \"eth_accounts\" });\n    const smartAccountAddress = accounts[0];\n    console.log(\"Smart Account Address:\", smartAccountAddress);\n    \n    return provider;\n  } catch (error) {\n    console.error(\"Smart Account login failed:\", error);\n  }\n};\n\n// Send gasless transaction\nconst sendGaslessTransaction = async (to, value, data = \"0x\") => {\n  try {\n    const ethersProvider = new ethers.providers.Web3Provider(provider);\n    const signer = ethersProvider.getSigner();\n    \n    const tx = await signer.sendTransaction({\n      to: to,\n      value: ethers.utils.parseEther(value),\n      data: data,\n      // Smart Account handles gas abstraction automatically\n    });\n\n    console.log(\"Transaction hash:\", tx.hash);\n    const receipt = await tx.wait();\n    console.log(\"Transaction confirmed:\", receipt);\n    \n    return receipt;\n  } catch (error) {\n    console.error(\"Gasless transaction failed:\", error);\n    throw error;\n  }\n};\n```\n\n## Key Features of Smart Accounts\n\n1. **Gasless Transactions**: Users don't need to hold native tokens for gas\n2. **Batch Operations**: Multiple transactions in a single operation\n3. **Social Recovery**: Recover accounts using social connections\n4. **Spending Limits**: Set daily/monthly spending limits\n5. **Session Keys**: Temporary keys for specific operations\n6. **Multi-signature**: Require multiple approvals for transactions\n\n## Important Notes\n\n- Replace `YOUR_WEB3AUTH_CLIENT_ID` with your actual Client ID\n- Configure paymaster and bundler URLs with your actual API keys\n- Smart Accounts are currently supported on Ethereum, Polygon, and other EVM chains\n- Gas sponsorship requires setting up a paymaster service\n- Test thoroughly on testnets before production deployment\n\nSmart Accounts significantly improve user experience by abstracting away blockchain complexity while maintaining security and decentralization."}]}
