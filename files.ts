export default {
    "archive/customauth/android/app/build.gradle": "apply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 30\n    buildToolsVersion \"29.0.3\"\n\n    defaultConfig {\n        applicationId \"org.torusresearch.torusdirectandroid\"\n        minSdkVersion 21\n        targetSdkVersion 30\n        versionCode 1\n        versionName \"1.0\"\n        multiDexEnabled true\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        manifestPlaceholders = [\n            'torusRedirectScheme': 'torusapp',\n            'torusRedirectHost': 'org.torusresearch.torusdirectandroid',\n            'torusRedirectPathPrefix': '/redirect'\n        ]\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n\n    packagingOptions {\n        exclude 'META-INF/DEPENDENCIES'\n        exclude 'META-INF/LICENSE'\n        exclude 'META-INF/LICENSE.txt'\n        exclude 'META-INF/license.txt'\n        exclude 'META-INF/NOTICE'\n        exclude 'META-INF/NOTICE.txt'\n        exclude 'META-INF/notice.txt'\n        exclude 'META-INF/ASL2.0'\n        exclude(\"META-INF/*.kotlin_module\")\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n}\n\ndependencies {\n    implementation 'org.torusresearch:torus-direct-android-sdk:1.0.0'\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'com.google.code.gson:gson:2.8.6'\n    testImplementation 'junit:junit:4.13.1'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n}\n",
    "archive/customauth/android/app/MainActivity.java": "package org.torusresearch.torusdirectandroid;\n\nimport android.annotation.SuppressLint;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Spinner;\nimport android.widget.TextView;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport org.torusresearch.torusdirect.TorusDirectSdk;\nimport org.torusresearch.torusdirect.types.Auth0ClientOptions;\nimport org.torusresearch.torusdirect.types.DirectSdkArgs;\nimport org.torusresearch.torusdirect.types.LoginType;\nimport org.torusresearch.torusdirect.types.SubVerifierDetails;\nimport org.torusresearch.torusdirect.types.TorusLoginResponse;\nimport org.torusresearch.torusdirect.types.TorusNetwork;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport java8.util.concurrent.CompletableFuture;\n\n\npublic class MainActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener {\n\n    private final HashMap<String, LoginVerifier> verifierMap = new HashMap<String, LoginVerifier>() {\n        {\n            put(\"google\", new LoginVerifier(\"Google\", LoginType.GOOGLE, \"221898609709-obfn3p63741l5333093430j3qeiinaa8.apps.googleusercontent.com\", \"google-lrc\"));\n            put(\"facebook\", new LoginVerifier(\"Facebook\", LoginType.FACEBOOK, \"617201755556395\", \"facebook-lrc\"));\n            put(\"twitch\", new LoginVerifier(\"Twitch\", LoginType.TWITCH, \"f5and8beke76mzutmics0zu4gw10dj\", \"twitch-lrc\"));\n            put(\"discord\", new LoginVerifier(\"Discord\", LoginType.DISCORD, \"682533837464666198\", \"discord-lrc\"));\n            String domain = \"torus-test.auth0.com\";\n            put(\"email_password\", new LoginVerifier(\"Email Password\", LoginType.EMAIL_PASSWORD, \"sqKRBVSdwa4WLkaq419U7Bamlh5vK1H7\", \"torus-auth0-email-password\", domain));\n            put(\"apple\", new LoginVerifier(\"Apple\", LoginType.APPLE, \"m1Q0gvDfOyZsJCZ3cucSQEe9XMvl9d9L\", \"torus-auth0-apple-lrc\", domain));\n            put(\"github\", new LoginVerifier(\"Github\", LoginType.GITHUB, \"PC2a4tfNRvXbT48t89J5am0oFM21Nxff\", \"torus-auth0-github-lrc\", domain));\n            put(\"linkedin\", new LoginVerifier(\"LinkedIn\", LoginType.LINKEDIN, \"59YxSgx79Vl3Wi7tQUBqQTRTxWroTuoc\", \"torus-auth0-linkedin-lrc\", domain));\n            put(\"twitter\", new LoginVerifier(\"Twitter\", LoginType.TWITTER, \"A7H8kkcmyFRlusJQ9dZiqBLraG2yWIsO\", \"torus-auth0-twitter-lrc\", domain));\n            put(\"line\", new LoginVerifier(\"Line\", LoginType.APPLE, \"WN8bOmXKNRH1Gs8k475glfBP5gDZr9H1\", \"torus-auth0-line-lrc\", domain));\n            put(\"hosted_email_passwordless\", new LoginVerifier(\"Hosted Email Passwordless\", LoginType.JWT, \"P7PJuBCXIHP41lcyty0NEb7Lgf7Zme8Q\", \"torus-auth0-passwordless\", domain, \"name\", false));\n            put(\"hosted_sms_passwordless\", new LoginVerifier(\"Hosted SMS Passwordless\", LoginType.JWT, \"nSYBFalV2b1MSg5b2raWqHl63tfH3KQa\", \"torus-auth0-sms-passwordless\", domain, \"name\", false));\n        }\n    };\n\n    private TorusDirectSdk torusSdk;\n    private LoginVerifier selectedLoginVerifier;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        DirectSdkArgs args = new DirectSdkArgs(\"torusapp://org.torusresearch.torusdirectandroid/redirect\", TorusNetwork.TESTNET);\n        this.torusSdk = new TorusDirectSdk(args, this);\n        Spinner spinner = findViewById(R.id.verifierList);\n        List<LoginVerifier> loginVerifierList = new ArrayList<>(verifierMap.values());\n        ArrayAdapter<LoginVerifier> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, loginVerifierList);\n        spinner.setAdapter(adapter);\n        spinner.setOnItemSelectedListener(this);\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    public void launch(View view) {\n        Log.d(\"result:selecteditem\", this.selectedLoginVerifier.toString());\n        Auth0ClientOptions.Auth0ClientOptionsBuilder builder = null;\n        if (this.selectedLoginVerifier.getDomain() != null) {\n            builder = new Auth0ClientOptions.Auth0ClientOptionsBuilder(this.selectedLoginVerifier.getDomain());\n            builder.setVerifierIdField(this.selectedLoginVerifier.getVerifierIdField());\n            builder.setVerifierIdCaseSensitive(this.selectedLoginVerifier.isVerfierIdCaseSensitive());\n        }\n        CompletableFuture<TorusLoginResponse> torusLoginResponseCf;\n        if (builder == null) {\n            torusLoginResponseCf = this.torusSdk.triggerLogin(new SubVerifierDetails(this.selectedLoginVerifier.getTypeOfLogin(),\n                    this.selectedLoginVerifier.getVerifier(),\n                    this.selectedLoginVerifier.getClientId()));\n        } else {\n            torusLoginResponseCf = this.torusSdk.triggerLogin(new SubVerifierDetails(this.selectedLoginVerifier.getTypeOfLogin(),\n                    this.selectedLoginVerifier.getVerifier(),\n                    this.selectedLoginVerifier.getClientId(), builder.build()));\n        }\n\n        torusLoginResponseCf.whenComplete((torusLoginResponse, error) -> {\n            if (error != null) {\n                ((TextView) findViewById(R.id.output)).setText(\"Something went wrong \" + error.getMessage());\n            } else {\n                String json = torusLoginResponse.getPublicAddress();\n                Log.d(MainActivity.class.getSimpleName(), json);\n                ((TextView) findViewById(R.id.output)).setText(json);\n            }\n        });\n    }\n\n    @Override\n    public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n        this.selectedLoginVerifier = (LoginVerifier) adapterView.getSelectedItem();\n    }\n\n    @Override\n    public void onNothingSelected(AdapterView<?> adapterView) {\n    }\n}\n",
    "archive/customauth/android/build.gradle": "buildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.1.2'\n        classpath \"de.mannodermaus.gradle.plugins:android-junit5:1.3.2.0\"\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n",
    "archive/customauth/ios/ContentView.swift": "import SwiftUI\nimport TorusSwiftDirectSDK\nimport FetchNodeDetails\nimport PromiseKit\nimport SafariServices\nimport web3swift\nimport CryptoSwift\n\nstruct ContentView: View {\n\n    @State var showSafari = false\n\n    var body: some View {\n        NavigationView{\n            List {\n                Section(header: Text(\"Single Logins\")) {\n                    Group{\n\n                        Button(action: {\n\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .google,\n                                                         clientId: \"221898609709-obfn3p63741l5333093430j3qeiinaa8.apps.googleusercontent.com\",\n                                                         verifierName: \"google-lrc\",\n                                                         redirectURL: \"com.googleusercontent.apps.238941746713-vfap8uumijal4ump28p9jd3lbe6onqt4:/oauthredirect\",\n                                                         browserRedirectURL: \"https://scripts.toruswallet.io/redirect.html\")\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"google-lrc\", subVerifierDetails: [sub], loglevel: .trace)\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Google Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .reddit,\n                                                         clientId: \"rXIp6g2y3h1wqg\",\n                                                         verifierName: \"reddit-shubs\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\")\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"reddit-shubs\", subVerifierDetails: [sub], network: .ROPSTEN, loglevel: .trace)\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Reddit Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .discord,\n                                                         clientId: \"700259843063152661\",\n                                                         verifierName: \"discord-shubs\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\")\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"discord-shubs\", subVerifierDetails: [sub])\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Discord Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .facebook,\n                                                         clientId: \"659561074900150\",\n                                                         verifierName: \"facebook-shubs\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\", browserRedirectURL: \"https://scripts.toruswallet.io/redirect.html\")\n\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"facebook-shubs\", subVerifierDetails: [sub])\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Facebook Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .twitch,\n                                                         clientId: \"p560duf74b2bidzqu6uo0b3ot7qaao\",\n                                                         verifierName: \"twitch-shubs\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\")\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"twitch-shubs\", subVerifierDetails: [sub])\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Twitch Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .twitter,\n                                                         clientId: \"A7H8kkcmyFRlusJQ9dZiqBLraG2yWIsO\",\n                                                         verifierName: \"torus-auth0-twitter-lrc\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\",\n                                                         jwtParams: [\"domain\":\"torus-test.auth0.com\"])\n\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"torus-auth0-twitter-lrc\", subVerifierDetails: [sub])\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Twitter Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .github,\n                                                         clientId: \"PC2a4tfNRvXbT48t89J5am0oFM21Nxff\",\n                                                         verifierName: \"torus-auth0-github-lrc\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\",\n                                                         browserRedirectURL: \"https://scripts.toruswallet.io/redirect.html\",\n                                                         jwtParams: [\"domain\":\"torus-test.auth0.com\"])\n\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"torus-auth0-github-lrc\", subVerifierDetails: [sub], loglevel: .error)\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Github Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .linkedin,\n                                                         clientId: \"59YxSgx79Vl3Wi7tQUBqQTRTxWroTuoc\",\n                                                         verifierName: \"torus-auth0-linkedin-lrc\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\",\n                                                         jwtParams: [\"domain\":\"torus-test.auth0.com\"])\n\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"torus-auth0-linkedin-lrc\", subVerifierDetails: [sub], loglevel: .trace)\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Linkedin Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .apple,\n                                                         clientId: \"m1Q0gvDfOyZsJCZ3cucSQEe9XMvl9d9L\",\n                                                         verifierName: \"torus-auth0-apple-lrc\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\",\n                                                         jwtParams: [\"domain\":\"torus-test.auth0.com\"])\n\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"torus-auth0-apple-lrc\", subVerifierDetails: [sub], loglevel: .trace)\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Apple Login\")\n                        })\n\n                    }\n\n                    Group {\n                         Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .jwt,\n                                                         clientId: \"P7PJuBCXIHP41lcyty0NEb7Lgf7Zme8Q\",\n                                                         verifierName: \"torus-auth0-email-passwordless\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\",\n                                                         extraQueryParams: [\"verifier_id_field\": \"name\"],\n                                                         jwtParams: [\"domain\":\"torus-test.auth0.com\"])\n\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"torus-auth0-email-passwordless\", subVerifierDetails: [sub], loglevel: .trace)\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Email-password Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .kakao,\n                                                         clientId: \"wpkcc7alGJjEgjaL6q5AWRqgRWHFsdTL\",\n                                                         verifierName: \"torus-auth0-kakao-lrc\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\",\n                                                         jwtParams: [\"domain\":\"torus-test.auth0.com\"])\n\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"torus-auth0-kakao-lrc\", subVerifierDetails: [sub], loglevel: .trace)\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Kakao Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .apple,\n                                                         clientId: \"dhFGlWQMoACOI5oS5A1jFglp772OAWr1\",\n                                                         verifierName: \"torus-auth0-weibo-lrc\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\",\n                                                         jwtParams: [\"domain\":\"torus-test.auth0.com\"])\n\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"torus-auth0-weibo-lrc\", subVerifierDetails: [sub], loglevel: .trace)\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Weibo Login\")\n                        })\n\n                        Button(action: {\n                            let sub = SubVerifierDetails(loginType: .web,\n                                                         loginProvider: .wechat,\n                                                         clientId: \"cewDD3i6F1vtHeV1KIbaxUZ8vJQjJZ8V\",\n                                                         verifierName: \"torus-auth0-wechat-lrc\",\n                                                         redirectURL: \"tdsdk://tdsdk/oauthCallback\",\n                                                         jwtParams: [\"domain\":\"torus-test.auth0.com\"])\n\n                            let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleLogin, aggregateVerifierName: \"torus-auth0-wechat-lrc\", subVerifierDetails: [sub], loglevel: .trace)\n                            tdsdk.triggerLogin(browserType: .external).done{ data in\n                                print(\"private key rebuild\", data)\n                            }.catch{ err in\n                                print(err)\n                            }\n                        }, label: {\n                            Text(\"Wechat Login\")\n                        })\n\n                    }\n\n\n                }\n\n                Section(header: Text(\"Single ID verifier\")){\n                    Button(action: {\n                        let sub = SubVerifierDetails(loginType: .installed,\n                                                     loginProvider: .google,\n                                                     clientId: \"238941746713-vfap8uumijal4ump28p9jd3lbe6onqt4.apps.googleusercontent.com\",\n                                                     verifierName: \"google-ios\",\n                                                     redirectURL: \"com.googleusercontent.apps.238941746713-vfap8uumijal4ump28p9jd3lbe6onqt4:/oauthredirect\")\n                        let tdsdk = TorusSwiftDirectSDK(aggregateVerifierType: .singleIdVerifier, aggregateVerifierName: \"multigoogle-torus\", subVerifierDetails: [sub])\n                        tdsdk.triggerLogin(browserType: .external).done{ data in\n                            print(\"private key rebuild\", data)\n                        }.catch{ err in\n                            print(err)\n                        }\n                    }, label: {\n                        Text(\"Google Login - Deep link flow\")\n                    })\n                }\n            }.navigationBarTitle(Text(\"DirectAuth app\"))\n        }\n    }\n}\n\nstruct SafariView: UIViewControllerRepresentable {\n    typealias UIViewControllerType = SFSafariViewController\n\n    var url: URL?\n\n    func makeUIViewController(context: UIViewControllerRepresentableContext<SafariView>) -> SFSafariViewController {\n        return SFSafariViewController(url: url!)\n    }\n\n    func updateUIViewController(_ safariViewController: SFSafariViewController, context: UIViewControllerRepresentableContext<SafariView>) {\n    }\n}\n\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n",
    "archive/customauth/ios/Package.swift": "import PackageDescription\n\nlet package = Package(\n    name: \"TorusSwiftDirectSDK\",\n    dependencies: [\n        .package(name: \"TorusSwiftDirectSDK\", url: \"https://github.com/torusresearch/torus-direct-swift-sdk\", .upToNextMajor(from: \"0.0.1\"))\n    ],\n)\n",
    "archive/customauth/ios/SceneDelegate.swift": "import UIKit\nimport SwiftUI\nimport TorusSwiftDirectSDK\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n    var window: UIWindow?\n\n    // Handle Universal logins\n    func scene(_ scene: UIScene, continue userActivity: NSUserActivity) {\n        guard userActivity.activityType == NSUserActivityTypeBrowsingWeb,\n            let urlToOpen = userActivity.webpageURL else {\n                return\n        }\n        TorusSwiftDirectSDK.handle(url: urlToOpen)\n    }\n\n    // Hanlde Deep linkings\n    func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n        guard let url = URLContexts.first?.url else {\n            return\n        }\n        TorusSwiftDirectSDK.handle(url: url)\n    }\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.\n        // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.\n        // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).\n        // Create the SwiftUI view that provides the window contents.\n        let contentView = ContentView()\n\n        // Use a UIHostingController as window root view controller.\n        if let windowScene = scene as? UIWindowScene {\n            let window = UIWindow(windowScene: windowScene)\n            window.rootViewController = UIHostingController(rootView: contentView)\n            self.window = window\n            window.makeKeyAndVisible()\n        }\n    }\n\n    func sceneDidDisconnect(_ scene: UIScene) {\n        // Called as the scene is being released by the system.\n        // This occurs shortly after the scene enters the background, or when its session is discarded.\n        // Release any resources associated with this scene that can be re-created the next time the scene connects.\n        // The scene may re-connect later, as its session was not neccessarily discarded (see `application:didDiscardSceneSessions` instead).\n    }\n\n    func sceneDidBecomeActive(_ scene: UIScene) {\n        // Called when the scene has moved from an inactive state to an active state.\n        // Use this method to restart any tasks that were paused (or not yet started) when the scene was inactive.\n    }\n\n    func sceneWillResignActive(_ scene: UIScene) {\n        // Called when the scene will move from an active state to an inactive state.\n        // This may occur due to temporary interruptions (ex. an incoming phone call).\n    }\n\n    func sceneWillEnterForeground(_ scene: UIScene) {\n        // Called as the scene transitions from the background to the foreground.\n        // Use this method to undo the changes made on entering the background.\n    }\n\n    func sceneDidEnterBackground(_ scene: UIScene) {\n        // Called as the scene transitions from the foreground to the background.\n        // Use this method to save data, release shared resources, and store enough scene-specific state information\n        // to restore the scene back to its current state.\n    }\n\n\n}\n\nstruct SceneDelegate_Previews: PreviewProvider {\n    static var previews: some View {\n        /*@START_MENU_TOKEN@*/Text(\"Hello, World!\")/*@END_MENU_TOKEN@*/\n    }\n}\n",
    "archive/customauth/react/App.js": "import TorusSdk from \"@toruslabs/customauth\";\nimport { Component } from \"react\";\nimport \"./App.css\";\n\nconst GOOGLE = \"google\";\nconst FACEBOOK = \"facebook\";\nconst REDDIT = \"reddit\";\nconst DISCORD = \"discord\";\nconst TWITCH = \"twitch\";\nconst GITHUB = \"github\";\nconst APPLE = \"apple\";\nconst LINKEDIN = \"linkedin\";\nconst TWITTER = \"twitter\";\nconst WEIBO = \"weibo\";\nconst LINE = \"line\";\nconst EMAIL_PASSWORD = \"email_password\";\nconst PASSWORDLESS = \"passwordless\";\nconst HOSTED_EMAIL_PASSWORDLESS = \"hosted_email_passwordless\";\nconst HOSTED_SMS_PASSWORDLESS = \"hosted_sms_passwordless\";\nconst WEBAUTHN = \"webauthn\";\n\nconst AUTH_DOMAIN = \"https://torus-test.auth0.com\";\n\nconst verifierMap = {\n  [GOOGLE]: {\n    name: \"Google\",\n    typeOfLogin: \"google\",\n    clientId: \"221898609709-obfn3p63741l5333093430j3qeiinaa8.apps.googleusercontent.com\",\n    verifier: \"google-lrc\",\n  },\n  [FACEBOOK]: {\n    name: \"Facebook\",\n    typeOfLogin: \"facebook\",\n    clientId: \"617201755556395\",\n    verifier: \"facebook-lrc\",\n  },\n  [REDDIT]: {\n    name: \"Reddit\",\n    typeOfLogin: \"reddit\",\n    clientId: \"YNsv1YtA_o66fA\",\n    verifier: \"torus-reddit-test\",\n  },\n  [TWITCH]: {\n    name: \"Twitch\",\n    typeOfLogin: \"twitch\",\n    clientId: \"f5and8beke76mzutmics0zu4gw10dj\",\n    verifier: \"twitch-lrc\",\n  },\n  [DISCORD]: {\n    name: \"Discord\",\n    typeOfLogin: \"discord\",\n    clientId: \"682533837464666198\",\n    verifier: \"discord-lrc\",\n  },\n  [EMAIL_PASSWORD]: {\n    name: \"Email Password\",\n    typeOfLogin: \"email_password\",\n    clientId: \"sqKRBVSdwa4WLkaq419U7Bamlh5vK1H7\",\n    verifier: \"torus-auth0-email-password\",\n  },\n  [PASSWORDLESS]: {\n    name: \"Passwordless\",\n    typeOfLogin: \"passwordless\",\n    clientId: \"P7PJuBCXIHP41lcyty0NEb7Lgf7Zme8Q\",\n    verifier: \"torus-auth0-passwordless\",\n  },\n  [APPLE]: {\n    name: \"Apple\",\n    typeOfLogin: \"apple\",\n    clientId: \"m1Q0gvDfOyZsJCZ3cucSQEe9XMvl9d9L\",\n    verifier: \"torus-auth0-apple-lrc\",\n  },\n  [GITHUB]: {\n    name: \"Github\",\n    typeOfLogin: \"github\",\n    clientId: \"PC2a4tfNRvXbT48t89J5am0oFM21Nxff\",\n    verifier: \"torus-auth0-github-lrc\",\n  },\n  [LINKEDIN]: {\n    name: \"Linkedin\",\n    typeOfLogin: \"linkedin\",\n    clientId: \"59YxSgx79Vl3Wi7tQUBqQTRTxWroTuoc\",\n    verifier: \"torus-auth0-linkedin-lrc\",\n  },\n  [TWITTER]: {\n    name: \"Twitter\",\n    typeOfLogin: \"twitter\",\n    clientId: \"A7H8kkcmyFRlusJQ9dZiqBLraG2yWIsO\",\n    verifier: \"torus-auth0-twitter-lrc\",\n  },\n  [WEIBO]: {\n    name: \"Weibo\",\n    typeOfLogin: \"weibo\",\n    clientId: \"dhFGlWQMoACOI5oS5A1jFglp772OAWr1\",\n    verifier: \"torus-auth0-weibo-lrc\",\n  },\n  [LINE]: {\n    name: \"Line\",\n    typeOfLogin: \"line\",\n    clientId: \"WN8bOmXKNRH1Gs8k475glfBP5gDZr9H1\",\n    verifier: \"torus-auth0-line-lrc\",\n  },\n  [HOSTED_EMAIL_PASSWORDLESS]: {\n    name: \"Hosted Email Passwordless\",\n    typeOfLogin: \"jwt\",\n    clientId: \"P7PJuBCXIHP41lcyty0NEb7Lgf7Zme8Q\",\n    verifier: \"torus-auth0-passwordless\",\n  },\n  [HOSTED_SMS_PASSWORDLESS]: {\n    name: \"Hosted SMS Passwordless\",\n    typeOfLogin: \"jwt\",\n    clientId: \"nSYBFalV2b1MSg5b2raWqHl63tfH3KQa\",\n    verifier: \"torus-auth0-sms-passwordless\",\n  },\n  [WEBAUTHN]: {\n    name: \"WebAuthn\",\n    typeOfLogin: \"webauthn\",\n    clientId: \"webauthn\",\n    verifier: \"webauthn-lrc\",\n  },\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedVerifier: GOOGLE,\n      torusdirectsdk: null,\n      loginHint: \"\",\n      consoleText: \"\",\n    };\n  }\n\n  componentDidMount = async () => {\n    try {\n      const torusdirectsdk = new TorusSdk({\n        baseUrl: `${window.location.origin}/serviceworker`,\n        enableLogging: true,\n        network: \"testnet\", // details for test net\n      });\n\n      await torusdirectsdk.init({ skipSw: false });\n\n      this.setState({ torusdirectsdk: torusdirectsdk });\n    } catch (error) {\n      console.error(error, \"mounted caught\");\n    }\n  };\n\n  login = async (e) => {\n    e.preventDefault();\n    const { selectedVerifier, torusdirectsdk } = this.state;\n\n    try {\n      const jwtParams = this._loginToConnectionMap()[selectedVerifier] || {};\n      const { typeOfLogin, clientId, verifier } = verifierMap[selectedVerifier];\n      const loginDetails = await torusdirectsdk.triggerLogin({\n        typeOfLogin,\n        verifier,\n        clientId,\n        jwtParams,\n      });\n      this.setState({\n        consoleText: typeof loginDetails === \"object\" ? JSON.stringify(loginDetails) : loginDetails,\n      });\n    } catch (error) {\n      console.error(error, \"login caught\");\n    }\n  };\n\n  _loginToConnectionMap = () => {\n    const { loginHint } = this.state;\n    return {\n      [EMAIL_PASSWORD]: { domain: AUTH_DOMAIN },\n      [PASSWORDLESS]: { domain: AUTH_DOMAIN, login_hint: loginHint },\n      [HOSTED_EMAIL_PASSWORDLESS]: {\n        domain: AUTH_DOMAIN,\n        verifierIdField: \"name\",\n        connection: \"\",\n        isVerifierIdCaseSensitive: false,\n      },\n      [HOSTED_SMS_PASSWORDLESS]: {\n        domain: AUTH_DOMAIN,\n        verifierIdField: \"name\",\n        connection: \"\",\n      },\n      [APPLE]: { domain: AUTH_DOMAIN },\n      [GITHUB]: { domain: AUTH_DOMAIN },\n      [LINKEDIN]: { domain: AUTH_DOMAIN },\n      [TWITTER]: { domain: AUTH_DOMAIN },\n      [WEIBO]: { domain: AUTH_DOMAIN },\n      [LINE]: { domain: AUTH_DOMAIN },\n    };\n  };\n\n  render() {\n    const { selectedVerifier, loginHint, consoleText } = this.state;\n    let emailField = \"\";\n\n    if (selectedVerifier === PASSWORDLESS) {\n      emailField = (\n        <div style={{ marginTop: \"20px\" }}>\n          <input type=\"email\" value={loginHint} onChange={(e) => this.setState({ loginHint: e.target.value })} placeholder=\"Enter your email\" />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.login}>\n          <div>\n            <span style={{ marginRight: \"10px\" }}>Verifier:</span>\n            <select value={selectedVerifier} onChange={(e) => this.setState({ selectedVerifier: e.target.value })}>\n              {Object.keys(verifierMap).map((login) => (\n                <option value={login} key={login.toString()}>\n                  {verifierMap[login].name}\n                </option>\n              ))}\n            </select>\n          </div>\n          {emailField}\n          <div style={{ marginTop: \"20px\" }}>\n            <button>Login with Torus</button>\n          </div>\n        </form>\n        <div id=\"app\">\n          <p>\n            Please note that the verifiers listed in the example have http://localhost:3000/serviceworker/redirect configured as the redirect uri.\n          </p>\n          <p>If you use any other domains, they won't work.</p>\n          <p>The verifiers listed here only work with the client id's specified in example. Please don't edit them</p>\n          <p>The verifiers listed here are for example reference only. Please don't use them for anything other than testing purposes.</p>\n          <div>\n            Reach out to us at <a href=\"mailto:hello@tor.us\">hello@tor.us</a> or <a href=\"https://t.me/web3auth\">telegram group</a> to get your\n            verifier deployed for your client id.\n          </div>\n          <div id=\"console\">\n            <p></p>\n          </div>\n        </div>\n        <div className=\"console\">\n          <p>{consoleText}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",
    "archive/customauth/react/index.js": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",
    "archive/customauth/react/starkware/App.js": "import React from \"react\";\nimport \"../App.css\";\nimport TorusSdk, { TorusLoginResponse } from \"@toruslabs/customauth\";\n\nimport { getStarkHDAccount, starkEc, sign, verify, pedersen, STARKNET_NETWORKS } from \"@toruslabs/openlogin-starkkey\";\nimport { binaryToHex, binaryToUtf8, bufferToBinary, bufferToHex, hexToBinary } from \"enc-utils\";\nimport type { ec } from \"elliptic\";\n\nconst GOOGLE = \"google\";\nconst FACEBOOK = \"facebook\";\nconst REDDIT = \"reddit\";\nconst DISCORD = \"discord\";\nconst TWITCH = \"twitch\";\nconst GITHUB = \"github\";\nconst APPLE = \"apple\";\nconst LINKEDIN = \"linkedin\";\nconst TWITTER = \"twitter\";\nconst WEIBO = \"weibo\";\nconst LINE = \"line\";\nconst EMAIL_PASSWORD = \"email_password\";\nconst PASSWORDLESS = \"passwordless\";\nconst HOSTED_EMAIL_PASSWORDLESS = \"hosted_email_passwordless\";\nconst HOSTED_SMS_PASSWORDLESS = \"hosted_sms_passwordless\";\nconst WEBAUTHN = \"webauthn\";\n\nconst AUTH_DOMAIN = \"https://torus-test.auth0.com\";\n\nconst verifierMap = {\n  [GOOGLE]: {\n    name: \"Google\",\n    typeOfLogin: \"google\",\n    clientId:\n      \"221898609709-obfn3p63741l5333093430j3qeiinaa8.apps.googleusercontent.com\",\n    verifier: \"google-lrc\",\n  },\n  [FACEBOOK]: {\n    name: \"Facebook\",\n    typeOfLogin: \"facebook\",\n    clientId: \"617201755556395\",\n    verifier: \"facebook-lrc\",\n  },\n  [REDDIT]: {\n    name: \"Reddit\",\n    typeOfLogin: \"reddit\",\n    clientId: \"YNsv1YtA_o66fA\",\n    verifier: \"torus-reddit-test\",\n  },\n  [TWITCH]: {\n    name: \"Twitch\",\n    typeOfLogin: \"twitch\",\n    clientId: \"f5and8beke76mzutmics0zu4gw10dj\",\n    verifier: \"twitch-lrc\",\n  },\n  [DISCORD]: {\n    name: \"Discord\",\n    typeOfLogin: \"discord\",\n    clientId: \"682533837464666198\",\n    verifier: \"discord-lrc\",\n  },\n  [EMAIL_PASSWORD]: {\n    name: \"Email Password\",\n    typeOfLogin: \"email_password\",\n    clientId: \"sqKRBVSdwa4WLkaq419U7Bamlh5vK1H7\",\n    verifier: \"torus-auth0-email-password\",\n  },\n  [PASSWORDLESS]: {\n    name: \"Passwordless\",\n    typeOfLogin: \"passwordless\",\n    clientId: \"P7PJuBCXIHP41lcyty0NEb7Lgf7Zme8Q\",\n    verifier: \"torus-auth0-passwordless\",\n  },\n  [APPLE]: {\n    name: \"Apple\",\n    typeOfLogin: \"apple\",\n    clientId: \"m1Q0gvDfOyZsJCZ3cucSQEe9XMvl9d9L\",\n    verifier: \"torus-auth0-apple-lrc\",\n  },\n  [GITHUB]: {\n    name: \"Github\",\n    typeOfLogin: \"github\",\n    clientId: \"PC2a4tfNRvXbT48t89J5am0oFM21Nxff\",\n    verifier: \"torus-auth0-github-lrc\",\n  },\n  [LINKEDIN]: {\n    name: \"Linkedin\",\n    typeOfLogin: \"linkedin\",\n    clientId: \"59YxSgx79Vl3Wi7tQUBqQTRTxWroTuoc\",\n    verifier: \"torus-auth0-linkedin-lrc\",\n  },\n  [TWITTER]: {\n    name: \"Twitter\",\n    typeOfLogin: \"twitter\",\n    clientId: \"A7H8kkcmyFRlusJQ9dZiqBLraG2yWIsO\",\n    verifier: \"torus-auth0-twitter-lrc\",\n  },\n  [WEIBO]: {\n    name: \"Weibo\",\n    typeOfLogin: \"weibo\",\n    clientId: \"dhFGlWQMoACOI5oS5A1jFglp772OAWr1\",\n    verifier: \"torus-auth0-weibo-lrc\",\n  },\n  [LINE]: {\n    name: \"Line\",\n    typeOfLogin: \"line\",\n    clientId: \"WN8bOmXKNRH1Gs8k475glfBP5gDZr9H1\",\n    verifier: \"torus-auth0-line-lrc\",\n  },\n  [HOSTED_EMAIL_PASSWORDLESS]: {\n    name: \"Hosted Email Passwordless\",\n    typeOfLogin: \"jwt\",\n    clientId: \"P7PJuBCXIHP41lcyty0NEb7Lgf7Zme8Q\",\n    verifier: \"torus-auth0-passwordless\",\n  },\n  [HOSTED_SMS_PASSWORDLESS]: {\n    name: \"Hosted SMS Passwordless\",\n    typeOfLogin: \"jwt\",\n    clientId: \"nSYBFalV2b1MSg5b2raWqHl63tfH3KQa\",\n    verifier: \"torus-auth0-sms-passwordless\",\n  },\n  [WEBAUTHN]: {\n    name: \"WebAuthn\",\n    typeOfLogin: \"webauthn\",\n    clientId: \"webauthn\",\n    verifier: \"webauthn-lrc\",\n  },\n};\n\ninterface IState {\n  selectedVerifier: string;\n  torusdirectsdk: TorusSdk | null;\n  loginResponse?: TorusLoginResponse | null;\n  signingMessage?: string | null;\n  signedMessage?: ec.Signature | null;\n}\n\ninterface IProps { }\n\nclass PopupMode extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedVerifier: GOOGLE,\n      torusdirectsdk: null,\n      loginResponse: null,\n      signingMessage: null,\n      signedMessage: null,\n    };\n  }\n\n  componentDidMount = async () => {\n    try {\n      const torusdirectsdk = new TorusSdk({\n        baseUrl: `${window.location.origin}/serviceworker`,\n        enableLogging: true,\n        network: \"testnet\", // details for test net\n      });\n\n      await torusdirectsdk.init({ skipSw: false });\n\n      this.setState({ torusdirectsdk });\n    } catch (error) {\n      console.error(error, \"mounted caught\");\n    }\n  };\n\n  login = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const { selectedVerifier, torusdirectsdk } = this.state;\n    // console.log(hash, queryParameters);\n    try {\n      const jwtParams = this._loginToConnectionMap()[selectedVerifier] || {};\n      const { typeOfLogin, clientId, verifier } = verifierMap[selectedVerifier];\n      const loginDetails = await torusdirectsdk?.triggerLogin({\n        typeOfLogin,\n        verifier,\n        clientId,\n        jwtParams,\n      });\n      this.setState({ loginResponse: loginDetails });\n      this.printToConsole(loginDetails);\n    } catch (error) {\n      console.error(error, \"login caught\");\n    }\n  };\n\n  _loginToConnectionMap = (): Record<string, any> => {\n    return {\n      [EMAIL_PASSWORD]: { domain: AUTH_DOMAIN },\n      [HOSTED_EMAIL_PASSWORDLESS]: {\n        domain: AUTH_DOMAIN,\n        verifierIdField: \"name\",\n        connection: \"\",\n        isVerifierIdCaseSensitive: false,\n      },\n      [HOSTED_SMS_PASSWORDLESS]: { domain: AUTH_DOMAIN, verifierIdField: \"name\", connection: \"\" },\n      [APPLE]: { domain: AUTH_DOMAIN },\n      [GITHUB]: { domain: AUTH_DOMAIN },\n      [LINKEDIN]: { domain: AUTH_DOMAIN },\n      [TWITTER]: { domain: AUTH_DOMAIN },\n      [WEIBO]: { domain: AUTH_DOMAIN },\n      [LINE]: { domain: AUTH_DOMAIN },\n      [COGNITO]: { domain: COGNITO_AUTH_DOMAIN, identity_provider: \"Google\", response_type: \"token\", user_info_endpoint: \"userInfo\" },\n    };\n  };\n\n  printToConsole = (...args: unknown[]): void => {\n    const el = document.querySelector(\"#console>p\");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  };\n\n  getStarkAccount = (index: number): { pubKey: string; privKey: string } => {\n    const account = getStarkHDAccount((this.state.loginResponse?.privateKey as string).padStart(64, \"0\"), index, STARKNET_NETWORKS.testnet);\n    return account;\n  };\n\n  starkHdAccount = (e: any): { pubKey?: string; privKey?: string } => {\n    e.preventDefault();\n    const accIndex = e.target[0].value;\n    const account = this.getStarkAccount(accIndex);\n    this.printToConsole({\n      ...account,\n    });\n    return account;\n  };\n\n  /**\n  *\n  * @param str utf 8 string to be signed\n  * @param prefix utf-8 prefix padded to 252 bits (optional)\n  * @returns\n  */\n  getPedersenHashRecursively = (str: string, prefix?: string): string => {\n    const TEST_MESSAGE_SUFFIX = prefix || \"OPENLOGIN STARKWARE-\";\n    const x = Buffer.from(str, \"utf8\");\n    const binaryStr = hexToBinary(bufferToHex(x));\n    const rounds = Math.ceil(binaryStr.length / 252);\n    if (rounds > 1) {\n      const currentChunkHex = binaryToHex(binaryStr.substring(0, 252));\n      const hash = pedersen([strToHex(TEST_MESSAGE_SUFFIX), new BN(currentChunkHex, \"hex\").toString(16)]);\n      const pendingStr = binaryToUtf8(binaryStr.substring(252));\n      return getPedersenHashRecursively(pendingStr.replace(\"\\n\", \"\"), hash);\n    }\n    const currentChunkHex = binaryToHex(binaryStr.padEnd(252, \"0\"));\n    return pedersen([utils.number.toBN(strToHex(TEST_MESSAGE_SUFFIX), \"hex\"), utils.number.toBN(currentChunkHex, \"hex\")]);\n  };\n\n\n  signMessageWithStarkKey = (e: any) => {\n    e.preventDefault();\n    const accIndex = e.target[0].value;\n    const message = e.target[1].value;\n    const account = this.getStarkAccount(accIndex);\n    const keyPair = starkEc.keyFromPrivate(account.privKey);\n    const hash = this.getPedersenHashRecursively(message);\n    const signedMessage = sign(keyPair, hash);\n    this.setState({ signingMessage: message, signedMessage: signedMessage as unknown as ec.Signature });\n    this.printToConsole({\n      pedersenHash: hash,\n      info: `Message signed successfully: TORUS STARKWARE- ${message}`,\n      signedMesssage: signedMessage,\n    });\n  };\n\n  validateStarkMessage = (e: any) => {\n    e.preventDefault();\n    const signingAccountIndex = e.target[0].value;\n    const account = this.getStarkAccount(signingAccountIndex);\n    const keyPair = starkEc.keyFromPublic(account.pubKey, \"hex\");\n    const hash = this.getPedersenHashRecursively(this.state.signingMessage as string);\n    const isVerified = verify(keyPair, hash, this.state.signedMessage as unknown as ec.Signature);\n    this.printToConsole(`Message is verified: ${isVerified}`);\n  };\n\n  render() {\n    const { selectedVerifier, loginResponse } = this.state;\n    return (\n      <div className=\"App\">\n        {!loginResponse && (\n          <>\n            <div id=\"app\" style={{ margin: 20 }}>\n              <p>\n                Please note that the verifiers listed in the example have <br />\n                http://localhost:3000/serviceworker/redirect configured as the redirect uri.\n              </p>\n              <p>If you use any other domains, they won't work.</p>\n              <p>The verifiers listed here are for example reference only. Please don't use them for anything other than testing purposes.</p>\n              <div>\n                Reach out to us at <a href=\"mailto:hello@tor.us\">hello@tor.us</a> or <a href=\"https://t.me/web3auth\">telegram group</a> to get your\n                verifier deployed for your client id.\n              </div>\n            </div>\n            <form onSubmit={this.login}>\n              <div>\n                <span style={{ marginRight: \"10px\" }}>Verifier:</span>\n                <select value={selectedVerifier} onChange={(e) => this.setState({ selectedVerifier: e.target.value })}>\n                  {Object.keys(verifierMap).map((login) => (\n                    <option value={login} key={login.toString()}>\n                      {verifierMap[login].name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div style={{ marginTop: \"20px\" }}>\n                <button>Login with Torus</button>\n              </div>\n            </form>\n          </>\n        )}\n        {loginResponse && (\n          <div>\n            <span>Custom Auth Private key: {loginResponse.privateKey}</span>\n            <h2>Enter HD account index to derive stark key pair from custom auth's private key</h2>\n            <form onSubmit={this.starkHdAccount}>\n              <input placeholder=\"Enter hd account index\" id=\"accountIndex\" type=\"number\" required />\n              <button type=\"submit\">Get Stark Key Pair </button>\n            </form>\n            <br />\n            <br />\n            <form\n              onSubmit={this.signMessageWithStarkKey}\n              style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}\n            >\n              <input id=\"accountIndex\" type=\"number\" placeholder=\"Enter hd account index\" required />\n              <input id=\"message\" type=\"textarea\" placeholder=\"Enter message\" required />\n              <button type=\"submit\">Sign Message with StarkKey </button>\n            </form>\n            <br />\n            <br />\n            <form\n              onSubmit={this.validateStarkMessage}\n              style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}\n            >\n              <input id=\"accountIndex\" type=\"number\" placeholder=\"Enter account index\" required />\n              <button type=\"submit\" disabled={!this.state.signingMessage}>\n                Validate Stark Message\n              </button>\n            </form>\n            <div id=\"console\" style={{ whiteSpace: \"pre-line\", height: 300 }}>\n              <p style={{ whiteSpace: \"pre-line\" }} />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PopupMode;\n",
    "archive/customauth/vue/App.vue": "<template>\n  <div id=\"app\">\n    <div>\n      <span :style=\"{ marginRight: '20px' }\">verifier:</span>\n      <select v-model=\"selectedVerifier\">\n        <option :key=\"login\" v-for=\"login in Object.keys(verifierMap)\" :value=\"login\">\n          {{ verifierMap[login].name }}\n        </option>\n      </select>\n    </div>\n    <div :style=\"{ marginTop: '20px' }\" v-if=\"selectedVerifier === 'passwordless'\">\n      <input type=\"email\" v-model=\"loginHint\" placeholder=\"Enter your email\" />\n    </div>\n    <div :style=\"{ marginTop: '20px' }\">\n      <button @click=\"login\">Login with Torus</button>\n    </div>\n    <p>Please note that the verifiers listed in the example have http://localhost:3000/serviceworker/redirect configured as the redirect uri.</p>\n    <p>If you use any other domains, they won't work.</p>\n    <p>The verifiers listed here only work with the client id's specified in example. Please don't edit them</p>\n    <p>The verifiers listed here are for example reference only. Please don't use them for anything other than testing purposes.</p>\n    <div>\n      Reach out to us at <a href=\"mailto:hello@tor.us\">hello@tor.us</a> or <a href=\"https://t.me/web3auth\">telegram group</a> to get your verifier\n      deployed for your client id.\n    </div>\n    <div id=\"console\">\n      <p></p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport TorusSdk from \"@toruslabs/customauth\";\nconst GOOGLE = \"google\";\nconst FACEBOOK = \"facebook\";\nconst REDDIT = \"reddit\";\nconst DISCORD = \"discord\";\nconst TWITCH = \"twitch\";\nconst GITHUB = \"github\";\nconst APPLE = \"apple\";\nconst LINKEDIN = \"linkedin\";\nconst TWITTER = \"twitter\";\nconst WEIBO = \"weibo\";\nconst LINE = \"line\";\nconst EMAIL_PASSWORD = \"email_password\";\nconst PASSWORDLESS = \"passwordless\";\nconst HOSTED_EMAIL_PASSWORDLESS = \"hosted_email_passwordless\";\nconst HOSTED_SMS_PASSWORDLESS = \"hosted_sms_passwordless\";\nconst WEBAUTHN = \"webauthn\";\nconst AUTH_DOMAIN = \"https://torus-test.auth0.com\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      torusdirectsdk: undefined,\n      selectedVerifier: \"google\",\n      loginHint: \"\",\n      verifierMap: {\n        [GOOGLE]: {\n          name: \"Google\",\n          typeOfLogin: \"google\",\n          clientId: \"221898609709-obfn3p63741l5333093430j3qeiinaa8.apps.googleusercontent.com\",\n          verifier: \"google-lrc\",\n        },\n        [FACEBOOK]: {\n          name: \"Facebook\",\n          typeOfLogin: \"facebook\",\n          clientId: \"617201755556395\",\n          verifier: \"facebook-lrc\",\n        },\n        [REDDIT]: {\n          name: \"Reddit\",\n          typeOfLogin: \"reddit\",\n          clientId: \"YNsv1YtA_o66fA\",\n          verifier: \"torus-reddit-test\",\n        },\n        [TWITCH]: {\n          name: \"Twitch\",\n          typeOfLogin: \"twitch\",\n          clientId: \"f5and8beke76mzutmics0zu4gw10dj\",\n          verifier: \"twitch-lrc\",\n        },\n        [DISCORD]: {\n          name: \"Discord\",\n          typeOfLogin: \"discord\",\n          clientId: \"682533837464666198\",\n          verifier: \"discord-lrc\",\n        },\n        [EMAIL_PASSWORD]: {\n          name: \"Email Password\",\n          typeOfLogin: \"email_password\",\n          clientId: \"sqKRBVSdwa4WLkaq419U7Bamlh5vK1H7\",\n          verifier: \"torus-auth0-email-password\",\n        },\n        [PASSWORDLESS]: {\n          name: \"Passwordless\",\n          typeOfLogin: \"passwordless\",\n          clientId: \"P7PJuBCXIHP41lcyty0NEb7Lgf7Zme8Q\",\n          verifier: \"torus-auth0-passwordless\",\n        },\n        [APPLE]: {\n          name: \"Apple\",\n          typeOfLogin: \"apple\",\n          clientId: \"m1Q0gvDfOyZsJCZ3cucSQEe9XMvl9d9L\",\n          verifier: \"torus-auth0-apple-lrc\",\n        },\n        [GITHUB]: {\n          name: \"Github\",\n          typeOfLogin: \"github\",\n          clientId: \"PC2a4tfNRvXbT48t89J5am0oFM21Nxff\",\n          verifier: \"torus-auth0-github-lrc\",\n        },\n        [LINKEDIN]: {\n          name: \"Linkedin\",\n          typeOfLogin: \"linkedin\",\n          clientId: \"59YxSgx79Vl3Wi7tQUBqQTRTxWroTuoc\",\n          verifier: \"torus-auth0-linkedin-lrc\",\n        },\n        [TWITTER]: {\n          name: \"Twitter\",\n          typeOfLogin: \"twitter\",\n          clientId: \"A7H8kkcmyFRlusJQ9dZiqBLraG2yWIsO\",\n          verifier: \"torus-auth0-twitter-lrc\",\n        },\n        [WEIBO]: {\n          name: \"Weibo\",\n          typeOfLogin: \"weibo\",\n          clientId: \"dhFGlWQMoACOI5oS5A1jFglp772OAWr1\",\n          verifier: \"torus-auth0-weibo-lrc\",\n        },\n        [LINE]: {\n          name: \"Line\",\n          typeOfLogin: \"line\",\n          clientId: \"WN8bOmXKNRH1Gs8k475glfBP5gDZr9H1\",\n          verifier: \"torus-auth0-line-lrc\",\n        },\n        [HOSTED_EMAIL_PASSWORDLESS]: {\n          name: \"Hosted Email Passwordless\",\n          typeOfLogin: \"jwt\",\n          clientId: \"P7PJuBCXIHP41lcyty0NEb7Lgf7Zme8Q\",\n          verifier: \"torus-auth0-passwordless\",\n        },\n        [HOSTED_SMS_PASSWORDLESS]: {\n          name: \"Hosted SMS Passwordless\",\n          typeOfLogin: \"jwt\",\n          clientId: \"nSYBFalV2b1MSg5b2raWqHl63tfH3KQa\",\n          verifier: \"torus-auth0-sms-passwordless\",\n        },\n        [WEBAUTHN]: {\n          name: \"WebAuthn\",\n          typeOfLogin: \"webauthn\",\n          clientId: \"webauthn\",\n          verifier: \"webauthn-lrc\",\n        },\n      },\n    };\n  },\n  computed: {\n    loginToConnectionMap() {\n      return {\n        [EMAIL_PASSWORD]: { domain: AUTH_DOMAIN },\n        [PASSWORDLESS]: { domain: AUTH_DOMAIN, login_hint: this.loginHint },\n        [HOSTED_EMAIL_PASSWORDLESS]: {\n          domain: AUTH_DOMAIN,\n          verifierIdField: \"name\",\n          connection: \"\",\n          isVerifierIdCaseSensitive: false,\n        },\n        [HOSTED_SMS_PASSWORDLESS]: {\n          domain: AUTH_DOMAIN,\n          verifierIdField: \"name\",\n          connection: \"\",\n        },\n        [APPLE]: { domain: AUTH_DOMAIN },\n        [GITHUB]: { domain: AUTH_DOMAIN },\n        [LINKEDIN]: { domain: AUTH_DOMAIN },\n        [TWITTER]: { domain: AUTH_DOMAIN },\n        [WEIBO]: { domain: AUTH_DOMAIN },\n        [LINE]: { domain: AUTH_DOMAIN },\n      };\n    },\n  },\n  methods: {\n    async login(hash, queryParameters) {\n      try {\n        if (!this.torusdirectsdk) return;\n        const jwtParams = this.loginToConnectionMap[this.selectedVerifier] || {};\n        const { typeOfLogin, clientId, verifier } = this.verifierMap[this.selectedVerifier];\n        const loginDetails = await this.torusdirectsdk.triggerLogin({\n          typeOfLogin,\n          verifier,\n          clientId,\n          jwtParams,\n          hash,\n          queryParameters,\n        });\n        this.console(loginDetails);\n      } catch (error) {\n        console.error(error, \"caught\");\n      }\n    },\n    console(text) {\n      document.querySelector(\"#console>p\").innerHTML = typeof text === \"object\" ? JSON.stringify(text) : text;\n    },\n    handleRedirectParameters(hash, queryParameters) {\n      const hashParameters = hash.split(\"&\").reduce((result, item) => {\n        const [part0, part1] = item.split(\"=\");\n        result[part0] = part1;\n        return result;\n      }, {});\n      console.log(hashParameters, queryParameters);\n      let instanceParameters = {};\n      let error = \"\";\n      if (!queryParameters.preopenInstanceId) {\n        if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n          instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n          error = hashParameters.error_description || hashParameters.error || error;\n        } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n          instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n          if (queryParameters.error) error = queryParameters.error;\n        }\n      }\n      return { error, instanceParameters, hashParameters };\n    },\n  },\n  async mounted() {\n    try {\n      var url = new URL(location.href);\n      const hash = url.hash.substr(1);\n      const queryParams = {};\n      for (let key of url.searchParams.keys()) {\n        queryParams[key] = url.searchParams.get(key);\n      }\n      const { error, instanceParameters } = this.handleRedirectParameters(hash, queryParams);\n      const torusdirectsdk = new TorusSdk({\n        baseUrl: `${location.origin}/serviceworker`,\n        enableLogging: true,\n        network: \"testnet\", // details for test net\n      });\n      await torusdirectsdk.init({ skipSw: false });\n      this.torusdirectsdk = torusdirectsdk;\n      if (hash) {\n        if (error) throw new Error(error);\n        const { verifier: returnedVerifier } = instanceParameters;\n        this.selectedVerifier = Object.keys(this.verifierMap).find((x) => this.verifierMap[x].verifier === returnedVerifier);\n        this.login(hash, queryParams);\n      }\n    } catch (error) {\n      console.error(error, \"mounted caught\");\n    }\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n#console {\n  border: 1px solid black;\n  height: 80px;\n  padding: 2px;\n  bottom: 10px;\n  position: absolute;\n  text-align: left;\n  width: calc(100% - 20px);\n  border-radius: 5px;\n}\n#console::before {\n  content: \"Console :\";\n  position: absolute;\n  top: -20px;\n  font-size: 12px;\n}\n#console > p {\n  margin: 0.5em;\n  word-wrap: break-word;\n}\n</style>\n",
    "archive/customauth/vue/main.js": "import Vue from \"vue\";\n\nimport App from \"./App.vue\";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  render: (h) => h(App),\n}).$mount(\"#app\");\n",
    "archive/customauth/web/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>CustomAuth Integration</title>\n  </head>\n  <body>\n    <div>\n      <p id=\"text\">Loading...</p>\n      <p id=\"error\"></p>\n      <p id=\"public-address\"></p>\n      <p id=\"private-key\"></p>\n      <button id=\"login\">Login</button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@toruslabs/customauth@6/dist/directWebSdk.umd.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.34/dist/web3.js\"></script>\n    <script>\n      (async function init() {\n        $(\"#login\").hide();\n\n        window.customauth = new DirectWebSdk.default({\n          baseUrl: `${location.origin}/auth`,\n          network: \"testnet\", // details for test net\n        });\n        window.customauth = customauth;\n\n        await window.customauth.init({ skipSw: false });\n\n        $(\"#text\").text(\"Didn't log in.\");\n        $(\"#login\").show();\n      })();\n\n      $(\"#login\").click(function (event) {\n        window.customauth\n          .triggerLogin({\n            typeOfLogin: \"google\",\n            clientId: \"221898609709-obfn3p63741l5333093430j3qeiinaa8.apps.googleusercontent.com\",\n            verifier: \"google-lrc\",\n          })\n          .then(function (res) {\n            const userInfo = res.userInfo;\n            $(\"#text\").text(\"Logged in as \" + userInfo.name + \".\");\n            $(\"#public-address\").text(\"Public address: \" + res.publicAddress + \".\");\n            $(\"#private-key\").text(\"Private key: \" + res.privateKey + \".\");\n            $(\"#error\").hide();\n            $(\"#login\").hide();\n          })\n          .catch(function (err) {\n            $(\"#error\").text(err.message);\n          });\n      });\n    </script>\n  </body>\n</html>\n",
    "archive/customauth/web/redirect.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n    <title>Redirect</title>\n    <style>\n      * {\n        box-sizing: border-box;\n      }\n\n      html,\n      body {\n        background: #fcfcfc;\n        height: 100%;\n        padding: 0;\n        margin: 0;\n      }\n\n      .container {\n        width: 100%;\n        height: 100%;\n\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n      }\n\n      h1.title {\n        font-size: 14px;\n        color: #0f1222;\n        font-family: \"Roboto\", sans-serif !important;\n        margin: 0;\n        text-align: center;\n      }\n\n      .spinner .beat {\n        background-color: #0364ff;\n        height: 12px;\n        width: 12px;\n        margin: 24px 2px 10px;\n        border-radius: 100%;\n        -webkit-animation: beatStretchDelay 0.7s infinite linear;\n        animation: beatStretchDelay 0.7s infinite linear;\n        -webkit-animation-fill-mode: both;\n        animation-fill-mode: both;\n        display: inline-block;\n      }\n\n      .spinner .beat-odd {\n        animation-delay: 0s;\n      }\n\n      .spinner .beat-even {\n        animation-delay: 0.35s;\n      }\n\n      @-webkit-keyframes beatStretchDelay {\n        50% {\n          -webkit-transform: scale(0.75);\n          transform: scale(0.75);\n          -webkit-opacity: 0.2;\n          opacity: 0.2;\n        }\n\n        100% {\n          -webkit-transform: scale(1);\n          transform: scale(1);\n          -webkit-opacity: 1;\n          opacity: 1;\n        }\n      }\n\n      @keyframes beatStretchDelay {\n        50% {\n          -webkit-transform: scale(0.75);\n          transform: scale(0.75);\n          -webkit-opacity: 0.2;\n          opacity: 0.2;\n        }\n\n        100% {\n          -webkit-transform: scale(1);\n          transform: scale(1);\n          -webkit-opacity: 1;\n          opacity: 1;\n        }\n      }\n\n      @media (min-width: 768px) {\n        h1.title {\n          font-size: 14px;\n        }\n        p.info {\n          font-size: 28px;\n        }\n\n        .spinner .beat {\n          height: 12px;\n          width: 12px;\n        }\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"message\" class=\"container\">\n      <div class=\"spinner content\" id=\"spinner\">\n        <div class=\"beat beat-odd\"></div>\n        <div class=\"beat beat-even\"></div>\n        <div class=\"beat beat-odd\"></div>\n      </div>\n      <h1 class=\"title content\" id=\"closeText\" style=\"display: none\">You can close this window now</h1>\n    </div>\n    <script\n      src=\"https://scripts.toruswallet.io/broadcastChannel_3_5_3.js\"\n      integrity=\"sha384-skU9kn0NAhJbaUxr/WTkc56HLM8U6akUpv4H4WmR+ZYh9+ChxbuN7GnALGNFSPzq\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script>\n      function storageAvailable(type) {\n        var storage;\n        try {\n          storage = window[type];\n          var x = \"__storage_test__\";\n          storage.setItem(x, x);\n          storage.removeItem(x);\n          return true;\n        } catch (e) {\n          return (\n            e &&\n            // everything except Firefox\n            (e.code === 22 ||\n              // Firefox\n              e.code === 1014 ||\n              // test name field too, because code might not be present\n              // everything except Firefox\n              e.name === \"QuotaExceededError\" ||\n              // Firefox\n              e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n            // acknowledge QuotaExceededError only if there's something already stored\n            storage &&\n            storage.length !== 0\n          );\n        }\n      }\n      function showCloseText() {\n        var closeText = document.getElementById(\"closeText\");\n        var spinner = document.getElementById(\"spinner\");\n        if (closeText) {\n          closeText.style.display = \"block\";\n        }\n        if (spinner) {\n          spinner.style.display = \"none\";\n        }\n      }\n      var isLocalStorageAvailable = storageAvailable(\"localStorage\");\n      var isSessionStorageAvailable = storageAvailable(\"sessionStorage\");\n      // set theme\n      let theme = \"light\";\n      if (isLocalStorageAvailable) {\n        var torusTheme = localStorage.getItem(\"torus-theme\");\n        if (torusTheme) {\n          theme = torusTheme.split(\"-\")[0];\n        }\n      }\n\n      if (theme === \"dark\") {\n        document.querySelector(\"body\").style.backgroundColor = \"#24252A\";\n      }\n      var bc;\n      var broadcastChannelOptions = {\n        // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node'\n        webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increase performance)\n      };\n      var instanceParams = {};\n      var preopenInstanceId = new URL(window.location.href).searchParams.get(\"preopenInstanceId\");\n      if (!preopenInstanceId) {\n        document.getElementById(\"message\").style.visibility = \"visible\";\n        // in general oauth redirect\n        try {\n          var url = new URL(location.href);\n          var hash = url.hash.substr(1);\n          var hashParams = {};\n          if (hash) {\n            hashParams = hash.split(\"&\").reduce(function (result, item) {\n              var parts = item.split(\"=\");\n              result[parts[0]] = parts[1];\n              return result;\n            }, {});\n          }\n          var queryParams = {};\n          for (var key of url.searchParams.keys()) {\n            queryParams[key] = url.searchParams.get(key);\n          }\n          var error = \"\";\n          try {\n            if (Object.keys(hashParams).length > 0 && hashParams.state) {\n              instanceParams = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(hashParams.state)))) || {};\n              if (hashParams.error) error = hashParams.error;\n            } else if (Object.keys(queryParams).length > 0 && queryParams.state) {\n              instanceParams = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(queryParams.state)))) || {};\n              if (queryParams.error) error = queryParams.error;\n            }\n          } catch (e) {\n            console.error(e);\n          }\n          if (instanceParams.redirectToOpener) {\n            // communicate to window.opener\n            window.opener.postMessage(\n              {\n                channel: \"redirect_channel_\" + instanceParams.instanceId,\n                data: {\n                  instanceParams: instanceParams,\n                  hashParams: hashParams,\n                  queryParams: queryParams,\n                },\n                error: error,\n              },\n              \"http://localhost:3000\"\n            );\n          } else {\n            // communicate via broadcast channel\n            bc = new broadcastChannelLib.BroadcastChannel(\"redirect_channel_\" + instanceParams.instanceId, broadcastChannelOptions);\n            bc.addEventListener(\"message\", function (ev) {\n              if (ev.success) {\n                bc.close();\n                console.log(\"posted\", {\n                  queryParams,\n                  instanceParams,\n                  hashParams,\n                });\n              } else {\n                window.close();\n                showCloseText();\n              }\n            });\n            bc.postMessage({\n              data: {\n                instanceParams: instanceParams,\n                hashParams: hashParams,\n                queryParams: queryParams,\n              },\n              error: error,\n            }).then(function () {\n              setTimeout(function () {\n                window.location.href = url.origin + location.search + location.hash;\n              }, 5000);\n            });\n          }\n        } catch (err) {\n          console.error(err, \"service worker error in redirect\");\n          bc && bc.close();\n          window.close();\n          showCloseText();\n        }\n      } else {\n        // in preopen, awaiting redirect\n        try {\n          bc = new broadcastChannelLib.BroadcastChannel(\"preopen_channel_\" + preopenInstanceId, broadcastChannelOptions);\n          bc.onmessage = function (ev) {\n            var { preopenInstanceId: oldId, payload, message } = ev.data;\n            if (oldId === preopenInstanceId && payload && payload.url) {\n              window.location.href = payload.url;\n            } else if (oldId === preopenInstanceId && message === \"setup_complete\") {\n              bc.postMessage({\n                data: {\n                  preopenInstanceId: preopenInstanceId,\n                  message: \"popup_loaded\",\n                },\n              });\n            }\n            if (ev.error && ev.error !== \"\") {\n              console.error(ev.error);\n              bc.close();\n            }\n          };\n        } catch (err) {\n          console.error(err, \"service worker error in preopen\");\n          bc && bc.close();\n          window.close();\n          showCloseText();\n        }\n      }\n    </script>\n  </body>\n</html>\n",
    "archive/customauth/web/solana/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>CustomAuth Integration</title>\n  </head>\n  <body>\n    <div>\n      <p id=\"text\">Loading...</p>\n      <p id=\"error\"></p>\n      <p id=\"public-address\"></p>\n      <p id=\"private-key\"></p>\n      <button id=\"login\">Login</button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@toruslabs/customauth@6\"></script>\n    <script src=\"https://unpkg.com/@solana/web3.js@0.92.0/lib/index.iife.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@toruslabs/openlogin-utils@0\"></script>\n    <script src=\"https://wzrd.in/standalone/bs58@4.0.1\"></script>\n    <script>\n      $(document).ready(async function () {\n        $(\"#login\").hide();\n\n        window.customauth = new DirectWebSdk.default({\n          baseUrl: `${location.origin}/serviceworker`,\n          network: \"testnet\", // details for test net\n        });\n        await window.customauth.init({ skipSw: false });\n\n        window.solana = new solanaWeb3.Connection(solanaWeb3.clusterApiUrl(\"testnet\"));\n\n        $(\"#text\").text(\"Didn't log in.\");\n        $(\"#login\").show();\n      });\n\n      $(\"#login\").click(function () {\n        window.customauth\n          .triggerLogin({\n            typeOfLogin: \"google\",\n            clientId: \"YOUR CLIENT ID\",\n            verifier: \"YOUR VERIFIER ID\",\n          })\n          .then(async function (res) {\n            const userInfo = res.userInfo;\n            $(\"#text\").text(\"Logged in as \" + userInfo.name + \".\");\n\n            const { sk } = OpenloginUtils.getED25519Key(res.privateKey);\n            const account = new solanaWeb3.Account(sk);\n\n            $(\"#public-address\").text(\"Public address: \" + account.publicKey + \".\");\n            $(\"#private-key\").text(\"Private key: \" + bs58.encode(account.secretKey) + \".\");\n            $(\"#error\").hide();\n            $(\"#login\").hide();\n          })\n          .catch(function (err) {\n            $(\"#error\").text(err.message);\n          });\n      });\n    </script>\n  </body>\n</html>\n",
    "archive/customauth/web/sw.js": "function getScope() {\n  return self.registration.scope;\n}\n\nself.addEventListener(\"message\", function (event) {\n  if (event.data && event.data.type === \"SKIP_WAITING\") {\n    self.skipWaiting();\n  }\n});\n\nself.addEventListener(\"fetch\", function (event) {\n  try {\n    const url = new URL(event.request.url);\n    if (url.pathname.includes(\"redirect\") && url.href.includes(getScope())) {\n      event.respondWith(\n        new Response(\n          new Blob(\n            [\n              `\n  <!DOCTYPE html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n      <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n      <title>Redirect</title>\n      <style>\n        * {\n          box-sizing: border-box;\n        }\n        html,\n        body {\n          background: #fcfcfc;\n          height: 100%;\n          padding: 0;\n          margin: 0;\n        }\n        .container {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          flex-direction: column;\n        }\n        h1.title {\n          font-size: 14px;\n          color: #0f1222;\n          font-family: \"Roboto\", sans-serif !important;\n          margin: 0;\n          text-align: center;\n        }\n        .spinner .beat {\n          background-color: #0364ff;\n          height: 12px;\n          width: 12px;\n          margin: 24px 2px 10px;\n          border-radius: 100%;\n          -webkit-animation: beatStretchDelay 0.7s infinite linear;\n          animation: beatStretchDelay 0.7s infinite linear;\n          -webkit-animation-fill-mode: both;\n          animation-fill-mode: both;\n          display: inline-block;\n        }\n        .spinner .beat-odd {\n          animation-delay: 0s;\n        }\n        .spinner .beat-even {\n          animation-delay: 0.35s;\n        }\n        @-webkit-keyframes beatStretchDelay {\n          50% {\n            -webkit-transform: scale(0.75);\n            transform: scale(0.75);\n            -webkit-opacity: 0.2;\n            opacity: 0.2;\n          }\n          100% {\n            -webkit-transform: scale(1);\n            transform: scale(1);\n            -webkit-opacity: 1;\n            opacity: 1;\n          }\n        }\n        @keyframes beatStretchDelay {\n          50% {\n            -webkit-transform: scale(0.75);\n            transform: scale(0.75);\n            -webkit-opacity: 0.2;\n            opacity: 0.2;\n          }\n          100% {\n            -webkit-transform: scale(1);\n            transform: scale(1);\n            -webkit-opacity: 1;\n            opacity: 1;\n          }\n        }\n        @media (min-width: 768px) {\n          h1.title {\n            font-size: 14px;\n          }\n          p.info {\n            font-size: 28px;\n          }\n          .spinner .beat {\n            height: 12px;\n            width: 12px;\n          }\n        }\n      </style>\n    </head>\n    <body>\n      <div id=\"message\" class=\"container\">\n        <div class=\"spinner content\" id=\"spinner\">\n          <div class=\"beat beat-odd\"></div>\n          <div class=\"beat beat-even\"></div>\n          <div class=\"beat beat-odd\"></div>\n        </div>\n        <h1 class=\"title content\" id=\"closeText\" style=\"display: none;\">You can close this window now</h1>\n      </div>\n      <script\n        src=\"https://scripts.toruswallet.io/broadcastChannel_3_5_3.js\"\n        integrity=\"sha384-skU9kn0NAhJbaUxr/WTkc56HLM8U6akUpv4H4WmR+ZYh9+ChxbuN7GnALGNFSPzq\"\n        crossorigin=\"anonymous\"\n      ></script>\n      <script>\n        function storageAvailable(type) {\n          var storage;\n          try {\n            storage = window[type];\n            var x = \"__storage_test__\";\n            storage.setItem(x, x);\n            storage.removeItem(x);\n            return true;\n          } catch (e) {\n            return (\n              e &&\n              // everything except Firefox\n              (e.code === 22 ||\n                // Firefox\n                e.code === 1014 ||\n                // test name field too, because code might not be present\n                // everything except Firefox\n                e.name === \"QuotaExceededError\" ||\n                // Firefox\n                e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n              // acknowledge QuotaExceededError only if there's something already stored\n              storage &&\n              storage.length !== 0\n            );\n          }\n        }\n        function showCloseText() {\n          var closeText = document.getElementById(\"closeText\");\n          var spinner = document.getElementById(\"spinner\");\n          if (closeText) {\n            closeText.style.display = \"block\";\n          }\n          if (spinner) {\n            spinner.style.display = \"none\";\n          }\n        }\n        var isLocalStorageAvailable = storageAvailable(\"localStorage\");\n        var isSessionStorageAvailable = storageAvailable(\"sessionStorage\");\n        // set theme\n        let theme = \"light\";\n        if (isLocalStorageAvailable) {\n          var torusTheme = localStorage.getItem(\"torus-theme\");\n          if (torusTheme) {\n            theme = torusTheme.split(\"-\")[0];\n          }\n        }\n        if (theme === \"dark\") {\n          document.querySelector(\"body\").style.backgroundColor = \"#24252A\";\n        }\n        var bc;\n        var broadcastChannelOptions = {\n          // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node'\n          webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increase performance)\n        };\n        var instanceParams = {};\n        var preopenInstanceId = new URL(window.location.href).searchParams.get(\"preopenInstanceId\");\n        if (!preopenInstanceId) {\n          document.getElementById(\"message\").style.visibility = \"visible\";\n          // in general oauth redirect\n          try {\n            var url = new URL(location.href);\n            var hash = url.hash.substr(1);\n            var hashParams = {};\n            if (hash) {\n              hashParams = hash.split(\"&\").reduce(function (result, item) {\n                var parts = item.split(\"=\");\n                result[parts[0]] = parts[1];\n                return result;\n              }, {});\n            }\n            var queryParams = {};\n            for (var key of url.searchParams.keys()) {\n              queryParams[key] = url.searchParams.get(key);\n            }\n            var error = \"\";\n            try {\n              if (Object.keys(hashParams).length > 0 && hashParams.state) {\n                instanceParams = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(hashParams.state)))) || {};\n                if (hashParams.error) error = hashParams.error;\n              } else if (Object.keys(queryParams).length > 0 && queryParams.state) {\n                instanceParams = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(queryParams.state)))) || {};\n                if (queryParams.error) error = queryParams.error;\n              }\n            } catch (e) {\n              console.error(e);\n            }\n            if (instanceParams.redirectToOpener) {\n              // communicate to window.opener\n              window.opener.postMessage(\n                {\n                  channel: \"redirect_channel_\" + instanceParams.instanceId,\n                  data: {\n                    instanceParams: instanceParams,\n                    hashParams: hashParams,\n                    queryParams: queryParams,\n                  },\n                  error: error,\n                },\n                \"http://localhost:3000\"\n              );\n            } else {\n              // communicate via broadcast channel\n              bc = new broadcastChannelLib.BroadcastChannel(\"redirect_channel_\" + instanceParams.instanceId, broadcastChannelOptions);\n              bc.addEventListener(\"message\", function (ev) {\n                if (ev.success) {\n                  bc.close();\n                  console.log(\"posted\", {\n                    queryParams,\n                    instanceParams,\n                    hashParams,\n                  });\n                } else {\n                  window.close();\n                  showCloseText();\n                }\n              });\n              bc.postMessage({\n                data: {\n                  instanceParams: instanceParams,\n                  hashParams: hashParams,\n                  queryParams: queryParams,\n                },\n                error: error,\n              }).then(function () {\n                setTimeout(function () {\n                  window.location.href = url.origin + location.search + location.hash;\n                }, 5000);\n              });\n            }\n          } catch (err) {\n            console.error(err, \"service worker error in redirect\");\n            bc && bc.close();\n            window.close();\n            showCloseText();\n          }\n        } else {\n          // in preopen, awaiting redirect\n          try {\n            bc = new broadcastChannelLib.BroadcastChannel(\"preopen_channel_\" + preopenInstanceId, broadcastChannelOptions);\n            bc.onmessage = function (ev) {\n              var { preopenInstanceId: oldId, payload, message } = ev.data;\n              if (oldId === preopenInstanceId && payload && payload.url) {\n                window.location.href = payload.url;\n              } else if (oldId === preopenInstanceId && message === \"setup_complete\") {\n                bc.postMessage({\n                  data: {\n                    preopenInstanceId: preopenInstanceId,\n                    message: \"popup_loaded\",\n                  },\n                });\n              }\n              if (ev.error && ev.error !== \"\") {\n                console.error(ev.error);\n                bc.close();\n              }\n            };\n          } catch (err) {\n            console.error(err, \"service worker error in preopen\");\n            bc && bc.close();\n            window.close();\n            showCloseText();\n          }\n        }\n      </script>\n    </body>\n  </html>\n\n  ${\"\"}\n    `,\n            ],\n            { type: \"text/html\" }\n          )\n        )\n      );\n    }\n  } catch (error) {\n    console.error(error);\n  }\n});\n",
    "archive/open-login/android/AndroidManifest.xml": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.openlogin.app\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.Openlogin\">\n\n        <activity\n            android:launchMode=\"singleTop\"\n            android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n            <intent-filter>\n                <action android:name=\"android.intent.action.VIEW\" />\n\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n\n                <!-- Accept URIs: http://localhost[:*]/app-links/* -->\n                <data\n                    android:host=\"localhost\"\n                    android:pathPrefix=\"/app-links\"\n                    android:scheme=\"http\" />\n            </intent-filter>\n            <intent-filter>\n                <action android:name=\"android.intent.action.VIEW\" />\n\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n\n                <!-- Accept URIs: openlogin://* -->\n                <data android:scheme=\"openlogin\" />\n            </intent-filter>\n        </activity>\n\n    </application>\n\n</manifest>\n",
    "archive/open-login/android/build.gradle": "plugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n}\n\nandroid {\n    compileSdkVersion 30\n    buildToolsVersion \"30.0.3\"\n\n    defaultConfig {\n        applicationId \"com.openlogin.app\"\n        minSdkVersion 21\n        targetSdkVersion 30\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = '1.8'\n    }\n}\n\ndependencies {\n    // Default\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n    implementation 'androidx.core:core-ktx:1.3.2'\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n    implementation 'com.google.android.material:material:1.3.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n\n    // Encoding\n    implementation 'com.google.code.gson:gson:2.8.6'\n\n    // OpenLogin\n    implementation 'org.torusresearch:openlogin-android-sdk:-SNAPSHOT'\n\n    // Test\n    testImplementation 'junit:junit:4.+'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n}\n",
    "archive/open-login/android/MainActivity.kt": "package com.openlogin.app\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport com.openlogin.core.AuthStateChangeListener\nimport com.openlogin.core.OpenLogin\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var openlogin: OpenLogin\n\n    private fun signIn() {\n        openlogin.login(OpenLogin.Provider.GOOGLE)\n    }\n\n    private fun signOut() {\n        openlogin.logout()\n    }\n\n    private fun reRender() {\n        val contentTextView = findViewById<TextView>(R.id.contentTextView)\n        val signInButton = findViewById<Button>(R.id.signInButton)\n        val signOutButton = findViewById<Button>(R.id.signOutButton)\n\n        val key = openlogin.state.privKey\n        if (key is String && key.isNotEmpty()) {\n            contentTextView.text = key\n            contentTextView.visibility = View.VISIBLE\n            signInButton.visibility = View.GONE\n            signOutButton.visibility = View.VISIBLE\n        } else {\n            contentTextView.text = getString(R.string.not_logged_in)\n            contentTextView.visibility = View.GONE\n            signInButton.visibility = View.VISIBLE\n            signOutButton.visibility = View.GONE\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Configure OpenLogin\n        openlogin = OpenLogin(\n            this,\n            clientId = getString(R.string.openlogin_project_id),\n            network = OpenLogin.Network.MAINNET,\n            redirectUrl = Uri.parse(\"http://localhost/app-links/auth\"),\n        )\n        openlogin.setResultUrl(intent.data)\n        openlogin.addAuthStateChangeListener(AuthStateChangeListener {\n            reRender()\n        })\n\n        // Setup UI and event handlers\n        val signInButton = findViewById<Button>(R.id.signInButton)\n        signInButton.setOnClickListener { signIn() }\n\n        val signOutButton = findViewById<Button>(R.id.signOutButton)\n        signOutButton.setOnClickListener { signOut() }\n    }\n\n    override fun onNewIntent(intent: Intent?) {\n        super.onNewIntent(intent)\n        openlogin.setResultUrl(intent?.data)\n    }\n}\n",
    "archive/open-login/arbitrum/accountInfo.js": "import React, { useEffect, useState } from \"react\";\nimport { PageHeader, Button } from \"antd\";\nimport \"./style.scss\";\nimport { useArbTokenBridge } from \"token-bridge-sdk\";\nimport { utils } from \"ethers\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction AccountInfo({ handleLogout, privKey, bridgeDetails }) {\n  const bridge = useArbTokenBridge(bridgeDetails, false);\n\n  const { walletAddress, balances } = bridge;\n  console.log(\"bridge\", bridge);\n\n  useEffect(() => {\n    window.setTimeout(async () => {\n      await balances.update();\n    }, 3000);\n  }, []);\n\n  async function depositEthToArbitrum() {\n    try {\n      toast.info(\"deposit request initiated. waiting for confirmation\");\n      const receipt = await bridge.eth.deposit(\"0.01\");\n      console.log(\"reciept\", receipt);\n      toast.success(\"Eth depostited to arbitrum bridge wallet\");\n      refreshBalances();\n    } catch (error) {\n      console.log(\"error\", error.reason);\n      toast.error(\"Error while depositing eth to arbitrum:\" + error.reason);\n    }\n  }\n\n  async function withdrawEthToArbitrum() {\n    try {\n      toast.info(\"Withdrawal request initiated, waiting for confirmation\");\n      const receipt = await bridge.eth.withdraw(\"0.01\");\n      console.log(\"reciept\", receipt);\n      toast.success(\"Eth withdrawn request sent from arbitrum bridge wallet\");\n      refreshBalances();\n    } catch (error) {\n      console.log(\"error\", error);\n      alert(\"Error while withdrawing eth from arbitrum:\" + error.reason);\n    }\n  }\n\n  async function refreshBalances() {\n    await balances.update();\n    toast.success(\"Balance refreshed successfully\");\n  }\n\n  return (\n    <div>\n      <ToastContainer />\n      <PageHeader\n        className=\"site-page-header\"\n        title=\"Openlogin x Arbitrum\"\n        extra={[\n          <Button key=\"1\" type=\"primary\" onClick={handleLogout}>\n            Logout\n          </Button>,\n        ]}\n      />\n      <div className=\"container\">\n        <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", margin: 20 }}>\n          <div style={{ margin: 20 }}>\n            Wallet address: <i>{walletAddress}</i>\n          </div>\n          <div style={{ margin: 20 }}>\n            Eth chain Balance: <i>{utils.formatEther(balances.eth.balance) || 0}</i>\n          </div>\n          <div style={{ margin: 20 }}>\n            Arb chain Balance: <i>{utils.formatEther(balances.eth.arbChainBalance) || 0}</i>\n          </div>\n          <hr />\n          <span>Private key:</span>\n          <div style={{ margin: 20, maxWidth: 900, wordWrap: \"break-word\" }}>\n            <span style={{ margin: 20 }}>{privKey}</span>\n          </div>\n        </div>\n        <div>\n          <button onClick={depositEthToArbitrum}>Deposit eth to arbitrum chain</button>\n\n          <button onClick={withdrawEthToArbitrum}>Withdraw eth from arbitrum</button>\n\n          <button onClick={refreshBalances}>Refresh balances</button>\n        </div>\n      </div>\n      Withdrawals from l2(arbitrum) to l1(ethereum) takes 24 hours roughly on kovan4 testnet.\n    </div>\n  );\n}\n\nexport default AccountInfo;\n",
    "archive/open-login/arbitrum/login.js": "import React, { useEffect, useState } from \"react\";\nimport OpenLogin from \"openlogin\";\nimport AccountInfo from \"../../components/AccountInfo\";\nimport { Bridge } from \"arb-ts\";\nimport * as ethers from \"ethers\";\n\nimport \"./style.scss\";\n\nconst kovan4_testnet_config = {\n  ethRPC: \"https://kovan.infura.io/v3/65982ef7e3f24b3586823483ebdc99e0\",\n  arbRPC: \"https://kovan4.arbitrum.io/rpc\",\n  erc20BridgeAddress: \"0x2948ac43e4AfF448f6af0F7a11F18Bb6062dd271\",\n  arbTokenBridgeAddress: \"0x64b92d4f02cE1b4BDE2D16B6eAEe521E27f28e07\",\n};\n\nconst ethProvider = ethers.providers.getDefaultProvider(kovan4_testnet_config.ethRPC);\nconst arbProvider = new ethers.providers.JsonRpcProvider(kovan4_testnet_config.arbRPC);\n\nfunction Login() {\n  const [loading, setLoading] = useState(false);\n  const [openlogin, setSdk] = useState(undefined);\n  const [bridgeInstance, setArbitrumBridge] = useState(null);\n  useEffect(() => {\n    setLoading(true);\n    async function initializeOpenlogin() {\n      const sdkInstance = new OpenLogin({\n        clientId: \"YOUR_PROJECT_ID\", // your project id\n        network: \"testnet\",\n      });\n      await sdkInstance.init();\n      if (sdkInstance.privKey) {\n        const privateKey = sdkInstance.privKey;\n        createArbitrumBridge(privateKey);\n      }\n      setSdk(sdkInstance);\n      setLoading(false);\n    }\n    initializeOpenlogin();\n  }, []);\n\n  async function handleLogin() {\n    setLoading(true);\n    try {\n      const privKey = await openlogin.login({\n        loginProvider: \"google\",\n        redirectUrl: `${window.origin}`,\n      });\n      setLoading(false);\n    } catch (error) {\n      console.log(\"error\", error);\n      setLoading(false);\n    }\n  }\n\n  async function createArbitrumBridge(privateKey) {\n    const ethSigner = new ethers.Wallet(privateKey, ethProvider);\n    const arbSigner = new ethers.Wallet(privateKey, arbProvider);\n    const bridgeInstance = new Bridge(kovan4_testnet_config.erc20BridgeAddress, kovan4_testnet_config.arbTokenBridgeAddress, ethSigner, arbSigner);\n    setArbitrumBridge(bridgeInstance);\n  }\n\n  const handleLogout = async () => {\n    setLoading(true);\n    await openlogin.logout();\n    setLoading(false);\n  };\n  return (\n    <>\n      {loading ? (\n        <div>\n          <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", margin: 20 }}>\n            <h1>....loading</h1>\n          </div>\n        </div>\n      ) : (\n        <div>\n          {openlogin && openlogin.privKey ? (\n            <AccountInfo bridgeDetails={bridgeInstance} handleLogout={handleLogout} loading={loading} privKey={openlogin?.privKey} />\n          ) : (\n            <div className=\"loginContainer\">\n              <h1 style={{ textAlign: \"center\" }}>Openlogin x Arbitrum</h1>\n              <div onClick={handleLogin} className=\"btn\">\n                Login\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Login;\n",
    "archive/open-login/avalanche/login.js": "import React, { useEffect, useState } from \"react\";\nimport OpenLogin from \"@toruslabs/openlogin\";\nimport { Avalanche } from \"avalanche\";\nimport AccountInfo from \"../../components/AccountInfo\";\nimport \"./style.scss\";\n\nconst myNetworkID = 5;\nconst avalanche = new Avalanche(\"api.avax-test.network\", 443, \"https\", myNetworkID);\n\nfunction Login() {\n  const [loading, setLoading] = useState(false);\n  const [openlogin, setSdk] = useState(undefined);\n  const [walletInfo, setUserAccountInfo] = useState(null);\n\n  useEffect(() => {\n    async function initializeOpenlogin() {\n      const sdkInstance = new OpenLogin({\n        clientId: \"YOUR PROJECT ID\",\n        network: \"testnet\",\n      });\n      await sdkInstance.init();\n      if (sdkInstance.privKey) {\n        await importUserAccount(sdkInstance.privKey);\n      }\n      setSdk(sdkInstance);\n      setLoading(false);\n    }\n    setLoading(true);\n    initializeOpenlogin();\n  }, []);\n\n  async function importUserAccount(privateKey) {\n    const xchain = avalanche.XChain(); //returns a reference to the X-Chain used by AvalancheJS\n    const myKeychain = xchain.keyChain();\n    const importedAccount = myKeychain.importKey(Buffer.from(privateKey, \"hex\")); // returns an instance of the KeyPair class\n    let address = importedAccount.getAddressString();\n    const myAddresses = xchain.keyChain().getAddressStrings();\n    const u = await xchain.getUTXOs(myAddresses);\n    const utxos = u.utxos;\n    const assetid = \"8pfG5CTyL5KBVaKrEnCvNJR95dUWAKc1hrffcVxfgi8qGhqjm\"; // random cb58 string\n    const mybalance = utxos.getBalance(myAddresses, assetid);\n    console.log(mybalance, address);\n    setUserAccountInfo({ balance: mybalance.toNumber(), address });\n  }\n\n  async function handleLogin() {\n    setLoading(true);\n    try {\n      const privKey = await openlogin.login({\n        loginProvider: \"google\",\n        redirectUrl: `${window.origin}`,\n      });\n      await importUserAccount(privKey);\n      setLoading(false);\n    } catch (error) {\n      console.log(\"error\", error);\n      setLoading(false);\n    }\n  }\n\n  const handleLogout = async () => {\n    setLoading(true);\n    await openlogin.logout();\n    setLoading(false);\n  };\n  return (\n    <>\n      {loading ? (\n        <div>\n          <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", margin: 20 }}>\n            <h1>....loading</h1>\n          </div>\n        </div>\n      ) : (\n        <div>\n          {openlogin && openlogin.privKey ? (\n            <AccountInfo handleLogout={handleLogout} loading={loading} privKey={openlogin?.privKey} walletInfo={walletInfo} />\n          ) : (\n            <div className=\"loginContainer\">\n              <h1 style={{ textAlign: \"center\" }}>Openlogin x Avalanche</h1>\n              <div onClick={handleLogin} className=\"btn\">\n                Login\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Login;\n",
    "archive/open-login/binance/login.js": "import React, { useEffect, useState } from \"react\";\nimport OpenLogin from \"@toruslabs/openlogin\";\nimport Web3 from \"web3\";\nimport AccountInfo from \"../../components/AccountInfo\";\nimport \"./style.scss\";\nconst web3 = new Web3(\"https://data-seed-prebsc-1-s1.binance.org:8545/\");\n\nfunction Login() {\n  const [loading, setLoading] = useState(false);\n  const [openlogin, setSdk] = useState(undefined);\n  const [walletInfo, setUserAccountInfo] = useState(null);\n\n  useEffect(() => {\n    async function initializeOpenlogin() {\n      const sdkInstance = new OpenLogin({\n        clientId: \"YOUR PROJECT ID\",\n        network: \"testnet\",\n      });\n      await sdkInstance.init();\n      if (sdkInstance.privKey) {\n        await importUserAccount(sdkInstance.privKey);\n      }\n      setSdk(sdkInstance);\n      setLoading(false);\n    }\n    setLoading(true);\n    initializeOpenlogin();\n  }, []);\n\n  async function importUserAccount(privateKey) {\n    const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n    let balance = await web3.eth.getBalance(account.address);\n    let address = account.address;\n    setUserAccountInfo({ balance, address });\n  }\n\n  async function handleLogin() {\n    setLoading(true);\n    try {\n      const privKey = await openlogin.login({\n        loginProvider: \"google\",\n        redirectUrl: `${window.origin}`,\n      });\n      await importUserAccount(privKey);\n      setLoading(false);\n    } catch (error) {\n      console.log(\"error\", error);\n      setLoading(false);\n    }\n  }\n\n  const handleLogout = async () => {\n    setLoading(true);\n    await openlogin.logout();\n    setLoading(false);\n  };\n  return (\n    <>\n      {loading ? (\n        <div>\n          <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", margin: 20 }}>\n            <h1>....loading</h1>\n          </div>\n        </div>\n      ) : (\n        <div>\n          {openlogin && openlogin.privKey ? (\n            <AccountInfo handleLogout={handleLogout} loading={loading} privKey={openlogin?.privKey} walletInfo={walletInfo} />\n          ) : (\n            <div className=\"loginContainer\">\n              <h1 style={{ textAlign: \"center\" }}>Openlogin x Binance Smart Chain</h1>\n              <div onClick={handleLogin} className=\"btn\">\n                Login\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Login;\n",
    "archive/open-login/ios/ContentView.swift": "import SwiftUI\nimport OpenLogin\n\nstruct ContentView: View {\n    var body: some View {\n        Button(\n            action: {\n                OpenLogin\n                    .webAuth()\n                    .start {\n                        switch $0 {\n                        case .success(let result):\n                            print(\"\"\"\n                                Signed in successfully!\n                                    Private key: \\(result.privKey)\n                                    User info:\n                                        Name: \\(result.userInfo.name)\n                                        Profile image: \\(result.userInfo.profileImage ?? \"N/A\")\n                                        Type of login: \\(result.userInfo.typeOfLogin)\n                                \"\"\")\n                        case .failure(let error):\n                            print(\"Error: \\(error)\")\n                        }\n                    }\n            },\n            label: {\n                Text(\"Sign In\")\n                    .padding()\n            }\n        )\n        Button(\n            action: {\n                OpenLogin\n                    .webAuth()\n                    .signOut()\n                print(\"signed out.\")\n            },\n            label: {\n                Text(\"Sign Out\")\n                    .padding()\n            }\n        )\n\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n",
    "archive/open-login/ios/MainApp.swift": "import SwiftUI\nimport OpenLogin\n\n@main\nstruct MainApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView().onOpenURL { url in\n                OpenLogin.resumeAuth(url)\n            }\n        }\n    }\n}\n",
    "archive/open-login/ios/OpenLogin.plist": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>ClientId</key>\n\t<string>BC01p_js5KUIjvqYYAzWlDKt6ft--5joV0TbZEKO7YbDTqnmU5v0sq_4wgkyh0QAfZZAi-v6nKD4kcxkAqPuj8U</string>\n\t<key>Network</key>\n\t<string>mainnet</string>\n</dict>\n</plist>\n",
    "archive/open-login/polygon/login.js": "import React, { useEffect, useState, useCallback } from \"react\";\nimport OpenLogin from \"@toruslabs/openlogin\";\nimport Web3 from \"web3\";\nimport Matic from \"@maticnetwork/maticjs\";\nimport Network from \"@maticnetwork/meta/network\";\nimport AccountInfo from \"../../components/AccountInfo\";\nimport \"./style.scss\";\n\nconst maticClient = {\n  _matic: null,\n  _network: null,\n  connect: async (_network, _version) => {\n    const network = new Network(_network, _version);\n    console.log(network.Main.RPC, network.Matic.RPC);\n    const matic = new Matic({\n      network: _network,\n      version: _version,\n      parentProvider: new Web3.providers.HttpProvider(\"https://mainnet.infura.io/v3/73d0b3b9a4b2499da81c71a2b2a473a9\"),\n      maticProvider: new Web3.providers.HttpProvider(network.Matic.RPC),\n    });\n    await matic.initialize();\n    maticClient._matic = matic;\n    maticClient._network = network;\n    return { matic, network };\n  },\n  getClient: async (_network, _version) => {\n    if (maticClient._matic && maticClient._network) {\n      return { matic: maticClient._matic, network: maticClient._network };\n    }\n    return await maticClient.connect(_network, _version);\n  },\n};\n\nfunction Login() {\n  const [loading, setLoading] = useState(false);\n  const [openlogin, setSdk] = useState(undefined);\n  const [walletInfo, setUserAccountInfo] = useState(null);\n\n  const getMaticAccountDetails = useCallback(async (privateKey) => {\n    const { matic, network } = await maticClient.getClient(\"mainnet\", \"v1\");\n\n    const tokenAddress = network.Matic.Contracts.Tokens.MaticToken;\n    matic.setWallet(privateKey);\n\n    const account = matic.web3Client.web3.eth.accounts.privateKeyToAccount(privateKey);\n    let address = account.address;\n\n    const balance = await matic.balanceOfERC20(\n      address, //User address\n      tokenAddress, // Token address\n      {\n        parent: false,\n      }\n    );\n    setUserAccountInfo({ balance, address });\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    async function initializeOpenlogin() {\n      const sdkInstance = new OpenLogin({\n        clientId: \"YOUR_PROJECT_ID\",\n        network: \"testnet\",\n      });\n      await sdkInstance.init();\n      if (sdkInstance.privKey) {\n        await getMaticAccountDetails(sdkInstance.privKey);\n      }\n      setSdk(sdkInstance);\n      setLoading(false);\n    }\n    initializeOpenlogin();\n  }, [getMaticAccountDetails]);\n\n  async function handleLogin() {\n    setLoading(true);\n    try {\n      const privKey = await openlogin.login({\n        loginProvider: \"google\",\n        redirectUrl: `${window.origin}`,\n      });\n      await getMaticAccountDetails(privKey);\n      setLoading(false);\n    } catch (error) {\n      console.log(\"error\", error);\n      setLoading(false);\n    }\n  }\n\n  const handleLogout = async () => {\n    setLoading(true);\n    await openlogin.logout();\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading ? (\n        <div>\n          <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", margin: 20 }}>\n            <h1>....loading</h1>\n          </div>\n        </div>\n      ) : (\n        <div>\n          {openlogin && openlogin.privKey ? (\n            <AccountInfo handleLogout={handleLogout} loading={loading} privKey={openlogin?.privKey} walletInfo={walletInfo} />\n          ) : (\n            <div className=\"loginContainer\">\n              <h1 style={{ textAlign: \"center\" }}>Openlogin x Polygon</h1>\n              <div onClick={handleLogin} className=\"btn\">\n                Login\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Login;\n",
    "archive/open-login/react/App.js": "import { useState } from \"react\";\nimport Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\nimport wordmark from \"./wordmark.svg\";\nimport \"./App.css\";\n\n/**\n * This is an example source file that you can reference in Integration Builder\n */\n\n/**\n * You can set a step to point to a source file by using `pointer` property when creating steps.\n */\n\nfunction App() {\n  const [account, setAccount] = useState();\n\n  const onClickLogin = async (e) => {\n    e.preventDefault();\n\n    const torus = new Torus({});\n    await torus.init({\n      enableLogging: false,\n    });\n    await torus.login();\n\n    const web3 = new Web3(torus.provider);\n    const address = (await web3.eth.getAccounts())[0];\n    const balance = await web3.eth.getBalance(address);\n    setAccount({ address, balance });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={wordmark} className=\"App-logo\" alt=\"logo\" />\n        {account ? (\n          <div className=\"App-info\">\n            <p>\n              <strong>Address</strong>: {account.address}\n            </p>\n            <p>\n              <strong>Balance</strong>: {account.balance}\n            </p>\n          </div>\n        ) : (\n          <>\n            <p>You didn't login yet. Login to see your account details.</p>\n            <button className=\"App-link\" onClick={onClickLogin}>\n              Login\n            </button>\n          </>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",
    "archive/open-login/react/index.js": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n/**\n * This is an example source file that you can reference in Integration Builder\n */\n\n/**\n * You can set a step to point to a source file by using `pointer` property when creating steps.\n */\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",
    "archive/open-login/solana/login.js": "import React, { useEffect, useState } from \"react\";\nimport OpenLogin from \"@toruslabs/openlogin\";\nimport AccountInfo from \"../../components/AccountInfo\";\nimport { Account, Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getED25519Key } from \"@toruslabs/openlogin-ed25519\";\nimport * as bs58 from \"bs58\";\n\nimport \"./style.scss\";\n\nconst networks = {\n  mainnet: { url: \"https://solana-api.projectserum.com\", displayName: \"Mainnet Beta\" },\n  devnet: { url: clusterApiUrl(\"devnet\"), displayName: \"Devnet\" },\n  testnet: { url: clusterApiUrl(\"testnet\"), displayName: \"Testnet\" },\n};\n\nconst solanaNetwork = networks.devnet;\nconst connection = new Connection(solanaNetwork.url);\n\nfunction Login() {\n  const [loading, setLoading] = useState(false);\n  const [openlogin, setSdk] = useState(undefined);\n  const [account, setUserAccount] = useState(null);\n  const [walletInfo, setUserAccountInfo] = useState(null);\n  const [solanaPrivateKey, setPrivateKey] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    async function initializeOpenlogin() {\n      const sdkInstance = new OpenLogin({\n        clientId: \"YOUR_PROJECT_ID\", // your project id\n        network: \"testnet\",\n      });\n      await sdkInstance.init();\n      if (sdkInstance.privKey) {\n        const privateKey = sdkInstance.privKey;\n        const secretKey = getSolanaPrivateKey(privateKey);\n        await getAccountInfo(secretKey);\n      }\n      setSdk(sdkInstance);\n      setLoading(false);\n    }\n    initializeOpenlogin();\n  }, []);\n\n  const getSolanaPrivateKey = (openloginKey) => {\n    const { sk } = getED25519Key(openloginKey);\n    return sk;\n  };\n\n  const getAccountInfo = async (secretKey) => {\n    const account = new Account(secretKey);\n    const accountInfo = await connection.getAccountInfo(account.publicKey);\n    setPrivateKey(bs58.encode(account.secretKey));\n    setUserAccount(account);\n    setUserAccountInfo(accountInfo);\n    return accountInfo;\n  };\n\n  async function handleLogin() {\n    setLoading(true);\n    try {\n      const privKey = await openlogin.login({\n        loginProvider: \"google\",\n        redirectUrl: `${window.origin}`,\n      });\n      const solanaPrivateKey = getSolanaPrivateKey(privKey);\n      await getAccountInfo(solanaNetwork.url, solanaPrivateKey);\n      setLoading(false);\n    } catch (error) {\n      console.log(\"error\", error);\n      setLoading(false);\n    }\n  }\n\n  const handleLogout = async () => {\n    setLoading(true);\n    await openlogin.logout();\n    setLoading(false);\n  };\n  return (\n    <>\n      {loading ? (\n        <div>\n          <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", margin: 20 }}>\n            <h1>....loading</h1>\n          </div>\n        </div>\n      ) : (\n        <div>\n          {openlogin && openlogin.privKey ? (\n            <AccountInfo handleLogout={handleLogout} loading={loading} privKey={solanaPrivateKey} walletInfo={walletInfo} account={account} />\n          ) : (\n            <div className=\"loginContainer\">\n              <h1 style={{ textAlign: \"center\" }}>Openlogin x Solana</h1>\n              <div onClick={handleLogin} className=\"btn\">\n                Login\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Login;\n",
    "archive/open-login/vue/App.vue": "<template>\n  <div id=\"app\">\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\n    <Home title=\"Torus Embed + Vue.js\" />\n  </div>\n</template>\n\n<script>\n/*\n * This is an example source file that you can reference in Integration Builder\n */\n\n/**\n * You can set a step to point to a source file by using `pointer` property when creating steps.\n */\n\nimport Home from \"./components/Home.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    Home,\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n",
    "archive/open-login/vue/components/Home.vue": "<template>\n  <div>\n    <h1>{{ title }}</h1>\n    <p v-if=\"!account\">\n      You didn't logged in.\n      <button @click=\"login\">Login</button>\n    </p>\n    <div class=\"info-container\" v-if=\"account\">\n      <h3>Your account information</h3>\n      <div class=\"info\">\n        <p><strong>Address</strong>: {{ account.address }}</p>\n        <p><strong>Balance</strong>: {{ account.balance }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\nexport default {\n  name: \"Home\",\n  data: function () {\n    return {\n      account: null,\n    };\n  },\n  props: {\n    title: String,\n  },\n  methods: {\n    async login() {\n      const torus = new Torus();\n      await torus.init();\n      await torus.login({ enableLogging: false });\n      const web3 = new Web3(torus.provider);\n      const address = (await web3.eth.getAccounts())[0];\n      const balance = await web3.eth.getBalance(address);\n      this.account = {\n        address,\n        balance,\n      };\n    },\n  },\n};\n</script>\n\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n.info-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.info {\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: flex-start;\n  margin-top: 20px;\n}\n.info p {\n  margin-bottom: 4px;\n  margin-top: 0;\n}\n</style>\n",
    "archive/open-login/vue/main.js": "import Vue from \"vue\";\nimport App from \"./App.vue\";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  render: (h) => h(App),\n}).$mount(\"#app\");\n",
    "archive/open-login/web/index.html": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Ethereum Web3Auth Getting Started</title>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n\n  <body>\n    <div class=\"container\">\n      <h1 class=\"title\"><a target=\"_blank\" href=\"http://web3auth.io/\">Web3Auth</a> ETH & JS Integration Example</h1>\n      <!-- Logged In -->\n      <div class=\"grid btn-logged-in\">\n        <button id=\"get-user-info\" class=\"btn\">Get User Info</button>\n        <button id=\"get-accounts\" class=\"btn\">Get Accounts</button>\n        <button id=\"get-balance\" class=\"btn\">Get Balance</button>\n        <button id=\"sign-message\" class=\"btn\">Sign Message</button>\n        <button id=\"sign-tx\" class=\"btn\">Sign Transaction</button>\n        <button id=\"send-tx\" class=\"btn\">Send Transaction</button>\n\n        <button id=\"logout\" class=\"btn\">Logout</button>\n\n        <div class=\"console\" id=\"console\">\n          <p id=\"code\" class=\"code\"></p>\n        </div>\n      </div>\n\n      <!-- Logged Logout -->\n      <div class=\"grid btn-logged-out\">\n        <button id=\"login\" class=\"btn\">Login</button>\n      </div>\n      <footer class=\"footer\">\n        <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source code\n          <img class=\"logo\" src=\"/github-logo.png\" />\n        </a>\n      </footer>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/gh/ethereum/web3.js@1/dist/web3.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@web3auth/web3auth@0/dist/web3auth.umd.min.js\"></script>\n    <script>\n      const web3authSdk = window.Web3auth;\n      let web3AuthInstance = null;\n\n      (async function init() {\n        $(\".btn-logged-in\").hide();\n        $(\"#sign-tx\").hide();\n\n        web3AuthInstance = new web3authSdk.Web3Auth(\n          // REPLACE-web3authConstructor-\n        );\n\n        subscribeAuthEvents(web3AuthInstance);\n\n        await web3AuthInstance.initModal();\n        console.log(\"web3AuthInstance\", web3AuthInstance, web3AuthInstance.provider);\n        if (web3AuthInstance.provider) {\n          $(\".btn-logged-in\").show();\n          $(\".btn-logged-out\").hide();\n          if (web3AuthInstance.connectedAdapterName === \"openlogin\") {\n            $(\"#sign-tx\").show();\n          }\n        } else {\n          $(\".btn-logged-out\").show();\n          $(\".btn-logged-in\").hide();\n        }\n      })();\n\n      function subscribeAuthEvents(web3auth) {\n        web3auth.on(\"connected\", (data) => {\n          console.log(\"Yeah!, you are successfully logged in\", data);\n        });\n\n        web3auth.on(\"connecting\", () => {\n          console.log(\"connecting\");\n        });\n\n        web3auth.on(\"disconnected\", () => {\n          console.log(\"disconnected\");\n        });\n\n        web3auth.on(\"errored\", (error) => {\n          console.log(\"some error or user have cancelled login request\", error);\n        });\n\n        web3auth.on(\"MODAL_VISIBILITY\", (isVisible) => {\n          console.log(\"modal visibility\", isVisible);\n        });\n      }\n\n      $(\"#login\").click(async function (event) {\n        try {\n          const provider = await web3AuthInstance.connect();\n          console.log(\"provider after login\", provider);\n          $(\".btn-logged-out\").hide();\n          $(\".btn-logged-in\").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#logout\").click(async function (event) {\n        try {\n          await web3AuthInstance.logout();\n          $(\".btn-logged-in\").hide();\n          $(\".btn-logged-out\").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#get-user-info\").click(async function (event) {\n        try {\n          const user = await web3AuthInstance.getUserInfo();\n          $(\"#code\").text(JSON.stringify(user || {}, null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#get-accounts\").click(async function (event) {\n        try {\n          const web3 = new Web3(web3AuthInstance.provider);\n          const accounts = await web3.eth.getAccounts();\n          $(\"#code\").text(JSON.stringify([\"Eth accounts\", accounts], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#get-balance\").click(async function (event) {\n        try {\n          const web3 = new Web3(web3AuthInstance.provider);\n          const accounts = await web3.eth.getAccounts();\n          const balance = await web3.eth.getBalance(accounts[0]);\n          $(\"#code\").text(JSON.stringify([\"Eth balance\", balance], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#sign-message\").click(async function (event) {\n        try {\n          const provider = web3AuthInstance.provider;\n          const web3 = new Web3(provider);\n          const accounts = await web3.eth.getAccounts();\n          const message = \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\";\n          web3.currentProvider?.send(\n            {\n              method: \"eth_sign\",\n              params: [accounts[0], message],\n              from: accounts[0],\n            },\n            (err, result) => {\n              if (err) {\n                return console.error(err);\n              }\n              $(\"#code\").text(JSON.stringify([\"Eth sign message => true\", result], null, 2));\n            }\n          );\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#sign-tx\").click(async function (event) {\n        try {\n          const provider = web3AuthInstance.provider;\n          const web3 = new Web3(provider);\n          const accounts = await web3.eth.getAccounts();\n          const txRes = await web3.eth.signTransaction({\n            from: accounts[0],\n            to: accounts[0],\n            value: web3.utils.toWei(\"0.01\"),\n          });\n          $(\"#code\").text(JSON.stringify(txRes));\n\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#send-tx\").click(async function (event) {\n        try {\n          const provider = web3AuthInstance.provider;\n          const web3 = new Web3(provider);\n          const accounts = await web3.eth.getAccounts();\n\n          const message = \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\";\n          const txRes = await web3.eth.sendTransaction({\n            from: accounts[0],\n            to: accounts[0],\n            value: web3.utils.toWei(\"0.01\"),\n          });\n          $(\"#code\").text(JSON.stringify(txRes));\n\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n    </script>\n  </body>\n</html>\n",
    "archive/open-login/zkSync/login.js": "import React, { useEffect, useState } from \"react\";\nimport OpenLogin from \"openlogin\";\nimport AccountInfo from \"../../components/AccountInfo\";\nimport * as ethers from \"ethers\";\nimport * as zksync from \"zksync\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./style.scss\";\n\nconst zksyncConnector = {\n  _syncConn: null,\n  _ethConn: null,\n  _connectZkSync: async () => {\n    const syncProvider = await zksync.getDefaultProvider(\"rinkeby\");\n    zksyncConnector._syncConn = syncProvider;\n    return syncProvider;\n  },\n  _connectEth: async () => {\n    const ethersProvider = ethers.getDefaultProvider(\"rinkeby\");\n    zksyncConnector._ethConn = ethersProvider;\n    return ethersProvider;\n  },\n  connect: async () => {\n    await zksyncConnector._connectZkSync();\n    zksyncConnector._connectEth();\n  },\n  getSyncClient: async () => {\n    if (!!zksyncConnector._syncConn) {\n      return zksyncConnector._syncConn;\n    }\n    return zksyncConnector._connectZkSync();\n  },\n  getEthClient: () => {\n    if (!!zksyncConnector._ethConn) {\n      return zksyncConnector._ethConn;\n    }\n    return zksyncConnector._connectEth();\n  },\n};\n\nfunction Login() {\n  const [loading, setLoading] = useState(false);\n  const [openlogin, setSdk] = useState(undefined);\n  const [walletInfo, setUserAccountInfo] = useState(null);\n  const [syncWallet, setSyncWallet] = useState(null);\n  const [ethWallet, setEthWallet] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    async function initializeOpenlogin() {\n      await zksyncConnector.connect();\n      const sdkInstance = new OpenLogin({\n        clientId: \"YOUR_PROJECT_ID\", // your project id\n        network: \"testnet\",\n      });\n      await sdkInstance.init();\n      if (sdkInstance.privKey) {\n        const privateKey = sdkInstance.privKey;\n        importWallets(privateKey);\n      }\n      setSdk(sdkInstance);\n      setLoading(false);\n    }\n    initializeOpenlogin();\n  }, []);\n\n  async function handleLogin() {\n    setLoading(true);\n    try {\n      const privKey = await openlogin.login({\n        loginProvider: \"google\",\n        redirectUrl: `${window.origin}`,\n      });\n      setLoading(false);\n      importWallets(privKey);\n    } catch (error) {\n      console.log(\"error\", error);\n      setLoading(false);\n    }\n  }\n\n  async function importWallets(privateKey) {\n    const syncProvider = await zksyncConnector.getSyncClient();\n    const ethProvider = zksyncConnector.getEthClient();\n    const ethWallet = new ethers.Wallet(privateKey, ethProvider);\n    setEthWallet(ethWallet);\n    // Derive zksync.Signer from ethereum wallet.\n    const syncWallet = await zksync.Wallet.fromEthSigner(ethWallet, syncProvider);\n    setSyncWallet(syncWallet);\n\n    await autoRefreshBalances(syncWallet, ethWallet, privateKey);\n  }\n\n  async function autoRefreshBalances(syncWallet, ethWallet, privateKey) {\n    const zkSyncCommitedBalance = await syncWallet.getBalance(\"ETH\");\n    const zkSyncVerifiedBalance = await syncWallet.getBalance(\"ETH\", \"verified\");\n    const ethChainBalance = await ethWallet.getBalance();\n    setUserAccountInfo({\n      zkSyncBal: zkSyncCommitedBalance,\n      zkSyncVerifiedBalance,\n      ethBal: ethChainBalance,\n      ethAddress: ethWallet.address,\n      zkSyncAddress: syncWallet.address(),\n      privateKey,\n    });\n    window.setInterval(async () => {\n      const syncCommitedBalance = await syncWallet.getBalance(\"ETH\");\n      const ethChainBalance = await ethWallet.getBalance();\n      const zkSyncVerifiedBalance = await syncWallet.getBalance(\"ETH\", \"verified\");\n      console.log(\"verified\", zkSyncVerifiedBalance);\n      setUserAccountInfo({\n        ethAddress: ethWallet.address,\n        zkSyncAddress: syncWallet.address(),\n        privateKey,\n        zkSyncBal: syncCommitedBalance,\n        zkSyncVerifiedBalance,\n        ethBal: ethChainBalance,\n      });\n    }, 5000);\n  }\n\n  async function unlockZkSyncWallet() {\n    try {\n      if (!(await syncWallet.isSigningKeySet())) {\n        if ((await syncWallet.getAccountId()) === undefined) {\n          throw new Error(\"Unknown account\");\n        }\n\n        console.log(\"Sync wallet: \", syncWallet);\n        const changePubkey = await syncWallet.setSigningKey({ feeToken: \"ETH\", ethAuthType: \"ECDSA\" });\n        toast.success(\"Wallet unlock transaction initiated succesfully\");\n\n        // Wait until the tx is committed\n        let receipt = await changePubkey.awaitReceipt();\n        console.log(\"Unlock account receipt\", receipt);\n        toast.success(\"Wallet unlocked successfully\");\n      } else {\n        console.log(\"Signing key already set: \", await syncWallet.getAccountId());\n        toast.error(\"Wallet already unlocked\");\n      }\n    } catch (error) {\n      console.log(\"Error while unlock\", error);\n      toast.error(\"Unlock zkSync wallet failed, deposit some eth to zkSync for paying unlock fee\");\n    }\n  }\n  async function handleDepositEthToZkSync() {\n    try {\n      const deposit = await syncWallet.depositToSyncFromEthereum({\n        depositTo: syncWallet.address(),\n        token: \"ETH\",\n        amount: ethers.utils.parseEther(\"0.04\"),\n      });\n      toast.success(\"Deposit transaction initiated succesfully\");\n      const depositReceipt = await deposit.awaitReceipt();\n      console.log(\"Deposit result\", depositReceipt);\n      alert(\"Eth deposited to zkSync successfully\");\n    } catch (error) {\n      console.log(\"Error while deposit\", error);\n      alert(\"Eth deposited to zkSync failed\");\n    }\n  }\n\n  async function handleWithDrawEthFromZkSync() {\n    try {\n      const withdraw = await syncWallet.withdrawFromSyncToEthereum({\n        ethAddress: ethWallet.address,\n        token: \"ETH\",\n        amount: ethers.utils.parseEther(\"0.01\"),\n      });\n      toast.success(\"Withdrawal intiated successfully\");\n      let receipt = await withdraw.awaitReceipt();\n      console.log(\"withdraw account receipt\", receipt);\n      toast.success(\"Eth withdrawn tx commited to zkSync with\");\n    } catch (error) {\n      console.log(\"Error while withdrawal\", error);\n      toast.error(\"Eth withdrawal from zkSync failed\");\n    }\n  }\n\n  const refreshBalances = async () => {\n    const syncCommitedBalance = await syncWallet.getBalance(\"ETH\");\n    const ethChainBalance = await ethWallet.getBalance();\n    const zkSyncVerifiedBalance = await syncWallet.getBalance(\"ETH\", \"verified\");\n\n    setUserAccountInfo({\n      ...walletInfo,\n      zkSyncBal: syncCommitedBalance,\n      zkSyncVerifiedBalance,\n      ethBal: ethChainBalance,\n    });\n  };\n\n  const handleLogout = async () => {\n    setLoading(true);\n    await openlogin.logout();\n    setLoading(false);\n  };\n  return (\n    <>\n      {loading ? (\n        <div>\n          <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", margin: 20 }}>\n            <h1>....loading</h1>\n          </div>\n        </div>\n      ) : (\n        <div>\n          {openlogin && openlogin.privKey ? (\n            <div>\n              <ToastContainer />\n              <AccountInfo\n                handleDepositEthToZkSync={handleDepositEthToZkSync}\n                handleWithDrawEthFromZkSync={handleWithDrawEthFromZkSync}\n                unlockZkSyncWallet={unlockZkSyncWallet}\n                refreshBalances={refreshBalances}\n                handleLogout={handleLogout}\n                loading={loading}\n                walletInfo={walletInfo}\n              />\n            </div>\n          ) : (\n            <div className=\"loginContainer\">\n              <h1 style={{ textAlign: \"center\" }}>Openlogin x zkSync</h1>\n              <div onClick={handleLogin} className=\"btn\">\n                Login\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Login;\n",
    "archive/wallet/react/App.js": "import { useState } from \"react\";\nimport Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\nimport wordmark from \"./wordmark.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [account, setAccount] = useState();\n\n  const onClickLogin = async (e) => {\n    e.preventDefault();\n\n    const torus = new Torus({});\n    await torus.init({\n      enableLogging: false,\n    });\n    await torus.login();\n\n    const web3 = new Web3(torus.provider);\n    const address = (await web3.eth.getAccounts())[0];\n    const balance = await web3.eth.getBalance(address);\n    setAccount({ address, balance });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={wordmark} className=\"App-logo\" alt=\"logo\" />\n        {account ? (\n          <div className=\"App-info\">\n            <p>\n              <strong>Address</strong>: {account.address}\n            </p>\n            <p>\n              <strong>Balance</strong>: {account.balance}\n            </p>\n          </div>\n        ) : (\n          <>\n            <p>You didn't login yet. Login to see your account details.</p>\n            <button className=\"App-link\" onClick={onClickLogin}>\n              Login\n            </button>\n          </>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",
    "archive/wallet/react/index.js": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",
    "archive/wallet/vue/App.vue": "<template>\n  <div id=\"app\">\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\n    <Home title=\"Torus Embed + Vue.js\" />\n  </div>\n</template>\n\n<script>\nimport Home from \"./components/Home.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    Home,\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n",
    "archive/wallet/vue/components/Home.vue": "<template>\n  <div>\n    <h1>{{ title }}</h1>\n    <p v-if=\"!account\">\n      You didn't logged in.\n      <button @click=\"login\">Login</button>\n    </p>\n    <div class=\"info-container\" v-if=\"account\">\n      <h3>Your account information</h3>\n      <div class=\"info\">\n        <p><strong>Address</strong>: {{ account.address }}</p>\n        <p><strong>Balance</strong>: {{ account.balance }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\nexport default {\n  name: \"Home\",\n  data: function () {\n    return {\n      account: null,\n    };\n  },\n  props: {\n    title: String,\n  },\n  methods: {\n    async login() {\n      const torus = new Torus();\n      await torus.init();\n      await torus.login({ enableLogging: false });\n      const web3 = new Web3(torus.provider);\n      const address = (await web3.eth.getAccounts())[0];\n      const balance = await web3.eth.getBalance(address);\n      this.account = {\n        address,\n        balance,\n      };\n    },\n  },\n};\n</script>\n\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n.info-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.info {\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: flex-start;\n  margin-top: 20px;\n}\n.info p {\n  margin-bottom: 4px;\n  margin-top: 0;\n}\n</style>\n",
    "archive/wallet/vue/main.js": "import Vue from \"vue\";\nimport App from \"./App.vue\";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  render: (h) => h(App),\n}).$mount(\"#app\");\n",
    "archive/wallet/web/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Torus Wallet Integration</title>\n  </head>\n  <body>\n    <h1>Torus Wallet Integration</h1>\n    <div>\n      <p id=\"text\">Loading...</p>\n      <p id=\"error\"></p>\n      <p id=\"address\"></p>\n      <p id=\"balance\"></p>\n      <button id=\"login\">Login</button>\n      <button id=\"logout\">Logout</button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@toruslabs/torus-embed\"></script>\n    <script src=\"https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.34/dist/web3.js\"></script>\n    <script>\n      (async function init() {\n        $(\"#login\").hide();\n        $(\"#logout\").hide();\n\n        const torus = new Torus();\n        window.torus = torus;\n\n        await torus.init(/*\n        // (Optional) Initialization options\n        {\n          // Customize login providers\n          loginConfig: {\n            google: {\n              clientId: \"<YOUR GOOGLE CLIENT ID>\",\n              ...\n            }\n          },\n          // Customize brand logo, colors, and translations\n          whitelabel: {\n            theme: {\n              isDark: false,\n              colors: {\n                torusBrand1: \"#282c34\",\n              },\n            },\n            defaultLanguage: \"en\",\n            logoDark: \"https://tkey.surge.sh/images/Device.svg\", // Dark logo for light background\n            logoLight: \"https://tkey.surge.sh/images/Device.svg\", // Light logo for dark background\n          }\n        }\n        */);\n\n        try {\n          const user = await torus.getUserInfo();\n          $(\"#text\").text(\"Logged in as \" + user.name + \".\");\n          $(\"#logout\").show();\n          await initWeb3();\n        } catch (error) {\n          $(\"#text\").text(\"Didn't log in.\");\n          $(\"#login\").show();\n        }\n      })();\n\n      async function initWeb3() {\n        const web3 = new Web3(window.torus.provider);\n        const address = (await web3.eth.getAccounts())[0];\n        const balance = await web3.eth.getBalance(address);\n        $(\"#address\").text(\"Address: \" + address + \".\");\n        $(\"#balance\").text(\"Balance: \" + balance + \".\");\n      }\n\n      $(\"#login\").click(function (event) {\n        window.torus\n          .login()\n          .then(function () {\n            return initWeb3();\n          })\n          .then(function () {\n            return window.torus.getUserInfo();\n          })\n          .then(function (user) {\n            $(\"#text\").text(\"Logged in as \" + user.name + \".\");\n            $(\"#error\").hide();\n            $(\"#logout\").show();\n            $(\"#login\").hide();\n          })\n          .catch(function (err) {\n            $(\"#error\").text(err.message);\n          });\n      });\n\n      $(\"#logout\").click(function (event) {\n        window.torus\n          .logout()\n          .then(function (res) {\n            $(\"#text\").text(\"Logged out.\");\n            $(\"#address\").text(\"\");\n            $(\"#balance\").text(\"\");\n            $(\"#login\").show();\n            $(\"#logout\").hide();\n          })\n          .catch(function (err) {\n            $(\"#error\").text(err.message);\n          });\n      });\n    </script>\n  </body>\n</html>\n",
    "eth/evm.js": "const rpc = (()  => {\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const sendEth = async (provider) => {\n        const web3 = new Web3(provider);\n        const accounts = await web3.eth.getAccounts();\n        console.log(\"pubKey\", accounts);\n        const txRes = await web3.eth.sendTransaction({\n          from: accounts[0],\n          to: accounts[0],\n          value: web3.utils.toWei(\"0.01\"),\n        });\n        console.log(\"txRes\", txRes);\n        return txRes;\n    };\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const signMessage = async (provider) => {\n        const pubKey = await provider.request({ method: \"eth_accounts\" });\n\n        return new Promise((resolve, reject)=>{\n          const web3 = new Web3();\n          web3.setProvider(provider);\n          // hex message\n          const message = \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\";\n          (web3.currentProvider)?.send(\n            {\n              method: \"eth_sign\",\n              params: [pubKey[0], message],\n              from: pubKey[0],\n            }, (err, res) => {\n              if (err) {\n                return rejects(err);\n              }\n              return resolve(res);\n            }\n          );\n        })\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getAccounts = async (provider) => {\n        const web3 = new Web3(provider);\n        const accounts = await web3.eth.getAccounts();\n        return accounts;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getChainId = async (provider)=> {\n        const web3 = new Web3(provider);\n        const chainId = await web3.eth.getChainId();\n        return chainId.toString();\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getBalance = async (provider) => {\n        const web3 = new Web3(provider);\n        const accounts = await web3.eth.getAccounts();\n        const balance = await web3.eth.getBalance(accounts[0]);\n        return balance;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const signTransaction = async (provider) => {\n        const web3 = new Web3(provider);\n        const accounts = await web3.eth.getAccounts();\n\n        // only supported with social logins (openlogin adapter)\n        const txRes = await web3.eth.signTransaction({\n          from: accounts[0],\n          to: accounts[0],\n          value: web3.utils.toWei(\"0.01\"),\n        });\n        return txRes;\n    };\n    return {\n      sendEth,\n      signMessage,\n      getAccounts,\n      getChainId,\n      getBalance,\n      signTransaction\n    }\n})()\n",
    "eth/evm.ts": "import type { SafeEventEmitterProvider } from \"@web3auth/base\";\nimport Web3 from \"web3\";\n\nexport default class EthereumRpc {\n  private provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n  async getAccounts(): Promise<string[]> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      return accounts;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  async getBalance(): Promise<string> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      const balance = await web3.eth.getBalance(accounts[0]);\n      return balance;\n    } catch (error) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  async signMessage() {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      const message = \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\";\n      web3.currentProvider?.send(\n        {\n          method: \"eth_sign\",\n          params: [accounts[0], message],\n          from: accounts[0],\n        },\n        (err: Error, result: any) => {\n          if (err) {\n            return console.error(err);\n          }\n          return result;\n        }\n      );\n    } catch (error) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  async signTransaction(): Promise<string> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      const txRes = await web3.eth.signTransaction({\n        from: accounts[0],\n        to: accounts[0],\n        value: web3.utils.toWei(\"0.01\"),\n      });\n      return txRes.raw;\n    } catch (error) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  async signAndSendTransaction(): Promise<string> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n\n      const txRes = await web3.eth.sendTransaction({\n        from: accounts[0],\n        to: accounts[0],\n        value: web3.utils.toWei(\"0.01\"),\n      });\n      return txRes.transactionHash;\n    } catch (error) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n}\n",
    "sol/solana.js": "const rpc = (() => {\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getConnection = async (provider) => {\n        const solanaWallet = new SolanaProvider.SolanaWallet(provider);\n\n        const connectionConfig = await solanaWallet.request({ method: \"solana_provider_config\", params: [] });\n        const conn = new solanaWeb3.Connection(connectionConfig.rpcTarget);\n        return conn;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const sendSol = async (provider) => {\n        const conn =  await getConnection();\n        const solanaWallet = new SolanaProvider.SolanaWallet(web3AuthInstance.provider);\n\n        const pubKey = await solanaWallet.requestAccounts();\n        const { blockhash } = await conn.getRecentBlockhash(\"finalized\");\n        const TransactionInstruction = solanaWeb3.SystemProgram.transfer({\n          fromPubkey: new solanaWeb3.PublicKey(pubKey[0]),\n          toPubkey: new solanaWeb3.PublicKey(pubKey[0]),\n          lamports: 0.01 * solanaWeb3.LAMPORTS_PER_SOL,\n        });\n        const transaction = new solanaWeb3.Transaction({ recentBlockhash: blockhash, feePayer: new solanaWeb3.PublicKey(pubKey[0]) }).add(TransactionInstruction);\n        const signature = await solanaWallet.signAndSendTransaction(transaction);\n        return signature;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const signMessage = async (provider) => {\n        const solWeb3 = new SolanaProvider.SolanaWallet(provider);\n        const msg = Buffer.from(\"Test Signing Message \", \"utf8\");\n        const res = await solWeb3.signMessage(msg);\n        return res\n    };\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getAccounts = async (provider) => {\n        const solWeb3 = new SolanaProvider.SolanaWallet(provider);\n        const acc = await solWeb3.requestAccounts();\n        return acc;\n    };\n\n     /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getBalance = async (provider) => {\n        const conn = await getConnection(provider);\n        const solanaWallet = new SolanaProvider.SolanaWallet(provider);\n        const accounts = await solanaWallet.requestAccounts();\n        const balance = await conn.getBalance(new solanaWeb3.PublicKey(accounts[0]));\n        return balance;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const signTransaction = async (provider) => {\n        const conn = await getConnection(provider);\n        const solWallet = new SolanaProvider.SolanaWallet(provider);\n        const pubKey = await solWallet.requestAccounts();\n        const blockhash = (await conn.getRecentBlockhash(\"finalized\")).blockhash;\n        const TransactionInstruction = SystemProgram.transfer({\n          fromPubkey: new solanaWeb3.PublicKey(pubKey[0]),\n          toPubkey: new solanaWeb3.PublicKey(\"oWvBmHCj6m8ZWtypYko8cRVVnn7jQRpSZjKpYBeESxu\"),\n          lamports: 0.01 * LAMPORTS_PER_SOL,\n        });\n        const transaction = new Transaction({ recentBlockhash: blockhash, feePayer: new PublicKey(pubKey[0]) }).add(TransactionInstruction);\n        const signedTx = await solWallet.signTransaction(transaction);\n        return signedTx\n    };\n\n    return {\n      sendSol,\n      signMessage,\n      getAccounts,\n      getBalance,\n      signTransaction\n    }\n})()\n",
    "sol/solana.ts": "import { CustomChainConfig } from \"@web3auth/base\";\nimport { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport { SolanaWallet } from \"@web3auth/solana-provider\";\nimport type { SafeEventEmitterProvider } from \"@web3auth/base\";\n\nexport default class SolanaRpc {\n  private provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  getAccounts = async (): Promise<string[]> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const acc = await solanaWallet.requestAccounts();\n      return acc;\n    } catch (error) {\n      console.error(\"Error\", error);\n      return [];\n    }\n  };\n\n  getBalance = async (): Promise<void> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const connectionConfig = await solanaWallet.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] });\n      const conn = new Connection(connectionConfig.rpcTarget);\n\n      const accounts = await solanaWallet.requestAccounts();\n      const balance = await conn.getBalance(new PublicKey(accounts[0]));\n    } catch (error) {\n      console.error(\"Error\", error);\n    }\n  };\n\n  signMessage = async (): Promise<void> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const msg = Buffer.from(\"Test Signing Message \", \"utf8\");\n      const res = await solanaWallet.signMessage(msg);\n    } catch (error) {\n      console.error(\"Error\", error);\n    }\n  };\n\n  signAndSendTransaction = async (): Promise<string> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const connectionConfig = await solanaWallet.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] });\n      const conn = new Connection(connectionConfig.rpcTarget);\n\n      const pubKey = await solanaWallet.requestAccounts();\n      const blockhash = (await conn.getRecentBlockhash(\"finalized\")).blockhash;\n      const TransactionInstruction = SystemProgram.transfer({\n        fromPubkey: new PublicKey(pubKey[0]),\n        toPubkey: new PublicKey(pubKey[0]),\n        lamports: 0.01 * LAMPORTS_PER_SOL,\n      });\n      const transaction = new Transaction({ recentBlockhash: blockhash, feePayer: new PublicKey(pubKey[0]) }).add(TransactionInstruction);\n      const { signature } = await solanaWallet.signAndSendTransaction(transaction);\n      return signature;\n    } catch (error) {\n      console.error(\"Error\", error);\n      throw error;\n    }\n  };\n\n  signTransaction = async (): Promise<string> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const connectionConfig = await solanaWallet.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] });\n      const conn = new Connection(connectionConfig.rpcTarget);\n\n      const pubKey = await solanaWallet.requestAccounts();\n      const blockhash = (await conn.getRecentBlockhash(\"finalized\")).blockhash;\n      const TransactionInstruction = SystemProgram.transfer({\n        fromPubkey: new PublicKey(pubKey[0]),\n        toPubkey: new PublicKey(pubKey[0]),\n        lamports: 0.01 * LAMPORTS_PER_SOL,\n      });\n      const transaction = new Transaction({ recentBlockhash: blockhash, feePayer: new PublicKey(pubKey[0]) }).add(TransactionInstruction);\n      const signedTx = await solanaWallet.signTransaction(transaction);\n      return signedTx.signature?.toString() || \"\";\n    } catch (error) {\n      console.error(\"Error\", error);\n      throw error;\n    }\n  };\n}\n",
    "starkex/starkex.ts": "import type { SafeEventEmitterProvider } from \"@web3auth/base\";\nimport StarkExAPI from \"@starkware-industries/starkex-js/dist/browser\";\nimport { ec as elliptic } from \"elliptic\";\nimport { grindKey, ec as starkEc } from \"@toruslabs/starkware-crypto\";\n\nconst starkExAPI = new StarkExAPI({\n  endpoint: \"https://gw.playground-v2.starkex.co\",\n});\n\nexport default class StarkExRpc {\n  private provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  getStarkHDAccount = async (): Promise<elliptic.KeyPair | undefined> => {\n    const account = await this.getStarkAccount();\n    return account;\n  };\n\n  getStarkAccount = async (): Promise<elliptic.KeyPair | undefined> => {\n    try {\n      const starkEcOrder = starkEc.n;\n      const provider = this.provider;\n      const privKey = await provider.request({ method: \"eth_private_key\" });\n      const account = starkEc.keyFromPrivate(grindKey(privKey as string, starkEcOrder as BN), \"hex\");\n      return account;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  getStarkKey = async (): Promise<string | undefined> => {\n    try {\n      const account = await this.getStarkAccount();\n      return account?.getPrivate(\"hex\");\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  onMintRequest = async (): Promise<any> => {\n    try {\n      const txId = await starkExAPI.gateway.getFirstUnusedTxId();\n      const starkKey = await this.getStarkKey();\n\n      const request = {\n        txId,\n        vaultId: 1654615998,\n        amount: \"6\",\n        tokenId: \"0x400de4b5a92118719c78df48f4ff31e78de58575487ce1eaf19922ad9b8a714\",\n        starkKey: `0x${starkKey}`,\n      };\n      const response = await starkExAPI.gateway.mint(request);\n      return response;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  onDepositRequest = async () => {\n    try {\n      const txId = await starkExAPI.gateway.getFirstUnusedTxId();\n      const starkKey = await this.getStarkKey();\n      const request = {\n        txId,\n        amount: 8,\n        starkKey: `0x${starkKey}`,\n        tokenId: \"0x3ef811e040c4bc9f9eee715441cee470f5d5aff69b9cd9aca7884f5a442a890\",\n        vaultId: 1924014660,\n      };\n      const response = await starkExAPI.gateway.deposit(request);\n      return response;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  onWithdrawalRequest = async (): Promise<any> => {\n    try {\n      const txId = await starkExAPI.gateway.getFirstUnusedTxId();\n      const starkKey = await this.getStarkKey();\n      const request = {\n        txId,\n        amount: 8,\n        starkKey: `0x${starkKey}`,\n        tokenId: \"0x2dd48fd7a024204f7c1bd874da5e709d4713d60c8a70639eb1167b367a9c378\",\n        vaultId: 612008755,\n      };\n      const response = await starkExAPI.gateway.withdrawal(request);\n      return response;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n}\n",
    "starknet/account.json": "https: //github.com/0xs34n/starknet.js/blob/develop/__mocks__/ArgentAccount.json\n",
    "starknet/starknet.ts": "import type { SafeEventEmitterProvider } from \"@web3auth/base\";\nimport Web3 from \"web3\";\nimport { getStarkHDAccount, STARKNET_NETWORKS, sign, verify } from \"@toruslabs/openlogin-starkkey\";\nimport { binaryToHex, binaryToUtf8, bufferToBinary, bufferToHex, hexToBinary, removeHexPrefix } from \"enc-utils\";\nimport type { ec } from \"elliptic\";\nimport { defaultProvider } from \"starknet\";\nimport CompiledAccountContractAbi from \"./contracts/account_abi.json\";\nimport { BN } from \"bn.js\";\nimport { ec as elliptic } from \"elliptic\";\nimport { grindKey, ec as starkEc } from \"@toruslabs/starkware-crypto\";\nimport fs from \"fs\";\n\nexport default class EthereumRpc {\n  private provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n  async getAccounts(): Promise<string[]> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      return accounts;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  getStarkAccount = async (): Promise<elliptic.KeyPair | undefined> => {\n    try {\n      const starkEcOrder = starkEc.n;\n      const provider = this.provider;\n      const privKey = await provider.request({ method: \"eth_private_key\" });\n      const account = starkEc.keyFromPrivate(grindKey(privKey as string, starkEcOrder as BN), \"hex\");\n      return account;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  getStarkKey = async (): Promise<string | undefined> => {\n    try {\n      const account = await this.getStarkAccount();\n      return account?.getPrivate(\"hex\");\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  deployAccount = async (): Promise<string | undefined> => {\n    try {\n      const account = await this.getStarkAccount();\n      const compiledArgentAccount = JSON.parse(fs.readFileSync(\"./account.json\").toString(\"ascii\"));\n      const accountResponse = await defaultProvider.deployContract({\n        contract: compiledArgentAccount,\n        addressSalt: account.getPublic(\"hex\"),\n      });\n      return accountResponse;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n}\n",
    "web3auth/android/MainActivity.kt": "package com.web3auth.app\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport com.google.android.material.textfield.TextInputLayout\nimport com.google.gson.Gson\nimport com.web3auth.core.types.WhiteLabelData\nimport com.web3auth.core.types.Provider\nimport com.web3auth.core.Web3Auth\nimport com.web3auth.core.isEmailValid\nimport com.web3auth.core.types.ExtraLoginOptions\nimport com.web3auth.core.types.LoginParams\nimport com.web3auth.core.types.Web3AuthOptions\nimport com.web3auth.core.types.Web3AuthResponse\nimport java8.util.concurrent.CompletableFuture\n\nclass MainActivity : AppCompatActivity(), AdapterView.OnItemClickListener {\n    private lateinit var web3Auth: Web3Auth\n\n    private val verifierList: List<LoginVerifier> = listOf(\n        LoginVerifier(\"Google\", Provider.GOOGLE),\n        LoginVerifier(\"Facebook\", Provider.FACEBOOK),\n        LoginVerifier(\"Twitch\", Provider.TWITCH),\n        LoginVerifier(\"Discord\", Provider.DISCORD),\n        LoginVerifier(\"Reddit\", Provider.REDDIT),\n        LoginVerifier(\"Apple\", Provider.APPLE),\n        LoginVerifier(\"Github\", Provider.GITHUB),\n        LoginVerifier(\"LinkedIn\", Provider.LINKEDIN),\n        LoginVerifier(\"Twitter\", Provider.TWITTER),\n        LoginVerifier(\"Line\", Provider.LINE),\n        LoginVerifier(\"Hosted Email Passwordless\", Provider.EMAIL_PASSWORDLESS)\n    )\n\n    private var selectedLoginProvider: Provider = Provider.GOOGLE\n\n    private val gson = Gson()\n\n    private fun signIn() {\n        val hintEmailEditText = findViewById<EditText>(R.id.etEmailHint)\n        var extraLoginOptions: ExtraLoginOptions? = null\n        if (selectedLoginProvider == Provider.EMAIL_PASSWORDLESS) {\n            val hintEmail = hintEmailEditText.text.toString()\n            if (hintEmail.isBlank() || !hintEmail.isEmailValid()) {\n                Toast.makeText(this, \"Please enter a valid Email.\", Toast.LENGTH_LONG).show()\n                return\n            }\n            extraLoginOptions = ExtraLoginOptions(login_hint = hintEmail)\n        }\n\n        val loginCompletableFuture: CompletableFuture<Web3AuthResponse> = web3Auth.login(\n            LoginParams(selectedLoginProvider, extraLoginOptions = extraLoginOptions)\n        )\n        loginCompletableFuture.whenComplete { loginResponse, error ->\n            if (error == null) {\n                reRender(loginResponse)\n            } else {\n                Log.d(\"MainActivity_Web3Auth\", error.message ?: \"Something went wrong\" )\n            }\n\n        }\n    }\n\n    private fun signOut() {\n        val logoutCompletableFuture =  web3Auth.logout()\n        logoutCompletableFuture.whenComplete { _, error ->\n            if (error == null) {\n                reRender(Web3AuthResponse())\n            } else {\n                Log.d(\"MainActivity_Web3Auth\", error.message ?: \"Something went wrong\" )\n            }\n        }\n    }\n\n    private fun reRender(web3AuthResponse: Web3AuthResponse) {\n        val contentTextView = findViewById<TextView>(R.id.contentTextView)\n        val signInButton = findViewById<Button>(R.id.signInButton)\n        val signOutButton = findViewById<Button>(R.id.signOutButton)\n        val spinner = findViewById<TextInputLayout>(R.id.verifierList)\n        val hintEmailEditText = findViewById<EditText>(R.id.etEmailHint)\n\n        val key = web3AuthResponse.privKey\n        val userInfo = web3AuthResponse.userInfo\n        if (key is String && key.isNotEmpty()) {\n            contentTextView.text = gson.toJson(web3AuthResponse)\n            contentTextView.visibility = View.VISIBLE\n            signInButton.visibility = View.GONE\n            signOutButton.visibility = View.VISIBLE\n            spinner.visibility = View.GONE\n            hintEmailEditText.visibility = View.GONE\n        } else {\n            contentTextView.text = getString(R.string.not_logged_in)\n            contentTextView.visibility = View.GONE\n            signInButton.visibility = View.VISIBLE\n            signOutButton.visibility = View.GONE\n            spinner.visibility = View.VISIBLE\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Configure Web3Auth\n        web3Auth = Web3Auth(\n            Web3AuthOptions(context = this,\n            clientId = getString(R.string.web3auth_project_id),\n            network = Web3Auth.Network.MAINNET,\n            redirectUrl = Uri.parse(\"torusapp://org.torusresearch.web3authexample/redirect\"),\n                whiteLabel = WhiteLabelData(\n                    \"Web3Auth Sample App\", null, null, \"en\", true,\n                    hashMapOf(\n                        \"primary\" to \"#123456\"\n                    )\n                )\n            )\n        )\n\n        web3Auth.setResultUrl(intent.data)\n\n        // Setup UI and event handlers\n        val signInButton = findViewById<Button>(R.id.signInButton)\n        signInButton.setOnClickListener { signIn() }\n\n        val signOutButton = findViewById<Button>(R.id.signOutButton)\n        signOutButton.setOnClickListener { signOut() }\n\n        val spinner = findViewById<AutoCompleteTextView>(R.id.spinnerTextView)\n        val loginVerifierList: List<String> = verifierList.map { item ->\n            item.name\n        }\n        val adapter: ArrayAdapter<String> =\n            ArrayAdapter(this, R.layout.item_dropdown, loginVerifierList)\n        spinner.setAdapter(adapter)\n        spinner.onItemClickListener = this\n    }\n\n    override fun onNewIntent(intent: Intent?) {\n        super.onNewIntent(intent)\n        web3Auth.setResultUrl(intent?.data)\n    }\n\n    override fun onItemClick(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {\n        selectedLoginProvider = verifierList[p2].loginProvider\n\n        val hintEmailEditText = findViewById<EditText>(R.id.etEmailHint)\n        if (selectedLoginProvider == Provider.EMAIL_PASSWORDLESS) {\n            hintEmailEditText.visibility = View.VISIBLE\n        } else {\n            hintEmailEditText.visibility = View.GONE\n        }\n    }\n\n    data class LoginVerifier (\n        val name : String,\n        val loginProvider : Provider\n    )\n\n}\n",
    "web3auth/angular/app.component.css": ":host {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 14px;\n  color: #333;\n  box-sizing: border-box;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.title {\n  font-size: 3rem;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.content {\n  display: flex;\n  margin: 82px auto 32px;\n  padding: 0 16px;\n  max-width: 960px;\n  flex-direction: column;\n  align-items: center;\n}\n\n.card-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 16px;\n}\n\n.card {\n  all: unset;\n  border-radius: 4px;\n  border: 1px solid #0070f3;\n  color: #0070f3;\n  height: 40px;\n  width: 150px;\n  margin: 0 8px 16px;\n  padding: 16px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  transition: all 0.2s ease-in-out;\n  line-height: 24px;\n}\n\n.card.card-small {\n  height: 16px;\n  width: 128px;\n  cursor: pointer;\n}\n\n.card-container .card:not(.highlight-card):hover {\n  transform: translateY(-3px);\n  box-shadow: 0 4px 17px rgba(0, 0, 0, 0.35);\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.console {\n  width: 100%;\n}\n\n.code {\n  background: #fafafa;\n  border-radius: 5px;\n  font-size: 1rem;\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;\n  overflow-wrap: break-word;\n  padding: 1rem;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1em;\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n",
    "web3auth/angular/app.component.html": "<div class=\"content\">\n  <h1 class=\"title\">\n    <a target=\"_blank\" href=\"http://web3auth.io/\">Web3Auth</a> & AngularJS\n    Example\n  </h1>\n  <div class=\"setting\">\n    <div\n      *ngIf=\"isModalLoaded && provider; else elseBlock\"\n      class=\"card-container\"\n    >\n      <button class=\"card card-small\" (click)=\"getUserInfo()\">\n        Get User Info\n      </button>\n      <button class=\"card card-small\" (click)=\"getAccount()\">\n        Get Account\n      </button>\n      <button class=\"card card-small\" (click)=\"getBalance()\">\n        Get Balance\n      </button>\n      <button class=\"card card-small\" (click)=\"signMessage()\">\n        Sign Message\n      </button>\n      <button class=\"card card-small\" (click)=\"signTransaction()\">\n        Sign Transaction\n      </button>\n      <button class=\"card card-small\" (click)=\"signAndSendTransaction()\">\n        Send Transaction\n      </button>\n      <button class=\"card card-small\" (click)=\"logout()\">Log Out</button>\n      <div class=\"console\" id=\"console-ui\">\n        <p class=\"code\">Logged In</p>\n      </div>\n    </div>\n    <ng-template #elseBlock>\n      <div class=\"card-container\">\n        <button class=\"card card-small\" (click)=\"login()\">Login</button>\n      </div>\n    </ng-template>\n  </div>\n  <footer class=\"footer\">\n    <a\n      href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/angular-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Source code\n      <img class=\"logo\" src=\"../assets/github-logo.png\" />\n    </a>\n  </footer>\n</div>\n",
    "web3auth/angular/app.component.ts": "import { Component } from \"@angular/core\";\nimport { ADAPTER_EVENTS, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { OpenloginAdapter } from \"@web3auth/openlogin-adapter\";\nimport { Web3Auth } from \"@web3auth/web3auth\";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"angular-app\";\n  web3auth: Web3Auth | null = null;\n  provider: SafeEventEmitterProvider | null = null;\n  isModalLoaded = false;\n\n  async ngOnInit() {\n    // REPLACE-const web3AuthInitParams = {};-\n\n    // REPLACE-const web3AuthCtorParams = {};-\n\n    this.web3auth = new Web3Auth(web3AuthCtorParams);\n\n    // REPLACE-const web3AuthOpenloginConfigure = {};-\n    this.web3auth.configureAdapter(openloginAdapter);\n    this.subscribeAuthEvents(this.web3auth);\n    await this.web3auth.initModal(initParams);\n    this.isModalLoaded = true;\n  }\n\n  subscribeAuthEvents(web3auth: Web3Auth) {\n    web3auth.on(ADAPTER_EVENTS.CONNECTED, (data) => {\n      console.log(\"Yeah!, you are successfully logged in\", data);\n      this.provider = web3auth.provider;\n    });\n\n    web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n      console.log(\"connecting\");\n    });\n\n    web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n      console.log(\"disconnected\");\n    });\n\n    web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n      console.log(\"some error or user have cancelled login request\", error);\n    });\n  }\n\n  async login() {\n    if (!this.web3auth) {\n      this.uiConsole(\"Web3auth is not initialized\");\n      return;\n    }\n    this.provider = await this.web3auth.connect();\n    this.uiConsole(\"logged in\");\n  }\n\n  async logout() {\n    if (!this.web3auth) {\n      this.uiConsole(\"Web3auth is not initialized\");\n      return;\n    }\n    await this.web3auth.logout();\n    this.provider = null;\n    this.uiConsole(\"logged out\");\n  }\n\n  async getUserInfo() {\n    if (!this.web3auth) {\n      this.uiConsole(\"Web3auth is not initialized\");\n      return;\n    }\n    const userInfo = await this.web3auth.getUserInfo();\n    this.uiConsole(\"User Info\", userInfo);\n  }\n\n  async getBalance() {\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const balance = await rpc.getBalance();\n    this.uiConsole(\"Balance\", balance);\n  }\n\n  async getAccount() {\n    console.log(\"GETTING ACCOUNT\");\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const accounts = await rpc.getAccounts();\n    this.uiConsole(\"Account\", accounts);\n  }\n\n  async signMessage() {\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signMessage();\n    this.uiConsole(\"Sign message\", res);\n  }\n\n  async signTransaction() {\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signTransaction();\n    this.uiConsole(\"Sign transaction\", res);\n  }\n\n  async signAndSendTransaction() {\n    console.log(\"SIGNING MESSAGE\");\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signAndSendTransaction();\n    this.uiConsole(\"Sign and send transaction\", res);\n  }\n\n  uiConsole(...args: unknown[]): void {\n    const el = document.querySelector(\"#console-ui>p\");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n}\n",
    "web3auth/angular/app.module.ts": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
    "web3auth/angular/custom/app.component.ts": "import { Component } from \"@angular/core\";\nimport { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider, WALLET_ADAPTERS } from \"@web3auth/base\";\nimport { Web3AuthCore } from \"@web3auth/core\";\nimport { OpenloginAdapter } from \"@web3auth/openlogin-adapter\";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"angular-app\";\n  web3auth: Web3Auth | null = null;\n  provider: SafeEventEmitterProvider | null = null;\n  isModalLoaded = false;\n\n  async ngOnInit() {\n    // REPLACE-const web3AuthCoreCtorParams = {};-\n\n    const web3auth = new Web3AuthCore(web3AuthCtorParams);\n\n    // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n    this.web3auth.configureAdapter(openloginAdapter);\n    this.subscribeAuthEvents(this.web3auth);\n    await web3auth.init();\n    this.isModalLoaded = true;\n  }\n\n  subscribeAuthEvents(web3auth: Web3AuthCore) {\n    web3auth.on(ADAPTER_EVENTS.CONNECTED, (data) => {\n      console.log(\"Yeah!, you are successfully logged in\", data);\n      this.provider = web3auth.provider;\n    });\n\n    web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n      console.log(\"connecting\");\n    });\n\n    web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n      console.log(\"disconnected\");\n    });\n\n    web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n      console.log(\"some error or user have cancelled login request\", error);\n    });\n  }\n\n  async login() {\n    if (!this.web3auth) {\n      this.uiConsole(\"Web3auth is not initialized\");\n      return;\n    }\n\n    // REPLACE-const web3AuthConnect = {};-\n\n    this.uiConsole(\"logged in\");\n  }\n\n  async logout() {\n    if (!this.web3auth) {\n      this.uiConsole(\"Web3auth is not initialized\");\n      return;\n    }\n    await this.web3auth.logout();\n    this.provider = null;\n    this.uiConsole(\"logged out\");\n  }\n\n  async getUserInfo() {\n    if (!this.web3auth) {\n      this.uiConsole(\"Web3auth is not initialized\");\n      return;\n    }\n    const userInfo = await this.web3auth.getUserInfo();\n    this.uiConsole(\"User Info\", userInfo);\n  }\n\n  async getBalance() {\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const balance = await rpc.getBalance();\n    this.uiConsole(\"Balance\", balance);\n  }\n\n  async getAccount() {\n    console.log(\"GETTING ACCOUNT\");\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const accounts = await rpc.getAccounts();\n    this.uiConsole(\"Account\", accounts);\n  }\n\n  async signMessage() {\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signMessage();\n    this.uiConsole(\"Sign message\", res);\n  }\n\n  async signTransaction() {\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signTransaction();\n    this.uiConsole(\"Sign transaction\", res);\n  }\n\n  async signAndSendTransaction() {\n    console.log(\"SIGNING MESSAGE\");\n    if (!this.provider) {\n      this.uiConsole(\"provider is not initialized\");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signAndSendTransaction();\n    this.uiConsole(\"Sign and send transaction\", res);\n  }\n\n  uiConsole(...args: unknown[]): void {\n    const el = document.querySelector(\"#console-ui>p\");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n}\n",
    "web3auth/angular/package.json": "{\n  \"name\": \"angular-app\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"~13.2.4\",\n    \"@angular/common\": \"~13.2.4\",\n    \"@angular/compiler\": \"~13.2.4\",\n    \"@angular/core\": \"~13.2.4\",\n    \"@angular/forms\": \"~13.2.4\",\n    \"@angular/platform-browser\": \"~13.2.4\",\n    \"@angular/platform-browser-dynamic\": \"~13.2.4\",\n    \"@angular/router\": \"~13.2.4\",\n    \"@web3auth/solana-provider\": \"^0.9.0\",\n    \"@web3auth/web3auth\": \"^0.9.0\",\n    \"@web3auth/base\": \"^0.9.0\",\n    \"@solana/web3.js\": \"^1.36.0\",\n    \"assert\": \"^2.0.0\",\n    \"crypto-browserify\": \"^3.12.0\",\n    \"https-browserify\": \"^1.0.0\",\n    \"os-browserify\": \"^0.3.0\",\n    \"rxjs\": \"~7.5.4\",\n    \"stream-browserify\": \"^3.0.0\",\n    \"stream-http\": \"^3.2.0\",\n    \"tslib\": \"^2.3.1\",\n    \"url\": \"^0.11.0\",\n    \"web3\": \"^1.7.0\",\n    \"zone.js\": \"~0.11.4\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"~13.2.5\",\n    \"@angular/cli\": \"~13.2.5\",\n    \"@angular/compiler-cli\": \"~13.2.4\",\n    \"@types/jasmine\": \"~3.10.3\",\n    \"@types/keccak\": \"^3.0.1\",\n    \"@types/node\": \"^12.11.1\",\n    \"@types/readable-stream\": \"^2.3.13\",\n    \"jasmine-core\": \"~4.0.1\",\n    \"karma\": \"~6.3.16\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage\": \"~2.2.0\",\n    \"karma-jasmine\": \"~4.0.1\",\n    \"karma-jasmine-html-reporter\": \"~1.7.0\",\n    \"typescript\": \"~4.5.5\"\n  }\n}\n",
    "web3auth/flutter/main.dart": "import 'dart:collection';\n\nimport 'package:flutter/material.dart';\nimport 'dart:async';\n\nimport 'package:flutter/services.dart';\nimport 'package:web3auth_flutter/web3auth_flutter.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  String _result = '<empty>';\n  bool logoutVisible = false;\n\n  @override\n  void initState() {\n    super.initState();\n    initPlatformState();\n  }\n\n  // Platform messages are asynchronous, so we initialize in an async method.\n  Future<void> initPlatformState() async {\n    HashMap themeMap = new HashMap<String, String>();\n    themeMap['primary'] = \"#fff000\";\n\n    await Web3AuthFlutter.init(\n        clientId:\n            'BPcJHn_y62h5k9v33TzTSPQiHJZuOGwQdjOanCC7-GKgelSYz1PYPoU7LIJqix3CGFHLF7IEIvsfQhBF_rx9rUw',\n        network: Network.mainnet,\n        redirectUri: 'org.torusresearch.flutter.web3authexample://auth',\n        whiteLabelData: WhiteLabelData(\n            dark: true, name: \"Web3Auth Flutter App\", theme: themeMap),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Torus Web3Auth Example'),\n        ),\n        body: Center(\n            child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Padding(\n              padding: const EdgeInsets.all(8.0),\n              child: Text('Login with'),\n            ),\n            ElevatedButton(\n                onPressed: _login(_withGoogle), child: Text('Google')),\n            ElevatedButton(\n                onPressed: _login(_withFacebook), child: Text('Facebook')),\n            ElevatedButton(\n                onPressed: _login(_withReddit), child: Text('Reddit ')),\n            ElevatedButton(\n                onPressed: _login(_withDiscord), child: Text('Discord')),\n            Visibility(\n              child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                      primary: Colors.red // This is what you need!\n                      ),\n                  onPressed: _logout(),\n                  child: Text('Logout')),\n              visible: logoutVisible,\n            ),\n            Padding(\n              padding: const EdgeInsets.all(8.0),\n              child: Text('Result: $_result'),\n            )\n          ],\n        )),\n      ),\n    );\n  }\n\n  VoidCallback _login(Future<Web3AuthResponse> Function() method) {\n    return () async {\n      try {\n        final Web3AuthResponse response = await method();\n        setState(() {\n          _result = response.toString();\n          logoutVisible = true;\n        });\n      } on UserCancelledException {\n        print(\"User cancelled.\");\n      } on UnKnownException {\n        print(\"Unknown exception occurred\");\n      }\n    };\n  }\n\n  VoidCallback _logout() {\n    return () async {\n      try {\n        await Web3AuthFlutter.logout();\n        setState(() {\n          _result = '<empty>';\n          logoutVisible = false;\n        });\n      } on UserCancelledException {\n        print(\"User cancelled.\");\n      } on UnKnownException {\n        print(\"Unknown exception occurred\");\n      }\n    };\n  }\n\n  Future<Web3AuthResponse> _withGoogle() {\n    return Web3AuthFlutter.login(provider: Provider.google);\n  }\n\n  Future<Web3AuthResponse> _withFacebook() {\n    return Web3AuthFlutter.login(provider: Provider.facebook);\n  }\n\n  Future<Web3AuthResponse> _withReddit() {\n    return Web3AuthFlutter.login(provider: Provider.reddit);\n  }\n\n  Future<Web3AuthResponse> _withDiscord() {\n    return Web3AuthFlutter.login(provider: Provider.discord);\n  }\n}\n",
    "web3auth/ios/ContentView.swift": "import SwiftUI\nimport Web3Auth\n\nstruct ContentView: View {\n    @SwiftUI.State var text = \"\"\n    var body: some View {\n        VStack {\n            Button(\n                action: {\n                    Web3Auth()\n                        .login(W3ALoginParams()) {\n                            switch $0 {\n                            case .success(let result):\n                                showResult(result: result)\n                            case .failure(let error):\n                                print(\"Error: \\(error)\")\n                            }\n                        }\n                },\n                label: {\n                    Text(\"Sign In\")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth()\n                        .login(W3ALoginParams(loginProvider: .GOOGLE)) {\n                            switch $0 {\n                            case .success(let result):\n                                showResult(result: result)\n                            case .failure(let error):\n                                print(\"Error: \\(error)\")\n                            }\n                        }\n                },\n                label: {\n                    Text(\"Sign In with Google\")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth(\n                        W3AInitParams(\n                            clientId: \"your-client-id\",\n                            network: .mainnet\n                        )\n                    )\n                    .login(W3ALoginParams(loginProvider: .GOOGLE)) {\n                        switch $0 {\n                        case .success(let result):\n                            showResult(result: result)\n                        case .failure(let error):\n                            print(\"Error: \\(error)\")\n                        }\n                    }\n                },\n                label: {\n                    Text(\"Sign In with Google with Constructor Init Params\")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth()\n                        .login(W3ALoginParams(loginProvider: .APPLE)) {\n                            switch $0 {\n                            case .success(let result):\n                                showResult(result: result)\n                            case .failure(let error):\n                                print(\"Error: \\(error)\")\n                            }\n                        }\n                },\n                label: {\n                    Text(\"Sign In with Apple\")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth()\n                        .login(W3ALoginParams(\n                            loginProvider: .EMAIL_PASSWORDLESS,\n                            extraLoginOptions: ExtraLoginOptions(\n                                display: nil,\n                                prompt: nil,\n                                max_age: nil,\n                                ui_locales: nil,\n                                id_token_hint: nil,\n                                id_token: nil,\n                                login_hint: \"your-email@example.com\",\n                                acr_values: nil,\n                                scope: nil,\n                                audience: nil,\n                                connection: nil,\n                                domain: nil,\n                                client_id: nil,\n                                redirect_uri: nil,\n                                leeway: nil,\n                                verifierIdField: nil,\n                                isVerifierIdCaseSensitive: nil\n                            )\n                        )) {\n                            switch $0 {\n                            case .success(let result):\n                                showResult(result: result)\n                            case .failure(let error):\n                                print(\"Error: \\(error)\")\n                            }\n                        }\n                },\n                label: {\n                    Text(\"Sign In with Email Passwordless\")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth(\n                        W3AInitParams(\n                            clientId: \"your-client-id\",\n                            network: .testnet,\n                            whiteLabel: W3AWhiteLabelData(\n                                name: \"Web3Auth Stub\",\n                                dark: true,\n                                theme: [\"primary\": \"#123456\"]\n                            )\n                        )\n                    )\n                    .login(W3ALoginParams(loginProvider: .GOOGLE)) {\n                        switch $0 {\n                        case .success(let result):\n                            showResult(result: result)\n                        case .failure(let error):\n                            print(\"Error: \\(error)\")\n                        }\n                    }\n                },\n                label: {\n                    Text(\"Sign In with Whitelabel\")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth(\n                        W3AInitParams(\n                            clientId: \"your-client-id\",\n                            network: .testnet,\n                            loginConfig: [\n                                \"jwt\": W3ALoginConfig(\n                                    verifier: \"your-verifier-id\",\n                                    typeOfLogin: TypeOfLogin.jwt,\n                                    name: \"display name\",\n                                    verifierSubIdentifier: \"sub\"\n                                )\n                            ]\n                        )\n                    )\n                    .login(W3ALoginParams(\n                        loginProvider: .JWT,\n                        extraLoginOptions: ExtraLoginOptions(\n                            display: nil,\n                            prompt: nil,\n                            max_age: nil,\n                            ui_locales: nil,\n                            id_token_hint: nil,\n                            id_token: \"jwt-id-token\",\n                            login_hint: nil,\n                            acr_values: nil,\n                            scope: nil,\n                            audience: nil,\n                            connection: nil,\n                            domain: nil,\n                            client_id: nil,\n                            redirect_uri: nil,\n                            leeway: nil,\n                            verifierIdField: nil,\n                            isVerifierIdCaseSensitive: nil\n                        )\n                    )) {\n                        switch $0 {\n                        case .success(let result):\n                            showResult(result: result)\n                        case .failure(let error):\n                            print(\"Error: \\(error)\")\n                        }\n                    }\n                },\n                label: {\n                    Text(\"Sign In with Custom Authentication\")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth(\n                        W3AInitParams(\n                            clientId: \"your-client-id\",\n                            network: .testnet,\n                            loginConfig: [\n                                \"jwt\": W3ALoginConfig(\n                                    verifier: \"your-verifier-id\",\n                                    typeOfLogin: TypeOfLogin.jwt,\n                                    name: \"display name\",\n                                    verifierSubIdentifier: \"sub\"\n                                )\n                            ],\n                            whiteLabel: W3AWhiteLabelData(\n                                name: \"Web3Auth Stub\",\n                                dark: true,\n                                theme: [\"primary\": \"#123456\"]\n                            )\n                        )\n                    )\n                    .login(W3ALoginParams(\n                        loginProvider: .JWT,\n                        extraLoginOptions: ExtraLoginOptions(\n                            display: nil,\n                            prompt: nil,\n                            max_age: nil,\n                            ui_locales: nil,\n                            id_token_hint: nil,\n                            id_token: \"jwt-id-token\",\n                            login_hint: nil,\n                            acr_values: nil,\n                            scope: nil,\n                            audience: nil,\n                            connection: nil,\n                            domain: nil,\n                            client_id: nil,\n                            redirect_uri: nil,\n                            leeway: nil,\n                            verifierIdField: nil,\n                            isVerifierIdCaseSensitive: nil\n                        )\n                    )) {\n                        switch $0 {\n                        case .success(let result):\n                            showResult(result: result)\n                        case .failure(let error):\n                            print(\"Error: \\(error)\")\n                        }\n                    }\n                },\n                label: {\n                    Text(\"Sign In with Custom Authentication With Whitelabel\")\n                        .padding()\n                }\n            )\n            \n            Text(text).foregroundColor(.white)\n        }\n    }\n    \n    func showResult(result: Web3AuthState) {\n        print(\"\"\"\n        Signed in successfully!\n            Private key: \\(result.privKey)\n            Ed25519 Private key: \\(result.ed25519PrivKey)\n            User info:\n                Name: \\(result.userInfo.name)\n                Profile image: \\(result.userInfo.profileImage ?? \"N/A\")\n                Type of login: \\(result.userInfo.typeOfLogin)\n        \"\"\")\n        text = \"\"\"\n        Signed in successfully!\n            Private key: \\(result.privKey)\n            Ed25519 Private key: \\(result.ed25519PrivKey)\n            User info:\n                Name: \\(result.userInfo.name)\n                Profile image: \\(result.userInfo.profileImage ?? \"N/A\")\n                Type of login: \\(result.userInfo.typeOfLogin)\n        \"\"\"\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n",
    "web3auth/ios/Podfile": "platform :ios, '13.0'\nsource 'https://github.com/CocoaPods/Specs.git'\n\ntarget 'Web3AuthSample' do\n  # Comment the next line if you don't want to use dynamic frameworks\n  use_frameworks!\n  pod 'Web3Auth'\nend\n",
    "web3auth/ios/Web3Auth.plist": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>ClientId</key>\n\t<string>your-client-id</string>\n\t<key>Network</key>\n\t<string>mainnet</string>\n</dict>\n</plist>\n",
    "web3auth/nextjs/App.css": ".container {\n  width: 60%;\n  margin: auto;\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.title {\n  line-height: 1.15;\n  font-size: 3rem;\n  text-align: center;\n  margin: 50px;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.card {\n  margin: 0.5rem;\n  padding: 0.7rem;\n  text-align: center;\n  color: #0070f3;\n  background-color: #fafafa;\n  text-decoration: none;\n  border: 1px solid #0070f3;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  width: 100%;\n}\n\n.card:hover,\n.card:focus,\n.card:active {\n  cursor: pointer;\n  background-color: #f1f1f1;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n\n@media (max-width: 1200px) {\n  .container {\n    width: 100%;\n  }\n}\n",
    "web3auth/nextjs/App.tsx": "import { ADAPTER_EVENTS, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport type { Web3Auth, Web3AuthOptions } from \"@web3auth/web3auth\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\n// REPLACE-web3authChainRpcImport-\n\nfunction App() {\n  const [web3AuthInstance, setWeb3AuthInstance] = useState<Web3Auth | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        const { Web3Auth } = await import(\"@web3auth/web3auth\");\n        const web3AuthInstance = new Web3Auth(web3AuthCtorParams as Web3AuthOptions);\n        subscribeAuthEvents(web3AuthInstance);\n        setWeb3AuthInstance(web3AuthInstance);\n        await web3AuthInstance.initModal();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3AuthInstance: Web3Auth) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3AuthInstance.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log(\"Yeah!, you are successfully logged in\", data);\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log(\"connecting\");\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log(\"disconnected\");\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error(\"some error or user has cancelled login request\", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3AuthInstance) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const provider = await web3AuthInstance.connect();\n    setProvider(provider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3AuthInstance) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const user = await web3AuthInstance.getUserInfo();\n    console.log(\"User info\", user);\n  };\n\n  const logout = async () => {\n    if (!web3AuthInstance) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    await web3AuthInstance.logout();\n    setProvider(null);\n  };\n\n  const onGetAccounts = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const userAccount = await rpc.getAccounts();\n    console.log(\"User account\", userAccount);\n  };\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className=\"card\">\n        Get User Info\n      </button>\n      <button onClick={onGetAccounts} className=\"card\">\n        Get Accounts\n      </button>\n      <button onClick={logout} className=\"card\">\n        Log Out\n      </button>\n    </>\n  );\n\n  const unloggedInView = (\n    <button onClick={login} className=\"card\">\n      Login\n    </button>\n  );\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">\n        <a target=\"_blank\" href=\"http://web3auth.io/\" rel=\"noreferrer\">\n          Web3Auth\n        </a>{\" \"}\n        & ReactJS Example\n      </h1>\n\n      <div className=\"grid\">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className=\"footer\">\n        <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source code {\"  \"}\n          <img className=\"logo\" src=\"/images/github-logo.png\" alt=\"github-logo\" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n",
    "web3auth/nextjs/custom-auth/App.tsx": "import { ADAPTER_EVENTS, SafeEventEmitterProvider, WALLET_ADAPTERS } from \"@web3auth/base\";\nimport type { Web3AuthCore } from \"@web3auth/core\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\n// REPLACE-web3authChainRpcImport-\n\nfunction CustomAuth() {\n  const [web3AuthInstance, setWeb3AuthInstance] = useState<Web3AuthCore | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n  const clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const { Web3AuthCore } = await import(\"@web3auth/core\");\n        const { OpenloginAdapter } = await import(\"@web3auth/openlogin-adapter\");\n\n        // REPLACE-const web3AuthCoreCtorParams = {};-\n\n        const web3AuthInstance = new Web3AuthCore(web3AuthCoreCtorParams);\n\n        subscribeAuthEvents(web3AuthInstance);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        web3AuthInstance.configureAdapter(openloginAdapter);\n        setWeb3AuthInstance(web3AuthInstance);\n        await web3AuthInstance.init();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3AuthInstance: Web3AuthCore) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3AuthInstance.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log(\"Yeah!, you are successfully logged in\", data);\n        setProvider(web3AuthInstance.provider);\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log(\"connecting\");\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log(\"disconnected\");\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error(\"some error or user has cancelled login request\", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3AuthInstance) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n\n    // REPLACE-const web3AuthConnect = {};-\n\n    setProvider(web3authProvider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3AuthInstance) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const user = await web3AuthInstance.getUserInfo();\n    console.log(\"User info\", user);\n  };\n\n  const logout = async () => {\n    if (!web3AuthInstance) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    await web3AuthInstance.logout();\n    setProvider(null);\n  };\n\n  const onGetAccounts = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const userAccount = await rpc.getAccounts();\n    console.log(\"User account\", userAccount);\n  };\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className=\"card\">\n        Get User Info\n      </button>\n      <button onClick={onGetAccounts} className=\"card\">\n        Get Accounts\n      </button>\n      <button onClick={logout} className=\"card\">\n        Log Out\n      </button>\n    </>\n  );\n\n  const unloggedInView = (\n    <>\n      <button onClick={() => login()} className=\"card\">\n        Google Login\n      </button>\n    </>\n  );\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">\n        <a target=\"_blank\" href=\"http://web3auth.io/\" rel=\"noreferrer\">\n          Web3Auth\n        </a>{\" \"}\n        & ReactJS Example\n      </h1>\n\n      <div className=\"grid\">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className=\"footer\">\n        <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source code {\"  \"}\n          <img className=\"logo\" src=\"/images/github-logo.png\" alt=\"github-logo\" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default CustomAuth;\n",
    "web3auth/nextjs/custom-auth/package.json": "{\n  \"name\": \"react-test\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@web3auth/base\": \"^0.9.0\",\n    \"@web3auth/core\": \"^0.9.0\",\n    \"@web3auth/openlogin-adapter\": \"^0.9.0\",\n    \"@web3auth/solana-provider\": \"^0.9.0\",\n    \"firebase\": \"^9.6.8\",\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\",\n    \"web3\": \"^1.7.0\",\n    \"@solana/web3.js\": \"^1.36.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-app-rewired start\",\n    \"build\": \"react-app-rewired build\",\n    \"lint\": \"eslint --fix 'src/**/*.ts' 'src/**/*.tsx'\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^16.11.22\",\n    \"@types/react\": \"^17.0.39\",\n    \"@types/react-dom\": \"^17.0.11\",\n    \"assert\": \"^2.0.0\",\n    \"buffer\": \"^6.0.3\",\n    \"crypto-browserify\": \"^3.12.0\",\n    \"https-browserify\": \"^1.0.0\",\n    \"os-browserify\": \"^0.3.0\",\n    \"process\": \"^0.11.10\",\n    \"react-app-rewired\": \"^2.2.1\",\n    \"react-scripts\": \"5.0.0\",\n    \"stream-browserify\": \"^3.0.0\",\n    \"stream-http\": \"^3.2.0\",\n    \"typescript\": \"^4.5.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n",
    "web3auth/nextjs/package.json": "{\n  \"name\": \"react-test\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@web3auth/base\": \"^0.7.0\",\n    \"@web3auth/web3auth\": \"^0.7.0\",\n    \"@web3auth/solana-provider\": \"^0.7.0\",\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\",\n    \"web3\": \"^1.7.0\",\n    \"@solana/web3.js\": \"^1.36.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-app-rewired start\",\n    \"build\": \"react-app-rewired build\",\n    \"lint\": \"eslint --fix 'src/**/*.ts' 'src/**/*.tsx'\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^16.11.22\",\n    \"@types/react\": \"^17.0.39\",\n    \"@types/react-dom\": \"^17.0.11\",\n    \"assert\": \"^2.0.0\",\n    \"buffer\": \"^6.0.3\",\n    \"crypto-browserify\": \"^3.12.0\",\n    \"https-browserify\": \"^1.0.0\",\n    \"os-browserify\": \"^0.3.0\",\n    \"process\": \"^0.11.10\",\n    \"react-app-rewired\": \"^2.2.1\",\n    \"react-scripts\": \"5.0.0\",\n    \"stream-browserify\": \"^3.0.0\",\n    \"stream-http\": \"^3.2.0\",\n    \"typescript\": \"^4.5.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n",
    "web3auth/nextjs/provider-ethereum.ts": "import { SafeEventEmitterProvider } from \"@web3auth/base\";\nimport Web3 from \"web3\";\n\nexport const getAccounts = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    console.log(\"Eth accounts\", accounts);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const getBalance = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    const balance = await web3.eth.getBalance(accounts[0]);\n    console.log(\"Eth balance\", balance);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const signMessage = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const pubKey = (await provider.request({\n      method: \"eth_accounts\",\n    })) as string[];\n    const web3 = new Web3(provider as any);\n    const message =\n      \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\";\n    (web3.currentProvider as any)?.send(\n      {\n        method: \"eth_sign\",\n        params: [pubKey[0], message],\n        from: pubKey[0],\n      },\n      (err: Error, result: any) => {\n        if (err) {\n          return console.log(err);\n        }\n        console.log(\"Eth sign message => true\", result);\n      }\n    );\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\nexport const signTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    // only supported with social logins (openlogin adapter)\n    const txRes = await web3.eth.signTransaction({\n      from: accounts[0],\n      to: accounts[0],\n      value: web3.utils.toWei(\"0.01\"),\n    });\n    console.log(\"txRes\", txRes);\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\nexport const sendTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    const txRes = await web3.eth.sendTransaction({\n      from: accounts[0],\n      to: accounts[0],\n      value: web3.utils.toWei(\"0.01\"),\n    });\n    console.log(\"txRes\", txRes);\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n",
    "web3auth/nextjs/provider-solana.ts": "import {\n  Connection,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  Transaction\n} from \"@solana/web3.js\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { SolanaWallet } from \"@web3auth/solana-provider\";\n\nconst getConnection = async (\n  provider: SafeEventEmitterProvider\n): Promise<Connection> => {\n  const solanaWallet = new SolanaWallet(provider);\n  const connectionConfig = await solanaWallet.request<CustomChainConfig>({\n    method: \"solana_provider_config\",\n    params: [],\n  });\n  const conn = new Connection(connectionConfig.rpcTarget);\n  return conn;\n};\n\nexport const getAccounts = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const acc = await solanaWallet.requestAccounts();\n    console.log(\"Solana accounts\", acc);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const getBalance = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const conn = await getConnection(provider);\n    const accounts = await solanaWallet.requestAccounts();\n    const balance = await conn.getBalance(new PublicKey(accounts[0]));\n    console.log(\"Solana balance\", balance);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const signMessage = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const msg = Buffer.from(\"Test Signing Message \", \"utf8\");\n    const res = await solanaWallet.signMessage(msg);\n    console.log(\"Solana sign message\", res);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const signTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const conn = await getConnection(provider);\n    const solWeb3 = new SolanaWallet(provider);\n    const pubKey = await solWeb3.requestAccounts();\n    const blockhash = (await conn.getRecentBlockhash(\"finalized\")).blockhash;\n    console.log(blockhash);\n    const TransactionInstruction = SystemProgram.transfer({\n      fromPubkey: new PublicKey(pubKey[0]),\n      toPubkey: new PublicKey(pubKey[0]),\n      lamports: 0.01 * LAMPORTS_PER_SOL,\n    });\n    const transaction = new Transaction({\n      recentBlockhash: blockhash,\n      feePayer: new PublicKey(pubKey[0]),\n    }).add(TransactionInstruction);\n    const signedTx = await solWeb3.signTransaction(transaction);\n    signedTx.serialize();\n    console.log(\"Signature\", signedTx);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const sendTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const conn = await getConnection(provider);\n    const solWeb3 = new SolanaWallet(provider);\n    const pubKey = await solWeb3.requestAccounts();\n    const blockhash = (await conn.getRecentBlockhash(\"finalized\")).blockhash;\n    const TransactionInstruction = SystemProgram.transfer({\n      fromPubkey: new PublicKey(pubKey[0]),\n      toPubkey: new PublicKey(pubKey[0]),\n      lamports: 0.01 * LAMPORTS_PER_SOL,\n    });\n    const transaction = new Transaction({\n      recentBlockhash: blockhash,\n      feePayer: new PublicKey(pubKey[0]),\n    }).add(TransactionInstruction);\n    const signature = await solWeb3.signAndSendTransaction(transaction);\n    console.log(\"Signature\", signature);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n",
    "web3auth/react-starkex/App.css": ".container {\n  width: 60%;\n  margin: auto;\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.title {\n  line-height: 1.15;\n  font-size: 3rem;\n  text-align: center;\n  margin: 50px;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.card {\n  margin: 0.5rem;\n  padding: 0.7rem;\n  text-align: center;\n  color: #0070f3;\n  background-color: #fafafa;\n  text-decoration: none;\n  border: 1px solid #0070f3;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  width: 100%;\n}\n\n.card:hover,\n.card:focus,\n.card:active {\n  cursor: pointer;\n  background-color: #f1f1f1;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n\n@media (max-width: 1200px) {\n  .container {\n    width: 100%;\n  }\n}\n",
    "web3auth/react-starkex/App.tsx": "import { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { Web3Auth } from \"@web3auth/web3auth\";\nimport { OpenloginAdapter } from \"@web3auth/openlogin-adapter\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n\nfunction App() {\n  const [web3auth, setWeb3auth] = useState<Web3Auth | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthInitParams = {};-\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        const web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n        web3auth.configureAdapter(openloginAdapter);\n        subscribeAuthEvents(web3auth);\n        setWeb3auth(web3auth);\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3auth: Web3Auth) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3auth.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log(\"Yeah!, you are successfully logged in\", data);\n        setProvider(web3auth.provider);\n      });\n\n      web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log(\"connecting\");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log(\"disconnected\");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error(\"some error or user has cancelled login request\", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const provider = await web3auth.connect();\n    setProvider(provider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const user = await web3auth.getUserInfo();\n    uiConsole(user);\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    await web3auth.logout();\n    setProvider(null);\n  };\n\n  const onGetStarkHDAccount = async () => {\n    await getStarkAccount();\n  };\n\n  const onMintRequest = async () => {\n    await getMintRequest();\n  };\n\n  const onDepositRequest = async () => {\n    await getDepositRequest();\n  };\n\n  const onWithdrawalRequest = async () => {\n    await getWithdrawalRequest();\n  };\n\n  function uiConsole(...args: any[]): void {\n    const el = document.querySelector(\"#console>p\");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className=\"card\">\n        Get User Info\n      </button>\n      <button onClick={onGetStarkHDAccount} className=\"card\">\n        Get Stark Accounts\n      </button>\n      <button onClick={onMintRequest} className=\"card\">\n        Mint Request\n      </button>\n      <button onClick={onDepositRequest} className=\"card\">\n        Deposit Request\n      </button>\n      <button onClick={onWithdrawalRequest} className=\"card\">\n        Withdraw Request\n      </button>\n      <button onClick={logout} className=\"card\">\n        Log Out\n      </button>\n\n      <div id=\"console\" style={{ whiteSpace: \"pre-line\" }}>\n        <p style={{ whiteSpace: \"pre-line\" }}></p>\n      </div>\n    </>\n  );\n\n  const unloggedInView = (\n    <button onClick={login} className=\"card\">\n      Login\n    </button>\n  );\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">\n        <a target=\"_blank\" href=\"http://web3auth.io/\" rel=\"noreferrer\">\n          Web3Auth\n        </a>{\" \"}\n        & ReactJS Example\n      </h1>\n\n      <div className=\"grid\">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className=\"footer\">\n        <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source code {\"  \"}\n          <img className=\"logo\" src=\"/images/github-logo.png\" alt=\"github-logo\" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n",
    "web3auth/react-starkex/package.json": "{\n  \"name\": \"react-test\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@web3auth/base\": \"^0.7.0\",\n    \"@web3auth/web3auth\": \"^0.7.0\",\n    \"@web3auth/openlogin-adapter\": \"^0.6.3\",\n    \"@starkware-industries/starkex-js\": \"0.0.6\",\n    \"@toruslabs/starkware-crypto\": \"^1.1.0\",\n    \"bn.js\": \"^5.2.0\",\n    \"elliptic\": \"^6.5.4\",\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-app-rewired start\",\n    \"build\": \"react-app-rewired build\",\n    \"lint\": \"eslint --fix 'src/**/*.ts' 'src/**/*.tsx'\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^16.11.22\",\n    \"@types/react\": \"^17.0.39\",\n    \"@types/react-dom\": \"^17.0.11\",\n    \"assert\": \"^2.0.0\",\n    \"buffer\": \"^6.0.3\",\n    \"crypto-browserify\": \"^3.12.0\",\n    \"https-browserify\": \"^1.0.0\",\n    \"os-browserify\": \"^0.3.0\",\n    \"process\": \"^0.11.10\",\n    \"react-app-rewired\": \"^2.2.1\",\n    \"react-scripts\": \"5.0.0\",\n    \"stream-browserify\": \"^3.0.0\",\n    \"stream-http\": \"^3.2.0\",\n    \"typescript\": \"^4.5.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n",
    "web3auth/react-starkex/provider-ethereum.ts": "import { SafeEventEmitterProvider } from \"@web3auth/base\";\nimport Web3 from \"web3\";\n\nexport const getAccounts = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    console.log(\"Eth accounts\", accounts);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const getBalance = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    const balance = await web3.eth.getBalance(accounts[0]);\n    console.log(\"Eth balance\", balance);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const signMessage = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const pubKey = (await provider.request({\n      method: \"eth_accounts\",\n    })) as string[];\n    const web3 = new Web3(provider as any);\n    const message =\n      \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\";\n    (web3.currentProvider as any)?.send(\n      {\n        method: \"eth_sign\",\n        params: [pubKey[0], message],\n        from: pubKey[0],\n      },\n      (err: Error, result: any) => {\n        if (err) {\n          return console.log(err);\n        }\n        console.log(\"Eth sign message => true\", result);\n      }\n    );\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\nexport const signTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    // only supported with social logins (openlogin adapter)\n    const txRes = await web3.eth.signTransaction({\n      from: accounts[0],\n      to: accounts[0],\n      value: web3.utils.toWei(\"0.01\"),\n    });\n    console.log(\"txRes\", txRes);\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n\nexport const sendTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    const txRes = await web3.eth.sendTransaction({\n      from: accounts[0],\n      to: accounts[0],\n      value: web3.utils.toWei(\"0.01\"),\n    });\n    console.log(\"txRes\", txRes);\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n};\n",
    "web3auth/react-starkex/provider-solana.ts": "import {\n  Connection,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  Transaction\n} from \"@solana/web3.js\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { SolanaWallet } from \"@web3auth/solana-provider\";\n\nconst getConnection = async (\n  provider: SafeEventEmitterProvider\n): Promise<Connection> => {\n  const solanaWallet = new SolanaWallet(provider);\n  const connectionConfig = await solanaWallet.request<CustomChainConfig>({\n    method: \"solana_provider_config\",\n    params: [],\n  });\n  const conn = new Connection(connectionConfig.rpcTarget);\n  return conn;\n};\n\nexport const getAccounts = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const acc = await solanaWallet.requestAccounts();\n    console.log(\"Solana accounts\", acc);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const getBalance = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const conn = await getConnection(provider);\n    const accounts = await solanaWallet.requestAccounts();\n    const balance = await conn.getBalance(new PublicKey(accounts[0]));\n    console.log(\"Solana balance\", balance);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const signMessage = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const msg = Buffer.from(\"Test Signing Message \", \"utf8\");\n    const res = await solanaWallet.signMessage(msg);\n    console.log(\"Solana sign message\", res);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const signTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const conn = await getConnection(provider);\n    const solWeb3 = new SolanaWallet(provider);\n    const pubKey = await solWeb3.requestAccounts();\n    const blockhash = (await conn.getRecentBlockhash(\"finalized\")).blockhash;\n    console.log(blockhash);\n    const TransactionInstruction = SystemProgram.transfer({\n      fromPubkey: new PublicKey(pubKey[0]),\n      toPubkey: new PublicKey(pubKey[0]),\n      lamports: 0.01 * LAMPORTS_PER_SOL,\n    });\n    const transaction = new Transaction({\n      recentBlockhash: blockhash,\n      feePayer: new PublicKey(pubKey[0]),\n    }).add(TransactionInstruction);\n    const signedTx = await solWeb3.signTransaction(transaction);\n    signedTx.serialize();\n    console.log(\"Signature\", signedTx);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n\nexport const sendTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const conn = await getConnection(provider);\n    const solWeb3 = new SolanaWallet(provider);\n    const pubKey = await solWeb3.requestAccounts();\n    const blockhash = (await conn.getRecentBlockhash(\"finalized\")).blockhash;\n    const TransactionInstruction = SystemProgram.transfer({\n      fromPubkey: new PublicKey(pubKey[0]),\n      toPubkey: new PublicKey(pubKey[0]),\n      lamports: 0.01 * LAMPORTS_PER_SOL,\n    });\n    const transaction = new Transaction({\n      recentBlockhash: blockhash,\n      feePayer: new PublicKey(pubKey[0]),\n    }).add(TransactionInstruction);\n    const signature = await solWeb3.signAndSendTransaction(transaction);\n    console.log(\"Signature\", signature);\n  } catch (error) {\n    console.error(\"Error\", error);\n  }\n};\n",
    "web3auth/react-starknet/App.tsx": "import { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { Web3Auth } from \"@web3auth/web3auth\";\nimport { OpenloginAdapter } from \"@web3auth/openlogin-adapter\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n\nfunction App() {\n  const [web3auth, setWeb3auth] = useState<Web3Auth | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthInitParams = {};-\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        const web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n        web3auth.configureAdapter(openloginAdapter);\n        subscribeAuthEvents(web3auth);\n        setWeb3auth(web3auth);\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3auth: Web3Auth) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3auth.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log(\"Yeah!, you are successfully logged in\", data);\n        setProvider(web3auth.provider);\n      });\n\n      web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log(\"connecting\");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log(\"disconnected\");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error(\"some error or user has cancelled login request\", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const provider = await web3auth.connect();\n    setProvider(provider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const user = await web3auth.getUserInfo();\n    uiConsole(user);\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    await web3auth.logout();\n    setProvider(null);\n  };\n\n  const onGetStarkHDAccount = async () => {\n    await getStarkHDAccount();\n  };\n\n  const onDeployAccount = async () => {\n    await deployAccount();\n  };\n\n  function uiConsole(...args: any[]): void {\n    const el = document.querySelector(\"#console>p\");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className=\"card\">\n        Get User Info\n      </button>\n      <button onClick={onGetStarkHDAccount} className=\"card\">\n        Get Stark Accounts\n      </button>\n      <button onClick={onDeployAccount} className=\"card\">\n        Deploy Account\n      </button>\n      <button onClick={logout} className=\"card\">\n        Log Out\n      </button>\n\n      <div id=\"console\" style={{ whiteSpace: \"pre-line\" }}>\n        <p style={{ whiteSpace: \"pre-line\" }}></p>\n      </div>\n    </>\n  );\n\n  const unloggedInView = (\n    <button onClick={login} className=\"card\">\n      Login\n    </button>\n  );\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">\n        <a target=\"_blank\" href=\"http://web3auth.io/\" rel=\"noreferrer\">\n          Web3Auth\n        </a>{\" \"}\n        & ReactJS Example\n      </h1>\n\n      <div className=\"grid\">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className=\"footer\">\n        <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source code {\"  \"}\n          <img className=\"logo\" src=\"/images/github-logo.png\" alt=\"github-logo\" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n",
    "web3auth/react-starknet/package.json": "{\n  \"name\": \"react-test\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@web3auth/base\": \"^0.7.0\",\n    \"@web3auth/web3auth\": \"^0.7.0\",\n    \"@toruslabs/openlogin-starkkey\": \"^1.7.0\",\n    \"starknet\": \"^1.5.4\",\n    \"bn.js\": \"^5.2.0\",\n    \"elliptic\": \"^6.5.4\",\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\",\n    \"web3\": \"^1.7.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-app-rewired start\",\n    \"build\": \"react-app-rewired build\",\n    \"lint\": \"eslint --fix 'src/**/*.ts' 'src/**/*.tsx'\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^16.11.22\",\n    \"@types/react\": \"^17.0.39\",\n    \"@types/react-dom\": \"^17.0.11\",\n    \"assert\": \"^2.0.0\",\n    \"buffer\": \"^6.0.3\",\n    \"crypto-browserify\": \"^3.12.0\",\n    \"https-browserify\": \"^1.0.0\",\n    \"os-browserify\": \"^0.3.0\",\n    \"process\": \"^0.11.10\",\n    \"react-app-rewired\": \"^2.2.1\",\n    \"react-scripts\": \"5.0.0\",\n    \"stream-browserify\": \"^3.0.0\",\n    \"stream-http\": \"^3.2.0\",\n    \"typescript\": \"^4.5.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n",
    "web3auth/react/App.css": ".container {\n  width: 60%;\n  margin: auto;\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.title {\n  line-height: 1.15;\n  font-size: 3rem;\n  text-align: center;\n  margin: 50px;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.card {\n  margin: 0.5rem;\n  padding: 0.7rem;\n  text-align: center;\n  color: #0070f3;\n  background-color: #fafafa;\n  text-decoration: none;\n  border: 1px solid #0070f3;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  width: 100%;\n}\n\n.card:hover,\n.card:focus,\n.card:active {\n  cursor: pointer;\n  background-color: #f1f1f1;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n\n@media (max-width: 1200px) {\n  .container {\n    width: 100%;\n  }\n}\n",
    "web3auth/react/App.tsx": "import { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { Web3Auth } from \"@web3auth/web3auth\";\nimport { OpenloginAdapter } from \"@web3auth/openlogin-adapter\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n\nfunction App() {\n  const [web3auth, setWeb3auth] = useState<Web3Auth | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthInitParams = {};-\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        const web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n        web3auth.configureAdapter(openloginAdapter);\n        subscribeAuthEvents(web3auth);\n        setWeb3auth(web3auth);\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3auth: Web3Auth) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3auth.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log(\"Yeah!, you are successfully logged in\", data);\n        setProvider(web3auth.provider);\n      });\n\n      web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log(\"connecting\");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log(\"disconnected\");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error(\"some error or user has cancelled login request\", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const provider = await web3auth.connect();\n    setProvider(provider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const user = await web3auth.getUserInfo();\n    uiConsole(user);\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    await web3auth.logout();\n    setProvider(null);\n  };\n\n  const getAccounts = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const userAccount = await rpc.getAccounts();\n    uiConsole(userAccount);\n  };\n\n  const getBalance = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const balance = await rpc.getBalance();\n    uiConsole(balance);\n  };\n\n  const signMessage = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signMessage();\n    uiConsole(result);\n  };\n\n  const signTransaction = async () => {\n    if (!provider) {\n      uiConsole(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signTransaction();\n    uiConsole(result);\n  };\n\n  const sendTransaction = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signAndSendTransaction();\n    uiConsole(result);\n  };\n\n  function uiConsole(...args: any[]): void {\n    const el = document.querySelector(\"#console>p\");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className=\"card\">\n        Get User Info\n      </button>\n      <button onClick={getAccounts} className=\"card\">\n        Get Accounts\n      </button>\n      <button onClick={getBalance} className=\"card\">\n        Get Balance\n      </button>\n      <button onClick={signMessage} className=\"card\">\n        Sign Message\n      </button>\n      <button onClick={signTransaction} className=\"card\">\n        Sign Transaction\n      </button>\n      <button onClick={sendTransaction} className=\"card\">\n        Send Transaction\n      </button>\n      <button onClick={logout} className=\"card\">\n        Log Out\n      </button>\n\n      <div id=\"console\" style={{ whiteSpace: \"pre-line\" }}>\n        <p style={{ whiteSpace: \"pre-line\" }}></p>\n      </div>\n    </>\n  );\n\n  const unloggedInView = (\n    <button onClick={login} className=\"card\">\n      Login\n    </button>\n  );\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">\n        <a target=\"_blank\" href=\"http://web3auth.io/\" rel=\"noreferrer\">\n          Web3Auth\n        </a>{\" \"}\n        & ReactJS Example\n      </h1>\n\n      <div className=\"grid\">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className=\"footer\">\n        <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source code {\"  \"}\n          <img className=\"logo\" src=\"/images/github-logo.png\" alt=\"github-logo\" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n",
    "web3auth/react/custom/App.tsx": "import { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider, WALLET_ADAPTERS } from \"@web3auth/base\";\nimport { Web3AuthCore } from \"@web3auth/core\";\nimport { OpenloginAdapter } from \"@web3auth/openlogin-adapter\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n\nfunction CustomUI() {\n  const [web3auth, setWeb3auth] = useState<Web3AuthCore | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthCoreCtorParams = {};-\n\n        const web3auth = new Web3AuthCore(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents(web3auth);\n        setWeb3auth(web3auth);\n        await web3auth.init();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3auth: Web3AuthCore) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3auth.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log(\"Yeah!, you are successfully logged in\", data);\n        setProvider(web3auth.provider);\n      });\n\n      web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log(\"connecting\");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log(\"disconnected\");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error(\"some error or user has cancelled login request\", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n\n    // REPLACE-const web3AuthConnect = {};-\n\n    setProvider(web3authProvider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    const user = await web3auth.getUserInfo();\n    console.log(\"User info\", user);\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    await web3auth.logout();\n    setProvider(null);\n  };\n\n  const getAccounts = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const userAccount = await rpc.getAccounts();\n    uiConsole(userAccount);\n  };\n\n  const getBalance = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const balance = await rpc.getBalance();\n    uiConsole(balance);\n  };\n\n  const signMessage = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signMessage();\n    uiConsole(result);\n  };\n\n  const signTransaction = async () => {\n    if (!provider) {\n      uiConsole(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signTransaction();\n    uiConsole(result);\n  };\n\n  const sendTransaction = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signAndSendTransaction();\n    uiConsole(result);\n  };\n\n  function uiConsole(...args: any[]): void {\n    const el = document.querySelector(\"#console>p\");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className=\"card\">\n        Get User Info\n      </button>\n      <button onClick={getAccounts} className=\"card\">\n        Get Accounts\n      </button>\n      <button onClick={getBalance} className=\"card\">\n        Get Balance\n      </button>\n      <button onClick={signMessage} className=\"card\">\n        Sign Message\n      </button>\n      <button onClick={signTransaction} className=\"card\">\n        Sign Transaction\n      </button>\n      <button onClick={sendTransaction} className=\"card\">\n        Send Transaction\n      </button>\n      <button onClick={logout} className=\"card\">\n        Log Out\n      </button>\n\n      <div id=\"console\" style={{ whiteSpace: \"pre-line\" }}>\n        <p style={{ whiteSpace: \"pre-line\" }}></p>\n      </div>\n    </>\n  );\n\n  const unloggedInView = (\n    <>\n      <button onClick={login} className=\"card\">\n        Google Login\n      </button>\n    </>\n  );\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">\n        <a target=\"_blank\" href=\"http://web3auth.io/\" rel=\"noreferrer\">\n          Web3Auth\n        </a>{\" \"}\n        & ReactJS Example\n      </h1>\n\n      <div className=\"grid\">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className=\"footer\">\n        <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source code {\"  \"}\n          <img className=\"logo\" src=\"/images/github-logo.png\" alt=\"github-logo\" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default CustomUI;\n",
    "web3auth/react/custom/package.json": "{\n  \"name\": \"react-test\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@web3auth/base\": \"^0.7.0\",\n    \"@web3auth/core\": \"^0.7.0\",\n    \"@web3auth/openlogin-adapter\": \"^0.7.0\",\n    \"@web3auth/solana-provider\": \"^0.7.0\",\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\",\n    \"web3\": \"^1.7.0\",\n    \"@solana/web3.js\": \"^1.36.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-app-rewired start\",\n    \"build\": \"react-app-rewired build\",\n    \"lint\": \"eslint --fix 'src/**/*.ts' 'src/**/*.tsx'\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^16.11.22\",\n    \"@types/react\": \"^17.0.39\",\n    \"@types/react-dom\": \"^17.0.11\",\n    \"assert\": \"^2.0.0\",\n    \"buffer\": \"^6.0.3\",\n    \"crypto-browserify\": \"^3.12.0\",\n    \"https-browserify\": \"^1.0.0\",\n    \"os-browserify\": \"^0.3.0\",\n    \"process\": \"^0.11.10\",\n    \"react-app-rewired\": \"^2.2.1\",\n    \"react-scripts\": \"5.0.0\",\n    \"stream-browserify\": \"^3.0.0\",\n    \"stream-http\": \"^3.2.0\",\n    \"typescript\": \"^4.5.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n",
    "web3auth/react/package.json": "{\n  \"name\": \"react-test\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@web3auth/base\": \"^0.7.0\",\n    \"@web3auth/web3auth\": \"^0.7.0\",\n    \"@web3auth/openlogin-adapter\": \"^0.7.0\",\n    \"@web3auth/solana-provider\": \"^0.7.0\",\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\",\n    \"web3\": \"^1.7.0\",\n    \"@solana/web3.js\": \"^1.36.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-app-rewired start\",\n    \"build\": \"react-app-rewired build\",\n    \"lint\": \"eslint --fix 'src/**/*.ts' 'src/**/*.tsx'\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^16.11.22\",\n    \"@types/react\": \"^17.0.39\",\n    \"@types/react-dom\": \"^17.0.11\",\n    \"assert\": \"^2.0.0\",\n    \"buffer\": \"^6.0.3\",\n    \"crypto-browserify\": \"^3.12.0\",\n    \"https-browserify\": \"^1.0.0\",\n    \"os-browserify\": \"^0.3.0\",\n    \"process\": \"^0.11.10\",\n    \"react-app-rewired\": \"^2.2.1\",\n    \"react-scripts\": \"5.0.0\",\n    \"stream-browserify\": \"^3.0.0\",\n    \"stream-http\": \"^3.2.0\",\n    \"typescript\": \"^4.5.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n",
    "web3auth/vue-starkex/Home.vue": "<template>\n  <div id=\"app\">\n    <h2>Web3Auth X Vue.js</h2>\n    <section\n      :style=\"{\n        fontSize: '12px',\n      }\"\n    >\n      <button class=\"rpcBtn\" v-if=\"!provider\" @click=\"connect()\" style=\"cursor: pointer\">Connect</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"logout()\" style=\"cursor: pointer\">Logout</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"getUserInfo()\" style=\"cursor: pointer\">Get User Info</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"onGetStarkHDAccount()\" style=\"cursor: pointer\">Get Stark Accounts</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"onMintRequest()\" style=\"cursor: pointer\">Mint Request</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"onDepositRequest()\" style=\"cursor: pointer\">Deposit Request</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"onWithdrawalRequest()\" style=\"cursor: pointer\">Withdraw Request</button>\n    </section>\n    <div id=\"console\" style=\"white-space: pre-line\">\n      <p style=\"white-space: pre-line\"></p>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ADAPTER_STATUS, CONNECTED_EVENT_DATA, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { LOGIN_MODAL_EVENTS } from \"@web3auth/ui\";\nimport { Web3Auth } from \"@web3auth/web3auth\";\nimport { ref, onMounted } from \"vue\";\n// REPLACE-web3authChainRpcImport-\n\nexport default {\n  name: \"Home\",\n  props: {\n    msg: String,\n  },\n  setup() {\n    const loading = ref<boolean>(false);\n    const loginButtonStatus = ref<string>(\"\");\n    const connecting = ref<boolean>(false);\n    const provider = ref<SafeEventEmitterProvider | null>(null);\n    const clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n\n    // REPLACE-const web3AuthInitParams = {};-\n\n    // REPLACE-const web3AuthCtorParams = {};-\n\n    let web3auth = new Web3Auth(web3AuthCtorParams);\n    onMounted(async () => {\n      try {\n        loading.value = true;\n\n        web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents();\n\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.log(\"error\", error);\n        uiConsole(\"error\", error);\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    function subscribeAuthEvents() {\n      web3auth.on(ADAPTER_STATUS.CONNECTED, async (data: CONNECTED_EVENT_DATA) => {\n        uiConsole(\"connected to wallet\", data);\n        provider.value = web3auth.provider;\n      });\n      web3auth.on(ADAPTER_STATUS.CONNECTING, () => {\n        uiConsole(\"connecting\");\n        connecting.value = true;\n      });\n      web3auth.on(ADAPTER_STATUS.DISCONNECTED, () => {\n        uiConsole(\"disconnected\");\n        provider.value = null;\n      });\n      web3auth.on(ADAPTER_STATUS.ERRORED, (error) => {\n        uiConsole(\"errored\", error);\n      });\n      web3auth.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, (isVisible: boolean) => {\n        connecting.value = isVisible;\n      });\n    }\n    async function connect() {\n      try {\n        const web3authProvider = await web3auth.connect();\n        provider.value = web3authProvider;\n      } catch (error) {\n        console.error(error);\n        uiConsole(\"error\", error);\n      }\n    }\n    async function logout() {\n      await web3auth.logout();\n      provider.value = null;\n    }\n    async function getUserInfo() {\n      const userInfo = await web3auth.getUserInfo();\n      uiConsole(userInfo);\n    }\n\n    const onGetStarkHDAccount = async () => {\n      await getStarkHDAccount();\n    };\n\n    const onMintRequest = async () => {\n      await getMintRequest();\n    };\n\n    const onDepositRequest = async () => {\n      await getDepositRequest();\n    };\n\n    const onWithdrawalRequest = async () => {\n      await getWithdrawalRequest();\n    };\n\n    function uiConsole(...args: any[]): void {\n      const el = document.querySelector(\"#console>p\");\n      if (el) {\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\n      }\n    }\n    return {\n      loading,\n      loginButtonStatus,\n      connecting,\n      provider,\n      web3auth,\n      connect,\n      logout,\n      subscribeAuthEvents,\n      getUserInfo,\n      getStarkHDAccount,\n      getMintRequest,\n      getDepositRequest,\n      getWithdrawalRequest,\n    };\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n",
    "web3auth/vue-starkex/package.json": "{\n    \"name\": \"vue3-app\",\n    \"version\": \"0.1.0\",\n    \"private\": true,\n    \"scripts\": {\n        \"serve\": \"vue-cli-service serve\",\n        \"build\": \"vue-cli-service build\",\n        \"lint\": \"vue-cli-service lint\"\n    },\n    \"dependencies\": {\n        \"@web3auth/base\": \"^0.7.0\",\n        \"@web3auth/web3auth\": \"^0.7.0\",\n        \"@web3auth/openlogin-adapter\": \"^0.6.3\",\n        \"@starkware-industries/starkex-js\": \"0.0.6\",\n        \"@toruslabs/starkware-crypto\": \"^1.1.0\",\n        \"bn.js\": \"^5.2.0\",\n        \"elliptic\": \"^6.5.4\",\n        \"core-js\": \"^3.6.5\",\n        \"vue\": \"^3.0.0\",\n        \"web3\": \"^1.7.0\"\n    },\n    \"devDependencies\": {\n        \"@typescript-eslint/eslint-plugin\": \"^4.18.0\",\n        \"@typescript-eslint/parser\": \"^4.18.0\",\n        \"@vue/cli-plugin-babel\": \"~4.5.15\",\n        \"@vue/cli-plugin-eslint\": \"~4.5.15\",\n        \"@vue/cli-plugin-typescript\": \"~4.5.15\",\n        \"@vue/cli-service\": \"~4.5.15\",\n        \"@vue/compiler-sfc\": \"^3.0.0\",\n        \"@vue/eslint-config-typescript\": \"^7.0.0\",\n        \"babel-eslint\": \"^10.1.0\",\n        \"eslint\": \"^6.7.2\",\n        \"eslint-plugin-vue\": \"^7.0.0\",\n        \"typescript\": \"~4.1.5\"\n    },\n    \"eslintConfig\": {\n        \"root\": true,\n        \"env\": {\n            \"node\": true\n        },\n        \"extends\": [\n            \"plugin:vue/vue3-essential\",\n            \"eslint:recommended\",\n            \"@vue/typescript\"\n        ],\n        \"parserOptions\": {\n            \"parser\": \"@typescript-eslint/parser\"\n        },\n        \"rules\": {}\n    },\n    \"browserslist\": [\n        \"> 1%\",\n        \"last 2 versions\",\n        \"not dead\"\n    ]\n}\n",
    "web3auth/vue-starknet/Home.vue": "<template>\n  <div id=\"app\">\n    <h2>Web3Auth X Vue.js</h2>\n    <section\n      :style=\"{\n        fontSize: '12px',\n      }\"\n    >\n      <button class=\"rpcBtn\" v-if=\"!provider\" @click=\"connect()\" style=\"cursor: pointer\">Connect</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"logout()\" style=\"cursor: pointer\">Logout</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"getUserInfo()\" style=\"cursor: pointer\">Get User Info</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"onGetStarkHDAccount()\" style=\"cursor: pointer\">Get Stark Accounts</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"onDeployAccount()\" style=\"cursor: pointer\">Deploy Account</button>\n    </section>\n    <div id=\"console\" style=\"white-space: pre-line\">\n      <p style=\"white-space: pre-line\"></p>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ADAPTER_STATUS, CONNECTED_EVENT_DATA, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { LOGIN_MODAL_EVENTS } from \"@web3auth/ui\";\nimport { Web3Auth } from \"@web3auth/web3auth\";\nimport { ref, onMounted } from \"vue\";\n// REPLACE-web3authChainRpcImport-\n\nexport default {\n  name: \"Home\",\n  props: {\n    msg: String,\n  },\n  setup() {\n    const loading = ref<boolean>(false);\n    const loginButtonStatus = ref<string>(\"\");\n    const connecting = ref<boolean>(false);\n    const provider = ref<SafeEventEmitterProvider | null>(null);\n    const clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n\n    // REPLACE-const web3AuthInitParams = {};-\n\n    // REPLACE-const web3AuthCtorParams = {};-\n\n    let web3auth = new Web3Auth(web3AuthCtorParams);\n    onMounted(async () => {\n      try {\n        loading.value = true;\n\n        web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents();\n\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.log(\"error\", error);\n        uiConsole(\"error\", error);\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    function subscribeAuthEvents() {\n      web3auth.on(ADAPTER_STATUS.CONNECTED, async (data: CONNECTED_EVENT_DATA) => {\n        uiConsole(\"connected to wallet\", data);\n        provider.value = web3auth.provider;\n      });\n      web3auth.on(ADAPTER_STATUS.CONNECTING, () => {\n        uiConsole(\"connecting\");\n        connecting.value = true;\n      });\n      web3auth.on(ADAPTER_STATUS.DISCONNECTED, () => {\n        uiConsole(\"disconnected\");\n        provider.value = null;\n      });\n      web3auth.on(ADAPTER_STATUS.ERRORED, (error) => {\n        uiConsole(\"errored\", error);\n      });\n      web3auth.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, (isVisible: boolean) => {\n        connecting.value = isVisible;\n      });\n    }\n    async function connect() {\n      try {\n        const web3authProvider = await web3auth.connect();\n        provider.value = web3authProvider;\n      } catch (error) {\n        console.error(error);\n        uiConsole(\"error\", error);\n      }\n    }\n    async function logout() {\n      await web3auth.logout();\n      provider.value = null;\n    }\n    async function getUserInfo() {\n      const userInfo = await web3auth.getUserInfo();\n      uiConsole(userInfo);\n    }\n\n    async function onGetStarkHDAccount() {\n      await getStarkHDAccount();\n    }\n\n    async function onDeployAccount() {\n      await deployAccount();\n    }\n\n    function uiConsole(...args: any[]): void {\n      const el = document.querySelector(\"#console>p\");\n      if (el) {\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\n      }\n    }\n    return {\n      loading,\n      loginButtonStatus,\n      connecting,\n      provider,\n      web3auth,\n      connect,\n      logout,\n      subscribeAuthEvents,\n      getUserInfo,\n      onGetStarkHDAccount,\n      onDeployAccount,\n    };\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n",
    "web3auth/vue-starknet/package.json": "{\n    \"name\": \"vue3-app\",\n    \"version\": \"0.1.0\",\n    \"private\": true,\n    \"scripts\": {\n        \"serve\": \"vue-cli-service serve\",\n        \"build\": \"vue-cli-service build\",\n        \"lint\": \"vue-cli-service lint\"\n    },\n    \"dependencies\": {\n        \"@web3auth/base\": \"^0.7.0\",\n        \"@web3auth/web3auth\": \"^0.7.0\",\n        \"@toruslabs/openlogin-starkkey\": \"^1.7.0\",\n        \"starknet\": \"^1.5.4\",\n        \"bn.js\": \"^5.2.0\",\n        \"elliptic\": \"^6.5.4\",\n        \"core-js\": \"^3.6.5\",\n        \"vue\": \"^3.0.0\",\n        \"web3\": \"^1.7.0\"\n    },\n    \"devDependencies\": {\n        \"@typescript-eslint/eslint-plugin\": \"^4.18.0\",\n        \"@typescript-eslint/parser\": \"^4.18.0\",\n        \"@vue/cli-plugin-babel\": \"~4.5.15\",\n        \"@vue/cli-plugin-eslint\": \"~4.5.15\",\n        \"@vue/cli-plugin-typescript\": \"~4.5.15\",\n        \"@vue/cli-service\": \"~4.5.15\",\n        \"@vue/compiler-sfc\": \"^3.0.0\",\n        \"@vue/eslint-config-typescript\": \"^7.0.0\",\n        \"babel-eslint\": \"^10.1.0\",\n        \"eslint\": \"^6.7.2\",\n        \"eslint-plugin-vue\": \"^7.0.0\",\n        \"typescript\": \"~4.1.5\"\n    },\n    \"eslintConfig\": {\n        \"root\": true,\n        \"env\": {\n            \"node\": true\n        },\n        \"extends\": [\n            \"plugin:vue/vue3-essential\",\n            \"eslint:recommended\",\n            \"@vue/typescript\"\n        ],\n        \"parserOptions\": {\n            \"parser\": \"@typescript-eslint/parser\"\n        },\n        \"rules\": {}\n    },\n    \"browserslist\": [\n        \"> 1%\",\n        \"last 2 versions\",\n        \"not dead\"\n    ]\n}\n",
    "web3auth/vue/App.vue": "<template>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\n  <Home msg=\"Welcome to Your Vue.js + TypeScript App\" />\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport Home from \"./components/Home.vue\";\n\nexport default defineComponent({\n  name: \"App\",\n  components: {\n    Home,\n  },\n});\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n",
    "web3auth/vue/Connect.ts": "// Start Connect function:\n// REPLACE-const web3AuthConnect = {};-\n// End Connect function:\n",
    "web3auth/vue/CustomLogin.vue": "<template>\n  <div id=\"app\">\n    <h2>Web3Auth X Vue.js</h2>\n    <section\n      :style=\"{\n        fontSize: '12px',\n      }\"\n    >\n      <button class=\"rpcBtn\" v-if=\"!provider && !loading\" @click=\"connect()\" style=\"cursor: pointer\">Login With Google</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"logout()\" style=\"cursor: pointer\">Logout</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"getUserInfo()\" style=\"cursor: pointer\">Get User Info</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"getUserAccount()\" style=\"cursor: pointer\">Get User Account</button>\n    </section>\n    <div id=\"console\" style=\"white-space: pre-line\">\n      <p style=\"white-space: pre-line\"></p>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ADAPTER_STATUS, CONNECTED_EVENT_DATA, SafeEventEmitterProvider, WALLET_ADAPTERS } from \"@web3auth/base\";\nimport { LOGIN_MODAL_EVENTS } from \"@web3auth/ui\";\nimport { Web3AuthCore } from \"@web3auth/core\";\nimport { ref, onMounted } from \"vue\";\n// REPLACE-web3authChainRpcImport-\n\nexport default {\n  name: \"Home\",\n  props: {\n    msg: String,\n  },\n  setup() {\n    const loading = ref<boolean>(false);\n    const loginButtonStatus = ref<string>(\"\");\n    const connecting = ref<boolean>(false);\n    const provider = ref<SafeEventEmitterProvider | null>(null);\n    const clientId = \"YOUR_CLIENT_ID\";\n\n    // REPLACE-const web3AuthCoreCtorParams = {};-\n\n    let web3auth = new Web3AuthCore(web3AuthCtorParams);\n\n    onMounted(async () => {\n      try {\n        loading.value = true;\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        web3auth = new Web3AuthCore(web3AuthCoreCtorParams);\n\n        web3auth.configureAdapter(openloginAdapter);\n        subscribeAuthEvents();\n        await web3auth.init();\n      } catch (error) {\n        console.log(\"error\", error);\n        uiConsole(\"error\", error);\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    function subscribeAuthEvents() {\n      web3auth.on(ADAPTER_STATUS.CONNECTED, async (data: CONNECTED_EVENT_DATA) => {\n        uiConsole(\"connected to wallet\", data);\n        provider.value = web3auth.provider;\n      });\n      web3auth.on(ADAPTER_STATUS.CONNECTING, () => {\n        uiConsole(\"connecting\");\n        connecting.value = true;\n      });\n      web3auth.on(ADAPTER_STATUS.DISCONNECTED, () => {\n        uiConsole(\"disconnected\");\n        provider.value = null;\n      });\n      web3auth.on(ADAPTER_STATUS.ERRORED, (error) => {\n        uiConsole(\"errored\", error);\n      });\n      web3auth.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, (isVisible: boolean) => {\n        connecting.value = isVisible;\n      });\n    }\n    async function connect() {\n      try {\n        // REPLACE-const web3AuthConnect = {};-\n\n        provider.value = web3authProvider;\n      } catch (error) {\n        console.error(error);\n        uiConsole(\"error\", error);\n      }\n    }\n    async function logout() {\n      await web3auth.logout();\n      provider.value = null;\n    }\n    async function getUserInfo() {\n      const userInfo = await web3auth.getUserInfo();\n      uiConsole(userInfo);\n    }\n    async function getUserAccount() {\n      if (!provider.value) {\n        throw new Error(\"provider is not set\");\n      }\n      const rpc = new RPC(provider.value);\n      const userAccount = await rpc.getAccounts();\n      uiConsole(userAccount);\n    }\n    function uiConsole(...args: any[]): void {\n      const el = document.querySelector(\"#console>p\");\n      if (el) {\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\n      }\n    }\n    return {\n      loading,\n      loginButtonStatus,\n      connecting,\n      provider,\n      web3auth,\n      connect,\n      logout,\n      subscribeAuthEvents,\n      getUserInfo,\n      getUserAccount,\n    };\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n",
    "web3auth/vue/Home.vue": "<template>\n  <div id=\"app\">\n    <h2>Web3Auth X Vue.js</h2>\n    <section\n      :style=\"{\n        fontSize: '12px',\n      }\"\n    >\n      <button class=\"rpcBtn\" v-if=\"!provider\" @click=\"connect()\" style=\"cursor: pointer\">Connect</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"logout()\" style=\"cursor: pointer\">Logout</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"getUserInfo()\" style=\"cursor: pointer\">Get User Info</button>\n      <button class=\"rpcBtn\" v-if=\"provider\" @click=\"getUserAccount()\" style=\"cursor: pointer\">Get User Account</button>\n    </section>\n    <div id=\"console\" style=\"white-space: pre-line\">\n      <p style=\"white-space: pre-line\"></p>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ADAPTER_STATUS, CONNECTED_EVENT_DATA, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { LOGIN_MODAL_EVENTS } from \"@web3auth/ui\";\nimport { Web3Auth } from \"@web3auth/web3auth\";\nimport { ref, onMounted } from \"vue\";\n// REPLACE-web3authChainRpcImport-\n\nexport default {\n  name: \"Home\",\n  props: {\n    msg: String,\n  },\n  setup() {\n    const loading = ref<boolean>(false);\n    const loginButtonStatus = ref<string>(\"\");\n    const connecting = ref<boolean>(false);\n    const provider = ref<SafeEventEmitterProvider | null>(null);\n    const clientId = \"YOUR_CLIENT_ID\"; // get from https://dashboard.web3auth.io\n\n    // REPLACE-const web3AuthInitParams = {};-\n\n    // REPLACE-const web3AuthCtorParams = {};-\n\n    let web3auth = new Web3Auth(web3AuthCtorParams);\n    onMounted(async () => {\n      try {\n        loading.value = true;\n\n        web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents();\n\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.log(\"error\", error);\n        uiConsole(\"error\", error);\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    function subscribeAuthEvents() {\n      web3auth.on(ADAPTER_STATUS.CONNECTED, async (data: CONNECTED_EVENT_DATA) => {\n        uiConsole(\"connected to wallet\", data);\n        provider.value = web3auth.provider;\n      });\n      web3auth.on(ADAPTER_STATUS.CONNECTING, () => {\n        uiConsole(\"connecting\");\n        connecting.value = true;\n      });\n      web3auth.on(ADAPTER_STATUS.DISCONNECTED, () => {\n        uiConsole(\"disconnected\");\n        provider.value = null;\n      });\n      web3auth.on(ADAPTER_STATUS.ERRORED, (error) => {\n        uiConsole(\"errored\", error);\n      });\n      web3auth.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, (isVisible: boolean) => {\n        connecting.value = isVisible;\n      });\n    }\n    async function connect() {\n      try {\n        const web3authProvider = await web3auth.connect();\n        provider.value = web3authProvider;\n      } catch (error) {\n        console.error(error);\n        uiConsole(\"error\", error);\n      }\n    }\n    async function logout() {\n      await web3auth.logout();\n      provider.value = null;\n    }\n    async function getUserInfo() {\n      const userInfo = await web3auth.getUserInfo();\n      uiConsole(userInfo);\n    }\n    async function getUserAccount() {\n      if (!provider.value) {\n        throw new Error(\"provider is not set\");\n      }\n      const rpc = new RPC(provider.value);\n      const userAccount = await rpc.getAccounts();\n      uiConsole(userAccount);\n    }\n    function uiConsole(...args: any[]): void {\n      const el = document.querySelector(\"#console>p\");\n      if (el) {\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\n      }\n    }\n    return {\n      loading,\n      loginButtonStatus,\n      connecting,\n      provider,\n      web3auth,\n      connect,\n      logout,\n      subscribeAuthEvents,\n      getUserInfo,\n      getUserAccount,\n    };\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n",
    "web3auth/vue/main.js": "import Vue from \"vue\";\nimport App from \"./App.vue\";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  render: (h) => h(App),\n}).$mount(\"#app\");\n",
    "web3auth/vue/package.json": "{\n    \"name\": \"vue3-app\",\n    \"version\": \"0.1.0\",\n    \"private\": true,\n    \"scripts\": {\n        \"serve\": \"vue-cli-service serve\",\n        \"build\": \"vue-cli-service build\",\n        \"lint\": \"vue-cli-service lint\"\n    },\n    \"dependencies\": {\n        \"@web3auth/base\": \"^0.7.0\",\n        \"@web3auth/web3auth\": \"^0.7.0\",\n        \"core-js\": \"^3.6.5\",\n        \"vue\": \"^3.0.0\",\n        \"web3\": \"^1.7.0\"\n    },\n    \"devDependencies\": {\n        \"@typescript-eslint/eslint-plugin\": \"^4.18.0\",\n        \"@typescript-eslint/parser\": \"^4.18.0\",\n        \"@vue/cli-plugin-babel\": \"~4.5.15\",\n        \"@vue/cli-plugin-eslint\": \"~4.5.15\",\n        \"@vue/cli-plugin-typescript\": \"~4.5.15\",\n        \"@vue/cli-service\": \"~4.5.15\",\n        \"@vue/compiler-sfc\": \"^3.0.0\",\n        \"@vue/eslint-config-typescript\": \"^7.0.0\",\n        \"babel-eslint\": \"^10.1.0\",\n        \"eslint\": \"^6.7.2\",\n        \"eslint-plugin-vue\": \"^7.0.0\",\n        \"typescript\": \"~4.1.5\"\n    },\n    \"eslintConfig\": {\n        \"root\": true,\n        \"env\": {\n            \"node\": true\n        },\n        \"extends\": [\n            \"plugin:vue/vue3-essential\",\n            \"eslint:recommended\",\n            \"@vue/typescript\"\n        ],\n        \"parserOptions\": {\n            \"parser\": \"@typescript-eslint/parser\"\n        },\n        \"rules\": {}\n    },\n    \"browserslist\": [\n        \"> 1%\",\n        \"last 2 versions\",\n        \"not dead\"\n    ]\n}\n",
    "web3auth/web-starkex/index.html": "<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Ethereum Web3Auth Getting Started</title>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"style\" src=\"./style.css\">\n  </link>\n</head>\n\n<body>\n  <div class=\"container\">\n    <h1 class=\"title\"><a target=\"_blank\" href=\"http://web3auth.io/\">Web3Auth</a> ETH & JS Integration Example</h1>\n    <!-- Logged In -->\n    <div class=\"grid btn-logged-in\">\n      <button id=\"get-user-info\" class=\"btn\">Get User Info</button>\n      <button id=\"get-stark-account\" class=\"btn\">Get Stark Accounts</button>\n      <button id=\"mint-request\" class=\"btn\">Mint Request</button>\n      <button id=\"deposit-request\" class=\"btn\">Deposit Request</button>\n      <button id=\"withdraw-request\" class=\"btn\">Withdraw Request</button>\n\n      <button id=\"logout\" class=\"btn\">Logout</button>\n\n      <div class=\"console\" id=\"console\">\n        <p id=\"code\" class=\"code\"></p>\n      </div>\n    </div>\n\n    <!-- Logged Logout -->\n    <div class=\"grid btn-logged-out\">\n      <button id=\"login\" class=\"btn\">Login</button>\n    </div>\n    <footer class=\"footer\">\n      <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/getting-started\" target=\"_blank\"\n        rel=\"noopener noreferrer\">\n        Source code\n        <img class=\"logo\" src=\"https://images.web3auth.io/login-github.svg\" />\n      </a>\n    </footer>\n  </div>\n\n  <script src=\"./inputs.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/gh/ethereum/web3.js@1/dist/web3.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/@web3auth/web3auth@0/dist/web3auth.umd.min.js\"></script>\n  <script>\n    const web3authSdk = window.Web3auth;\n    let web3AuthInstance = null;\n\n    (async function init() {\n      $(\".btn-logged-in\").hide();\n      $(\"#sign-tx\").hide();\n\n      web3AuthInstance = new web3authSdk.Web3Auth(web3AuthCtorParams);\n\n      subscribeAuthEvents(web3AuthInstance);\n\n      await web3AuthInstance.initModal();\n      console.log(\"web3AuthInstance\", web3AuthInstance, web3AuthInstance.provider);\n      if (web3AuthInstance.provider) {\n        $(\".btn-logged-in\").show();\n        $(\".btn-logged-out\").hide();\n        if (web3AuthInstance.connectedAdapterName === \"openlogin\") {\n          $(\"#sign-tx\").show();\n        }\n      } else {\n        $(\".btn-logged-out\").show();\n        $(\".btn-logged-in\").hide();\n      }\n    })();\n\n    function subscribeAuthEvents(web3auth) {\n      web3auth.on(\"connected\", (data) => {\n        console.log(\"Yeah!, you are successfully logged in\", data);\n      });\n\n      web3auth.on(\"connecting\", () => {\n        console.log(\"connecting\");\n      });\n\n      web3auth.on(\"disconnected\", () => {\n        console.log(\"disconnected\");\n      });\n\n      web3auth.on(\"errored\", (error) => {\n        console.log(\"some error or user have cancelled login request\", error);\n      });\n\n      web3auth.on(\"MODAL_VISIBILITY\", (isVisible) => {\n        console.log(\"modal visibility\", isVisible);\n      });\n    }\n\n    $(\"#login\").click(async function (event) {\n      try {\n        const provider = await web3AuthInstance.connect();\n        console.log(\"provider after login\", provider);\n        $(\".btn-logged-out\").hide();\n        $(\".btn-logged-in\").show();\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n\n    $(\"#logout\").click(async function (event) {\n      try {\n        await web3AuthInstance.logout();\n        $(\".btn-logged-in\").hide();\n        $(\".btn-logged-out\").show();\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n\n    $(\"#get-user-info\").click(async function (event) {\n      try {\n        const user = await web3AuthInstance.getUserInfo();\n        $(\"#code\").text(JSON.stringify(user || {}, null, 2));\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n\n    $(\"#get-stark-account\").click(async function (event) {\n      try {\n        await getStarkHDAccount();\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n    $(\"#mint-request\").click(async function (event) {\n      try {\n        const user = await web3AuthInstance.getUserInfo();\n        $(\"#code\").text(JSON.stringify(user || {}, null, 2));\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n    $(\"#deposit-request\").click(async function (event) {\n      try {\n        const user = await web3AuthInstance.getUserInfo();\n        $(\"#code\").text(JSON.stringify(user || {}, null, 2));\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n    $(\"#withdraw-request\").click(async function (event) {\n      try {\n        const user = await web3AuthInstance.getUserInfo();\n        $(\"#code\").text(JSON.stringify(user || {}, null, 2));\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n  </script>\n</body>\n\n</html>\n",
    "web3auth/web/custom.html": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Web3Auth Getting Started</title>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n\n  <body>\n    <div class=\"container\">\n      <h1 class=\"title\"><a target=\"_blank\" href=\"http://web3auth.io/\">Web3Auth</a> & JS Integration Example</h1>\n      <!-- Logged In -->\n      <div class=\"grid btn-logged-in\">\n        <button id=\"get-user-info\" class=\"btn\">Get User Info</button>\n        <button id=\"get-accounts\" class=\"btn\">Get Accounts</button>\n        <button id=\"get-balance\" class=\"btn\">Get Balance</button>\n        <button id=\"sign-message\" class=\"btn\">Sign Message</button>\n\n        <button id=\"logout\" class=\"btn\">Logout</button>\n\n        <div class=\"console\" id=\"console\">\n          <p id=\"code\" class=\"code\"></p>\n        </div>\n      </div>\n\n      <!-- Logged Logout -->\n      <div class=\"grid btn-logged-out\">\n        <button id=\"login\" class=\"btn\">Login</button>\n      </div>\n      <footer class=\"footer\">\n        <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source code\n          <img class=\"logo\" src=\"/github-logo.png\" />\n        </a>\n      </footer>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@web3auth/openlogin-adapter@0/dist/openloginAdapter.umd.min.js\"></script>\n\n    // REPLACE-deps-import-\n\n    <script>\n      const web3authSdk = window.Core;\n      let web3auth = null;\n      const OpenloginAdapter = window.OpenloginAdapter;\n\n      (async function init() {\n        console.log(\"rpc\", rpc);\n        $(\".btn-logged-in\").hide();\n        $(\"#sign-tx\").hide();\n\n        const clientId = \"YOUR_CLIENT_ID_HERE\"; // get your clientId from https://developer.web3auth.io\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        web3auth = new web3authSdk.Web3AuthCore(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents(web3auth);\n\n        await web3auth.init();\n        console.log(\"web3auth\", web3auth, web3auth.provider);\n        if (web3auth.provider) {\n          $(\".btn-logged-in\").show();\n          $(\".btn-logged-out\").hide();\n          if (web3auth.connectedAdapterName === \"openlogin\") {\n            $(\"#sign-tx\").show();\n          }\n        } else {\n          $(\".btn-logged-out\").show();\n          $(\".btn-logged-in\").hide();\n        }\n      })();\n\n      function subscribeAuthEvents(web3auth) {\n        web3auth.on(\"connected\", (data) => {\n          console.log(\"Yeah!, you are successfully logged in\", data);\n        });\n\n        web3auth.on(\"connecting\", () => {\n          console.log(\"connecting\");\n        });\n\n        web3auth.on(\"disconnected\", () => {\n          console.log(\"disconnected\");\n        });\n\n        web3auth.on(\"errored\", (error) => {\n          console.log(\"some error or user have cancelled login request\", error);\n        });\n\n        web3auth.on(\"MODAL_VISIBILITY\", (isVisible) => {\n          console.log(\"modal visibility\", isVisible);\n        });\n      }\n\n      $(\"#login\").click(async function (event) {\n        try {\n          // REPLACE-const web3AuthConnect = {};-\n          console.log(\"provider after login\", provider);\n          $(\".btn-logged-out\").hide();\n          $(\".btn-logged-in\").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#logout\").click(async function (event) {\n        try {\n          await web3auth.logout();\n          $(\".btn-logged-in\").hide();\n          $(\".btn-logged-out\").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#get-user-info\").click(async function (event) {\n        try {\n          const user = await web3auth.getUserInfo();\n          $(\"#code\").text(JSON.stringify(user || {}, null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#get-accounts\").click(async function (event) {\n        try {\n          const accounts = await rpc.getAccounts(web3auth.provider);\n          $(\"#code\").text(JSON.stringify([\"accounts\", accounts], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#get-balance\").click(async function (event) {\n        try {\n          const balance = await rpc.getBalance(web3auth.provider);\n          $(\"#code\").text(JSON.stringify([\"balance\", balance], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#sign-message\").click(async function (event) {\n        try {\n          const signedMsg = await rpc.signMessage(web3auth.provider);\n          $(\"#code\").text(JSON.stringify([\"signed message\", signedMsg], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n    </script>\n  </body>\n</html>\n",
    "web3auth/web/index.html": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Web3Auth Getting Started</title>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n\n  <body>\n    <div class=\"container\">\n      <h1 class=\"title\"><a target=\"_blank\" href=\"http://web3auth.io/\">Web3Auth</a> & JS Integration Example</h1>\n      <!-- Logged In -->\n      <div class=\"grid btn-logged-in\">\n        <button id=\"get-user-info\" class=\"btn\">Get User Info</button>\n        <button id=\"get-accounts\" class=\"btn\">Get Accounts</button>\n        <button id=\"get-balance\" class=\"btn\">Get Balance</button>\n        <button id=\"sign-message\" class=\"btn\">Sign Message</button>\n\n        <button id=\"logout\" class=\"btn\">Logout</button>\n\n        <div class=\"console\" id=\"console\">\n          <p id=\"code\" class=\"code\"></p>\n        </div>\n      </div>\n\n      <!-- Logged Logout -->\n      <div class=\"grid btn-logged-out\">\n        <button id=\"login\" class=\"btn\">Login</button>\n      </div>\n      <footer class=\"footer\">\n        <a href=\"https://github.com/Web3Auth/Web3Auth/tree/master/examples/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source code\n          <img class=\"logo\" src=\"/github-logo.png\" />\n        </a>\n      </footer>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@web3auth/openlogin-adapter@0/dist/openloginAdapter.umd.min.js\"></script>\n\n    // REPLACE-deps-import-\n\n    <script>\n      const web3authSdk = window.Web3auth;\n      let web3AuthInstance = null;\n      const OpenloginAdapter = window.OpenloginAdapter;\n\n      (async function init() {\n        console.log(\"rpc\", rpc);\n        $(\".btn-logged-in\").hide();\n        $(\"#sign-tx\").hide();\n\n        const clientId = \"YOUR_CLIENT_ID_HERE\"; // get your clientId from https://developer.web3auth.io\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        web3AuthInstance = new web3authSdk.Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents(web3AuthInstance);\n\n        await web3AuthInstance.initModal();\n        console.log(\"web3AuthInstance\", web3AuthInstance, web3AuthInstance.provider);\n        if (web3AuthInstance.provider) {\n          $(\".btn-logged-in\").show();\n          $(\".btn-logged-out\").hide();\n          if (web3AuthInstance.connectedAdapterName === \"openlogin\") {\n            $(\"#sign-tx\").show();\n          }\n        } else {\n          $(\".btn-logged-out\").show();\n          $(\".btn-logged-in\").hide();\n        }\n      })();\n\n      function subscribeAuthEvents(web3auth) {\n        web3auth.on(\"connected\", (data) => {\n          console.log(\"Yeah!, you are successfully logged in\", data);\n        });\n\n        web3auth.on(\"connecting\", () => {\n          console.log(\"connecting\");\n        });\n\n        web3auth.on(\"disconnected\", () => {\n          console.log(\"disconnected\");\n        });\n\n        web3auth.on(\"errored\", (error) => {\n          console.log(\"some error or user have cancelled login request\", error);\n        });\n\n        web3auth.on(\"MODAL_VISIBILITY\", (isVisible) => {\n          console.log(\"modal visibility\", isVisible);\n        });\n      }\n\n      $(\"#login\").click(async function (event) {\n        try {\n          const provider = await web3AuthInstance.connect();\n          console.log(\"provider after login\", provider);\n          $(\".btn-logged-out\").hide();\n          $(\".btn-logged-in\").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#logout\").click(async function (event) {\n        try {\n          await web3AuthInstance.logout();\n          $(\".btn-logged-in\").hide();\n          $(\".btn-logged-out\").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#get-user-info\").click(async function (event) {\n        try {\n          const user = await web3AuthInstance.getUserInfo();\n          $(\"#code\").text(JSON.stringify(user || {}, null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#get-accounts\").click(async function (event) {\n        try {\n          const accounts = await rpc.getAccounts(web3AuthInstance.provider);\n          $(\"#code\").text(JSON.stringify([\"accounts\", accounts], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#get-balance\").click(async function (event) {\n        try {\n          const balance = await rpc.getBalance(web3AuthInstance.provider);\n          $(\"#code\").text(JSON.stringify([\"balance\", balance], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $(\"#sign-message\").click(async function (event) {\n        try {\n          const signedMsg = await rpc.signMessage(web3AuthInstance.provider);\n          $(\"#code\").text(JSON.stringify([\"signed message\", signedMsg], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n    </script>\n  </body>\n</html>\n",
    "web3auth/web/style.css": "html,\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n* {\n  box-sizing: border-box;\n}\n.container {\n  width: 60%;\n  margin: auto;\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.title {\n  line-height: 1.15;\n  font-size: 3rem;\n  text-align: center;\n  margin: 50px;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.console {\n  max-width: 100%;\n}\n\n.code {\n  background: #fafafa;\n  border-radius: 5px;\n  padding: 0.75rem;\n  font-size: 1.1rem;\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;\n  overflow-wrap: break-word;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.btn {\n  margin: 0.5rem;\n  padding: 0.7rem;\n  text-align: center;\n  color: #0070f3;\n  text-decoration: none;\n  border: 1px solid #0070f3;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  width: 100%;\n  background-color: white;\n}\n\n.btn:hover,\n.btn:focus,\n.btn:active {\n  cursor: pointer;\n  background-color: #fafafa;\n}\n\n.row {\n  display: flex;\n  margin-bottom: 0.5rem;\n  width: 100%;\n}\n.label {\n  flex-basis: 45%;\n  padding-right: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: right;\n  font-weight: bold;\n}\n\n.select {\n  flex-basis: 30%;\n  text-align: left;\n  padding: 0.3rem 0.8rem;\n  font-size: 1rem;\n  border-radius: 8px;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n\n@media (max-width: 1200px) {\n  .container {\n    width: 100%;\n  }\n}\n"
}
