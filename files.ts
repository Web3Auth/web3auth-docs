export default {
  "eth/evm.js":
    'const rpc = (()  => {\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const sendEth = async (provider) => {\n        const web3 = new Web3(provider);\n        const accounts = await web3.eth.getAccounts();\n        console.log("pubKey", accounts);\n        const txRes = await web3.eth.sendTransaction({\n          from: accounts[0],\n          to: accounts[0],\n          value: web3.utils.toWei("0.01"),\n        });\n        console.log("txRes", txRes);\n        return txRes;\n    };\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const signMessage = async (provider) => {\n        const pubKey = await provider.request({ method: "eth_accounts" });\n\n        return new Promise((resolve, reject)=>{\n          const web3 = new Web3();\n          web3.setProvider(provider);\n          // hex message\n          const message = "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad";\n          (web3.currentProvider)?.send(\n            {\n              method: "eth_sign",\n              params: [pubKey[0], message],\n              from: pubKey[0],\n            }, (err, res) => {\n              if (err) {\n                return rejects(err);\n              }\n              return resolve(res);\n            }\n          );\n        })\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getAccounts = async (provider) => {\n        const web3 = new Web3(provider);\n        const accounts = await web3.eth.getAccounts();\n        return accounts;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getChainId = async (provider)=> {\n        const web3 = new Web3(provider);\n        const chainId = await web3.eth.getChainId();\n        return chainId.toString();\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getBalance = async (provider) => {\n        const web3 = new Web3(provider);\n        const accounts = await web3.eth.getAccounts();\n        const balance = await web3.eth.getBalance(accounts[0]);\n        return balance;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const signTransaction = async (provider) => {\n        const web3 = new Web3(provider);\n        const accounts = await web3.eth.getAccounts();\n\n        // only supported with social logins (openlogin adapter)\n        const txRes = await web3.eth.signTransaction({\n          from: accounts[0],\n          to: accounts[0],\n          value: web3.utils.toWei("0.01"),\n        });\n        return txRes;\n    };\n    return {\n      sendEth,\n      signMessage,\n      getAccounts,\n      getChainId,\n      getBalance,\n      signTransaction\n    }\n})()\n',
  "eth/evm.ts":
    'import type { SafeEventEmitterProvider } from "@web3auth/base";\nimport Web3 from "web3";\n\nexport default class EthereumRpc {\n  private provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n  async getAccounts(): Promise<string[]> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      return accounts;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  async getBalance(): Promise<string> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      const balance = await web3.eth.getBalance(accounts[0]);\n      return balance;\n    } catch (error) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  async signMessage() {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      const message = "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad";\n      web3.currentProvider?.send(\n        {\n          method: "eth_sign",\n          params: [accounts[0], message],\n          from: accounts[0],\n        },\n        (err: Error, result: any) => {\n          if (err) {\n            return console.error(err);\n          }\n          return result;\n        }\n      );\n    } catch (error) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  async signTransaction(): Promise<string> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      const txRes = await web3.eth.signTransaction({\n        from: accounts[0],\n        to: accounts[0],\n        value: web3.utils.toWei("0.01"),\n      });\n      return txRes.raw;\n    } catch (error) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  async signAndSendTransaction(): Promise<string> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n\n      const txRes = await web3.eth.sendTransaction({\n        from: accounts[0],\n        to: accounts[0],\n        value: web3.utils.toWei("0.01"),\n      });\n      return txRes.transactionHash;\n    } catch (error) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n}\n',
  "sol/solana.js":
    'const rpc = (() => {\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getConnection = async (provider) => {\n        const solanaWallet = new SolanaProvider.SolanaWallet(provider);\n\n        const connectionConfig = await solanaWallet.request({ method: "solana_provider_config", params: [] });\n        const conn = new solanaWeb3.Connection(connectionConfig.rpcTarget);\n        return conn;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const sendSol = async (provider) => {\n        const conn =  await getConnection();\n        const solanaWallet = new SolanaProvider.SolanaWallet(web3AuthInstance.provider);\n\n        const pubKey = await solanaWallet.requestAccounts();\n        const { blockhash } = await conn.getRecentBlockhash("finalized");\n        const TransactionInstruction = solanaWeb3.SystemProgram.transfer({\n          fromPubkey: new solanaWeb3.PublicKey(pubKey[0]),\n          toPubkey: new solanaWeb3.PublicKey(pubKey[0]),\n          lamports: 0.01 * solanaWeb3.LAMPORTS_PER_SOL,\n        });\n        const transaction = new solanaWeb3.Transaction({ recentBlockhash: blockhash, feePayer: new solanaWeb3.PublicKey(pubKey[0]) }).add(TransactionInstruction);\n        const signature = await solanaWallet.signAndSendTransaction(transaction);\n        return signature;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const signMessage = async (provider) => {\n        const solWeb3 = new SolanaProvider.SolanaWallet(provider);\n        const msg = Buffer.from("Test Signing Message ", "utf8");\n        const res = await solWeb3.signMessage(msg);\n        return res\n    };\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getAccounts = async (provider) => {\n        const solWeb3 = new SolanaProvider.SolanaWallet(provider);\n        const acc = await solWeb3.requestAccounts();\n        return acc;\n    };\n\n     /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const getBalance = async (provider) => {\n        const conn = await getConnection(provider);\n        const solanaWallet = new SolanaProvider.SolanaWallet(provider);\n        const accounts = await solanaWallet.requestAccounts();\n        const balance = await conn.getBalance(new solanaWeb3.PublicKey(accounts[0]));\n        return balance;\n    };\n\n    /**\n     *\n     * @param {*} provider - provider received from Web3Auth login.\n     */\n    const signTransaction = async (provider) => {\n        const conn = await getConnection(provider);\n        const solWallet = new SolanaProvider.SolanaWallet(provider);\n        const pubKey = await solWallet.requestAccounts();\n        const blockhash = (await conn.getRecentBlockhash("finalized")).blockhash;\n        const TransactionInstruction = SystemProgram.transfer({\n          fromPubkey: new solanaWeb3.PublicKey(pubKey[0]),\n          toPubkey: new solanaWeb3.PublicKey("oWvBmHCj6m8ZWtypYko8cRVVnn7jQRpSZjKpYBeESxu"),\n          lamports: 0.01 * LAMPORTS_PER_SOL,\n        });\n        const transaction = new Transaction({ recentBlockhash: blockhash, feePayer: new PublicKey(pubKey[0]) }).add(TransactionInstruction);\n        const signedTx = await solWallet.signTransaction(transaction);\n        return signedTx\n    };\n\n    return {\n      sendSol,\n      signMessage,\n      getAccounts,\n      getBalance,\n      signTransaction\n    }\n})()\n',
  "sol/solana.ts":
    'import { CustomChainConfig } from "@web3auth/base";\nimport { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\nimport { SolanaWallet } from "@web3auth/solana-provider";\nimport type { SafeEventEmitterProvider } from "@web3auth/base";\n\nexport default class SolanaRpc {\n  private provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  getAccounts = async (): Promise<string[]> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const acc = await solanaWallet.requestAccounts();\n      return acc;\n    } catch (error) {\n      console.error("Error", error);\n      return [];\n    }\n  };\n\n  getBalance = async (): Promise<void> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const connectionConfig = await solanaWallet.request<CustomChainConfig>({ method: "solana_provider_config", params: [] });\n      const conn = new Connection(connectionConfig.rpcTarget);\n\n      const accounts = await solanaWallet.requestAccounts();\n      const balance = await conn.getBalance(new PublicKey(accounts[0]));\n    } catch (error) {\n      console.error("Error", error);\n    }\n  };\n\n  signMessage = async (): Promise<void> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const msg = Buffer.from("Test Signing Message ", "utf8");\n      const res = await solanaWallet.signMessage(msg);\n    } catch (error) {\n      console.error("Error", error);\n    }\n  };\n\n  signAndSendTransaction = async (): Promise<string> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const connectionConfig = await solanaWallet.request<CustomChainConfig>({ method: "solana_provider_config", params: [] });\n      const conn = new Connection(connectionConfig.rpcTarget);\n\n      const pubKey = await solanaWallet.requestAccounts();\n      const blockhash = (await conn.getRecentBlockhash("finalized")).blockhash;\n      const TransactionInstruction = SystemProgram.transfer({\n        fromPubkey: new PublicKey(pubKey[0]),\n        toPubkey: new PublicKey(pubKey[0]),\n        lamports: 0.01 * LAMPORTS_PER_SOL,\n      });\n      const transaction = new Transaction({ recentBlockhash: blockhash, feePayer: new PublicKey(pubKey[0]) }).add(TransactionInstruction);\n      const { signature } = await solanaWallet.signAndSendTransaction(transaction);\n      return signature;\n    } catch (error) {\n      console.error("Error", error);\n      throw error;\n    }\n  };\n\n  signTransaction = async (): Promise<string> => {\n    try {\n      const solanaWallet = new SolanaWallet(this.provider);\n      const connectionConfig = await solanaWallet.request<CustomChainConfig>({ method: "solana_provider_config", params: [] });\n      const conn = new Connection(connectionConfig.rpcTarget);\n\n      const pubKey = await solanaWallet.requestAccounts();\n      const blockhash = (await conn.getRecentBlockhash("finalized")).blockhash;\n      const TransactionInstruction = SystemProgram.transfer({\n        fromPubkey: new PublicKey(pubKey[0]),\n        toPubkey: new PublicKey(pubKey[0]),\n        lamports: 0.01 * LAMPORTS_PER_SOL,\n      });\n      const transaction = new Transaction({ recentBlockhash: blockhash, feePayer: new PublicKey(pubKey[0]) }).add(TransactionInstruction);\n      const signedTx = await solanaWallet.signTransaction(transaction);\n      return signedTx.signature?.toString() || "";\n    } catch (error) {\n      console.error("Error", error);\n      throw error;\n    }\n  };\n}\n',
  "starkex/starkex.ts":
    'import type { SafeEventEmitterProvider } from "@web3auth/base";\nimport StarkExAPI from "@starkware-industries/starkex-js/dist/browser";\nimport { ec as elliptic } from "elliptic";\nimport { grindKey, ec as starkEc } from "@toruslabs/starkware-crypto";\n\nconst starkExAPI = new StarkExAPI({\n  endpoint: "https://gw.playground-v2.starkex.co",\n});\n\nexport default class StarkExRpc {\n  private provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  getStarkHDAccount = async (): Promise<elliptic.KeyPair | undefined> => {\n    const account = await this.getStarkAccount();\n    return account;\n  };\n\n  getStarkAccount = async (): Promise<elliptic.KeyPair | undefined> => {\n    try {\n      const starkEcOrder = starkEc.n;\n      const provider = this.provider;\n      const privKey = await provider.request({ method: "eth_private_key" });\n      const account = starkEc.keyFromPrivate(grindKey(privKey as string, starkEcOrder as BN), "hex");\n      return account;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  getStarkKey = async (): Promise<string | undefined> => {\n    try {\n      const account = await this.getStarkAccount();\n      return account?.getPrivate("hex");\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  onMintRequest = async (): Promise<any> => {\n    try {\n      const txId = await starkExAPI.gateway.getFirstUnusedTxId();\n      const starkKey = await this.getStarkKey();\n\n      const request = {\n        txId,\n        vaultId: 1654615998,\n        amount: "6",\n        tokenId: "0x400de4b5a92118719c78df48f4ff31e78de58575487ce1eaf19922ad9b8a714",\n        starkKey: `0x${starkKey}`,\n      };\n      const response = await starkExAPI.gateway.mint(request);\n      return response;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  onDepositRequest = async () => {\n    try {\n      const txId = await starkExAPI.gateway.getFirstUnusedTxId();\n      const starkKey = await this.getStarkKey();\n      const request = {\n        txId,\n        amount: 8,\n        starkKey: `0x${starkKey}`,\n        tokenId: "0x3ef811e040c4bc9f9eee715441cee470f5d5aff69b9cd9aca7884f5a442a890",\n        vaultId: 1924014660,\n      };\n      const response = await starkExAPI.gateway.deposit(request);\n      return response;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  onWithdrawalRequest = async (): Promise<any> => {\n    try {\n      const txId = await starkExAPI.gateway.getFirstUnusedTxId();\n      const starkKey = await this.getStarkKey();\n      const request = {\n        txId,\n        amount: 8,\n        starkKey: `0x${starkKey}`,\n        tokenId: "0x2dd48fd7a024204f7c1bd874da5e709d4713d60c8a70639eb1167b367a9c378",\n        vaultId: 612008755,\n      };\n      const response = await starkExAPI.gateway.withdrawal(request);\n      return response;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n}\n',
  "starknet/account.json": "https: //github.com/0xs34n/starknet.js/blob/develop/__mocks__/ArgentAccount.json\n",
  "starknet/starknet.ts":
    'import type { SafeEventEmitterProvider } from "@web3auth/base";\nimport Web3 from "web3";\nimport { getStarkHDAccount, STARKNET_NETWORKS, sign, verify } from "@toruslabs/openlogin-starkkey";\nimport { binaryToHex, binaryToUtf8, bufferToBinary, bufferToHex, hexToBinary, removeHexPrefix } from "enc-utils";\nimport type { ec } from "elliptic";\nimport { defaultProvider } from "starknet";\nimport CompiledAccountContractAbi from "./contracts/account_abi.json";\nimport { BN } from "bn.js";\nimport { ec as elliptic } from "elliptic";\nimport { grindKey, ec as starkEc } from "@toruslabs/starkware-crypto";\nimport fs from "fs";\n\nexport default class EthereumRpc {\n  private provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n  async getAccounts(): Promise<string[]> {\n    try {\n      const web3 = new Web3(this.provider as any);\n      const accounts = await web3.eth.getAccounts();\n      return accounts;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  }\n\n  getStarkAccount = async (): Promise<elliptic.KeyPair | undefined> => {\n    try {\n      const starkEcOrder = starkEc.n;\n      const provider = this.provider;\n      const privKey = await provider.request({ method: "eth_private_key" });\n      const account = starkEc.keyFromPrivate(grindKey(privKey as string, starkEcOrder as BN), "hex");\n      return account;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  getStarkKey = async (): Promise<string | undefined> => {\n    try {\n      const account = await this.getStarkAccount();\n      return account?.getPrivate("hex");\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n\n  deployAccount = async (): Promise<string | undefined> => {\n    try {\n      const account = await this.getStarkAccount();\n      const compiledArgentAccount = JSON.parse(fs.readFileSync("./account.json").toString("ascii"));\n      const accountResponse = await defaultProvider.deployContract({\n        contract: compiledArgentAccount,\n        addressSalt: account.getPublic("hex"),\n      });\n      return accountResponse;\n    } catch (error: unknown) {\n      console.error((error as Error).message);\n      throw error;\n    }\n  };\n}\n',
  "web3auth/android/MainActivity.kt":
    'package com.web3auth.app\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport com.google.android.material.textfield.TextInputLayout\nimport com.google.gson.Gson\nimport com.web3auth.core.types.WhiteLabelData\nimport com.web3auth.core.types.Provider\nimport com.web3auth.core.Web3Auth\nimport com.web3auth.core.isEmailValid\nimport com.web3auth.core.types.ExtraLoginOptions\nimport com.web3auth.core.types.LoginParams\nimport com.web3auth.core.types.Web3AuthOptions\nimport com.web3auth.core.types.Web3AuthResponse\nimport java8.util.concurrent.CompletableFuture\n\nclass MainActivity : AppCompatActivity(), AdapterView.OnItemClickListener {\n    private lateinit var web3Auth: Web3Auth\n\n    private val verifierList: List<LoginVerifier> = listOf(\n        LoginVerifier("Google", Provider.GOOGLE),\n        LoginVerifier("Facebook", Provider.FACEBOOK),\n        LoginVerifier("Twitch", Provider.TWITCH),\n        LoginVerifier("Discord", Provider.DISCORD),\n        LoginVerifier("Reddit", Provider.REDDIT),\n        LoginVerifier("Apple", Provider.APPLE),\n        LoginVerifier("Github", Provider.GITHUB),\n        LoginVerifier("LinkedIn", Provider.LINKEDIN),\n        LoginVerifier("Twitter", Provider.TWITTER),\n        LoginVerifier("Line", Provider.LINE),\n        LoginVerifier("Hosted Email Passwordless", Provider.EMAIL_PASSWORDLESS)\n    )\n\n    private var selectedLoginProvider: Provider = Provider.GOOGLE\n\n    private val gson = Gson()\n\n    private fun signIn() {\n        val hintEmailEditText = findViewById<EditText>(R.id.etEmailHint)\n        var extraLoginOptions: ExtraLoginOptions? = null\n        if (selectedLoginProvider == Provider.EMAIL_PASSWORDLESS) {\n            val hintEmail = hintEmailEditText.text.toString()\n            if (hintEmail.isBlank() || !hintEmail.isEmailValid()) {\n                Toast.makeText(this, "Please enter a valid Email.", Toast.LENGTH_LONG).show()\n                return\n            }\n            extraLoginOptions = ExtraLoginOptions(login_hint = hintEmail)\n        }\n\n        val loginCompletableFuture: CompletableFuture<Web3AuthResponse> = web3Auth.login(\n            LoginParams(selectedLoginProvider, extraLoginOptions = extraLoginOptions)\n        )\n        loginCompletableFuture.whenComplete { loginResponse, error ->\n            if (error == null) {\n                reRender(loginResponse)\n            } else {\n                Log.d("MainActivity_Web3Auth", error.message ?: "Something went wrong" )\n            }\n\n        }\n    }\n\n    private fun signOut() {\n        val logoutCompletableFuture =  web3Auth.logout()\n        logoutCompletableFuture.whenComplete { _, error ->\n            if (error == null) {\n                reRender(Web3AuthResponse())\n            } else {\n                Log.d("MainActivity_Web3Auth", error.message ?: "Something went wrong" )\n            }\n        }\n    }\n\n    private fun reRender(web3AuthResponse: Web3AuthResponse) {\n        val contentTextView = findViewById<TextView>(R.id.contentTextView)\n        val signInButton = findViewById<Button>(R.id.signInButton)\n        val signOutButton = findViewById<Button>(R.id.signOutButton)\n        val spinner = findViewById<TextInputLayout>(R.id.verifierList)\n        val hintEmailEditText = findViewById<EditText>(R.id.etEmailHint)\n\n        val key = web3AuthResponse.privKey\n        val userInfo = web3AuthResponse.userInfo\n        if (key is String && key.isNotEmpty()) {\n            contentTextView.text = gson.toJson(web3AuthResponse)\n            contentTextView.visibility = View.VISIBLE\n            signInButton.visibility = View.GONE\n            signOutButton.visibility = View.VISIBLE\n            spinner.visibility = View.GONE\n            hintEmailEditText.visibility = View.GONE\n        } else {\n            contentTextView.text = getString(R.string.not_logged_in)\n            contentTextView.visibility = View.GONE\n            signInButton.visibility = View.VISIBLE\n            signOutButton.visibility = View.GONE\n            spinner.visibility = View.VISIBLE\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Configure Web3Auth\n        web3Auth = Web3Auth(\n            Web3AuthOptions(context = this,\n            clientId = getString(R.string.web3auth_project_id),\n            network = Web3Auth.Network.MAINNET,\n            redirectUrl = Uri.parse("torusapp://org.torusresearch.web3authexample/redirect"),\n                whiteLabel = WhiteLabelData(\n                    "Web3Auth Sample App", null, null, "en", true,\n                    hashMapOf(\n                        "primary" to "#123456"\n                    )\n                )\n            )\n        )\n\n        web3Auth.setResultUrl(intent.data)\n\n        // Setup UI and event handlers\n        val signInButton = findViewById<Button>(R.id.signInButton)\n        signInButton.setOnClickListener { signIn() }\n\n        val signOutButton = findViewById<Button>(R.id.signOutButton)\n        signOutButton.setOnClickListener { signOut() }\n\n        val spinner = findViewById<AutoCompleteTextView>(R.id.spinnerTextView)\n        val loginVerifierList: List<String> = verifierList.map { item ->\n            item.name\n        }\n        val adapter: ArrayAdapter<String> =\n            ArrayAdapter(this, R.layout.item_dropdown, loginVerifierList)\n        spinner.setAdapter(adapter)\n        spinner.onItemClickListener = this\n    }\n\n    override fun onNewIntent(intent: Intent?) {\n        super.onNewIntent(intent)\n        web3Auth.setResultUrl(intent?.data)\n    }\n\n    override fun onItemClick(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {\n        selectedLoginProvider = verifierList[p2].loginProvider\n\n        val hintEmailEditText = findViewById<EditText>(R.id.etEmailHint)\n        if (selectedLoginProvider == Provider.EMAIL_PASSWORDLESS) {\n            hintEmailEditText.visibility = View.VISIBLE\n        } else {\n            hintEmailEditText.visibility = View.GONE\n        }\n    }\n\n    data class LoginVerifier (\n        val name : String,\n        val loginProvider : Provider\n    )\n\n}\n',
  "web3auth/angular/app.component.css":
    ':host {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-size: 14px;\n  color: #333;\n  box-sizing: border-box;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.title {\n  font-size: 3rem;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.content {\n  display: flex;\n  margin: 82px auto 32px;\n  padding: 0 16px;\n  max-width: 960px;\n  flex-direction: column;\n  align-items: center;\n}\n\n.card-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 16px;\n}\n\n.card {\n  all: unset;\n  border-radius: 4px;\n  border: 1px solid #0070f3;\n  color: #0070f3;\n  height: 40px;\n  width: 150px;\n  margin: 0 8px 16px;\n  padding: 16px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  transition: all 0.2s ease-in-out;\n  line-height: 24px;\n}\n\n.card.card-small {\n  height: 16px;\n  width: 128px;\n  cursor: pointer;\n}\n\n.card-container .card:not(.highlight-card):hover {\n  transform: translateY(-3px);\n  box-shadow: 0 4px 17px rgba(0, 0, 0, 0.35);\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.console {\n  width: 100%;\n}\n\n.code {\n  background: #fafafa;\n  border-radius: 5px;\n  font-size: 1rem;\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;\n  overflow-wrap: break-word;\n  padding: 1rem;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1em;\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n',
  "web3auth/angular/app.component.html":
    '<div class="content">\n  <h1 class="title">\n    <a target="_blank" href="http://web3auth.io/">Web3Auth</a> & AngularJS\n    Example\n  </h1>\n  <div class="setting">\n    <div\n      *ngIf="isModalLoaded && provider; else elseBlock"\n      class="card-container"\n    >\n      <button class="card card-small" (click)="getUserInfo()">\n        Get User Info\n      </button>\n      <button class="card card-small" (click)="getAccount()">\n        Get Account\n      </button>\n      <button class="card card-small" (click)="getBalance()">\n        Get Balance\n      </button>\n      <button class="card card-small" (click)="signMessage()">\n        Sign Message\n      </button>\n      <button class="card card-small" (click)="signTransaction()">\n        Sign Transaction\n      </button>\n      <button class="card card-small" (click)="signAndSendTransaction()">\n        Send Transaction\n      </button>\n      <button class="card card-small" (click)="logout()">Log Out</button>\n      <div class="console" id="console-ui">\n        <p class="code">Logged In</p>\n      </div>\n    </div>\n    <ng-template #elseBlock>\n      <div class="card-container">\n        <button class="card card-small" (click)="login()">Login</button>\n      </div>\n    </ng-template>\n  </div>\n  <footer class="footer">\n    <a\n      href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/angular-app"\n      target="_blank"\n      rel="noopener noreferrer"\n    >\n      Source code\n      <img class="logo" src="../assets/github-logo.png" />\n    </a>\n  </footer>\n</div>\n',
  "web3auth/angular/app.component.ts":
    'import { Component } from "@angular/core";\nimport { ADAPTER_EVENTS, SafeEventEmitterProvider } from "@web3auth/base";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\nimport { Web3Auth } from "@web3auth/web3auth";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n\n@Component({\n  selector: "app-root",\n  templateUrl: "./app.component.html",\n  styleUrls: ["./app.component.css"],\n})\nexport class AppComponent {\n  title = "angular-app";\n  web3auth: Web3Auth | null = null;\n  provider: SafeEventEmitterProvider | null = null;\n  isModalLoaded = false;\n\n  async ngOnInit() {\n    // REPLACE-const web3AuthInitParams = {};-\n\n    // REPLACE-const web3AuthCtorParams = {};-\n\n    this.web3auth = new Web3Auth(web3AuthCtorParams);\n\n    // REPLACE-const web3AuthOpenloginConfigure = {};-\n    this.web3auth.configureAdapter(openloginAdapter);\n    this.subscribeAuthEvents(this.web3auth);\n    await this.web3auth.initModal(initParams);\n    this.isModalLoaded = true;\n  }\n\n  subscribeAuthEvents(web3auth: Web3Auth) {\n    web3auth.on(ADAPTER_EVENTS.CONNECTED, (data) => {\n      console.log("Yeah!, you are successfully logged in", data);\n      this.provider = web3auth.provider;\n    });\n\n    web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n      console.log("connecting");\n    });\n\n    web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n      console.log("disconnected");\n    });\n\n    web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n      console.log("some error or user have cancelled login request", error);\n    });\n  }\n\n  async login() {\n    if (!this.web3auth) {\n      this.uiConsole("Web3auth is not initialized");\n      return;\n    }\n    this.provider = await this.web3auth.connect();\n    this.uiConsole("logged in");\n  }\n\n  async logout() {\n    if (!this.web3auth) {\n      this.uiConsole("Web3auth is not initialized");\n      return;\n    }\n    await this.web3auth.logout();\n    this.provider = null;\n    this.uiConsole("logged out");\n  }\n\n  async getUserInfo() {\n    if (!this.web3auth) {\n      this.uiConsole("Web3auth is not initialized");\n      return;\n    }\n    const userInfo = await this.web3auth.getUserInfo();\n    this.uiConsole("User Info", userInfo);\n  }\n\n  async getBalance() {\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const balance = await rpc.getBalance();\n    this.uiConsole("Balance", balance);\n  }\n\n  async getAccount() {\n    console.log("GETTING ACCOUNT");\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const accounts = await rpc.getAccounts();\n    this.uiConsole("Account", accounts);\n  }\n\n  async signMessage() {\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signMessage();\n    this.uiConsole("Sign message", res);\n  }\n\n  async signTransaction() {\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signTransaction();\n    this.uiConsole("Sign transaction", res);\n  }\n\n  async signAndSendTransaction() {\n    console.log("SIGNING MESSAGE");\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signAndSendTransaction();\n    this.uiConsole("Sign and send transaction", res);\n  }\n\n  uiConsole(...args: unknown[]): void {\n    const el = document.querySelector("#console-ui>p");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n}\n',
  "web3auth/angular/app.module.ts":
    "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
  "web3auth/angular/custom/app.component.ts":
    'import { Component } from "@angular/core";\nimport { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider, WALLET_ADAPTERS } from "@web3auth/base";\nimport { Web3AuthCore } from "@web3auth/core";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n\n@Component({\n  selector: "app-root",\n  templateUrl: "./app.component.html",\n  styleUrls: ["./app.component.css"],\n})\nexport class AppComponent {\n  title = "angular-app";\n  web3auth: Web3Auth | null = null;\n  provider: SafeEventEmitterProvider | null = null;\n  isModalLoaded = false;\n\n  async ngOnInit() {\n    // REPLACE-const web3AuthCoreCtorParams = {};-\n\n    const web3auth = new Web3AuthCore(web3AuthCtorParams);\n\n    // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n    this.web3auth.configureAdapter(openloginAdapter);\n    this.subscribeAuthEvents(this.web3auth);\n    await web3auth.init();\n    this.isModalLoaded = true;\n  }\n\n  subscribeAuthEvents(web3auth: Web3AuthCore) {\n    web3auth.on(ADAPTER_EVENTS.CONNECTED, (data) => {\n      console.log("Yeah!, you are successfully logged in", data);\n      this.provider = web3auth.provider;\n    });\n\n    web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n      console.log("connecting");\n    });\n\n    web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n      console.log("disconnected");\n    });\n\n    web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n      console.log("some error or user have cancelled login request", error);\n    });\n  }\n\n  async login() {\n    if (!this.web3auth) {\n      this.uiConsole("Web3auth is not initialized");\n      return;\n    }\n\n    // REPLACE-const web3AuthConnect = {};-\n\n    this.uiConsole("logged in");\n  }\n\n  async logout() {\n    if (!this.web3auth) {\n      this.uiConsole("Web3auth is not initialized");\n      return;\n    }\n    await this.web3auth.logout();\n    this.provider = null;\n    this.uiConsole("logged out");\n  }\n\n  async getUserInfo() {\n    if (!this.web3auth) {\n      this.uiConsole("Web3auth is not initialized");\n      return;\n    }\n    const userInfo = await this.web3auth.getUserInfo();\n    this.uiConsole("User Info", userInfo);\n  }\n\n  async getBalance() {\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const balance = await rpc.getBalance();\n    this.uiConsole("Balance", balance);\n  }\n\n  async getAccount() {\n    console.log("GETTING ACCOUNT");\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const accounts = await rpc.getAccounts();\n    this.uiConsole("Account", accounts);\n  }\n\n  async signMessage() {\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signMessage();\n    this.uiConsole("Sign message", res);\n  }\n\n  async signTransaction() {\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signTransaction();\n    this.uiConsole("Sign transaction", res);\n  }\n\n  async signAndSendTransaction() {\n    console.log("SIGNING MESSAGE");\n    if (!this.provider) {\n      this.uiConsole("provider is not initialized");\n      return;\n    }\n    const rpc = new RPC(this.provider);\n    const res = await rpc.signAndSendTransaction();\n    this.uiConsole("Sign and send transaction", res);\n  }\n\n  uiConsole(...args: unknown[]): void {\n    const el = document.querySelector("#console-ui>p");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n}\n',
  "web3auth/angular/package.json":
    '{\n  "name": "angular-app",\n  "version": "0.0.0",\n  "scripts": {\n    "ng": "ng",\n    "start": "ng serve",\n    "build": "ng build",\n    "watch": "ng build --watch --configuration development",\n    "test": "ng test"\n  },\n  "private": true,\n  "dependencies": {\n    "@angular/animations": "~13.2.4",\n    "@angular/common": "~13.2.4",\n    "@angular/compiler": "~13.2.4",\n    "@angular/core": "~13.2.4",\n    "@angular/forms": "~13.2.4",\n    "@angular/platform-browser": "~13.2.4",\n    "@angular/platform-browser-dynamic": "~13.2.4",\n    "@angular/router": "~13.2.4",\n    "@web3auth/solana-provider": "^0.9.0",\n    "@web3auth/web3auth": "^0.9.0",\n    "@web3auth/base": "^0.9.0",\n    "@solana/web3.js": "^1.36.0",\n    "assert": "^2.0.0",\n    "crypto-browserify": "^3.12.0",\n    "https-browserify": "^1.0.0",\n    "os-browserify": "^0.3.0",\n    "rxjs": "~7.5.4",\n    "stream-browserify": "^3.0.0",\n    "stream-http": "^3.2.0",\n    "tslib": "^2.3.1",\n    "url": "^0.11.0",\n    "web3": "^1.7.0",\n    "zone.js": "~0.11.4"\n  },\n  "devDependencies": {\n    "@angular-devkit/build-angular": "~13.2.5",\n    "@angular/cli": "~13.2.5",\n    "@angular/compiler-cli": "~13.2.4",\n    "@types/jasmine": "~3.10.3",\n    "@types/keccak": "^3.0.1",\n    "@types/node": "^12.11.1",\n    "@types/readable-stream": "^2.3.13",\n    "jasmine-core": "~4.0.1",\n    "karma": "~6.3.16",\n    "karma-chrome-launcher": "~3.1.0",\n    "karma-coverage": "~2.2.0",\n    "karma-jasmine": "~4.0.1",\n    "karma-jasmine-html-reporter": "~1.7.0",\n    "typescript": "~4.5.5"\n  }\n}\n',
  "web3auth/flutter/main.dart":
    "import 'dart:collection';\n\nimport 'package:flutter/material.dart';\nimport 'dart:async';\n\nimport 'package:flutter/services.dart';\nimport 'package:web3auth_flutter/web3auth_flutter.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  String _result = '<empty>';\n  bool logoutVisible = false;\n\n  @override\n  void initState() {\n    super.initState();\n    initPlatformState();\n  }\n\n  // Platform messages are asynchronous, so we initialize in an async method.\n  Future<void> initPlatformState() async {\n    HashMap themeMap = new HashMap<String, String>();\n    themeMap['primary'] = \"#fff000\";\n\n    await Web3AuthFlutter.init(\n        clientId:\n            'BPcJHn_y62h5k9v33TzTSPQiHJZuOGwQdjOanCC7-GKgelSYz1PYPoU7LIJqix3CGFHLF7IEIvsfQhBF_rx9rUw',\n        network: Network.mainnet,\n        redirectUri: 'org.torusresearch.flutter.web3authexample://auth',\n        whiteLabelData: WhiteLabelData(\n            dark: true, name: \"Web3Auth Flutter App\", theme: themeMap),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Torus Web3Auth Example'),\n        ),\n        body: Center(\n            child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Padding(\n              padding: const EdgeInsets.all(8.0),\n              child: Text('Login with'),\n            ),\n            ElevatedButton(\n                onPressed: _login(_withGoogle), child: Text('Google')),\n            ElevatedButton(\n                onPressed: _login(_withFacebook), child: Text('Facebook')),\n            ElevatedButton(\n                onPressed: _login(_withReddit), child: Text('Reddit ')),\n            ElevatedButton(\n                onPressed: _login(_withDiscord), child: Text('Discord')),\n            Visibility(\n              child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                      primary: Colors.red // This is what you need!\n                      ),\n                  onPressed: _logout(),\n                  child: Text('Logout')),\n              visible: logoutVisible,\n            ),\n            Padding(\n              padding: const EdgeInsets.all(8.0),\n              child: Text('Result: $_result'),\n            )\n          ],\n        )),\n      ),\n    );\n  }\n\n  VoidCallback _login(Future<Web3AuthResponse> Function() method) {\n    return () async {\n      try {\n        final Web3AuthResponse response = await method();\n        setState(() {\n          _result = response.toString();\n          logoutVisible = true;\n        });\n      } on UserCancelledException {\n        print(\"User cancelled.\");\n      } on UnKnownException {\n        print(\"Unknown exception occurred\");\n      }\n    };\n  }\n\n  VoidCallback _logout() {\n    return () async {\n      try {\n        await Web3AuthFlutter.logout();\n        setState(() {\n          _result = '<empty>';\n          logoutVisible = false;\n        });\n      } on UserCancelledException {\n        print(\"User cancelled.\");\n      } on UnKnownException {\n        print(\"Unknown exception occurred\");\n      }\n    };\n  }\n\n  Future<Web3AuthResponse> _withGoogle() {\n    return Web3AuthFlutter.login(provider: Provider.google);\n  }\n\n  Future<Web3AuthResponse> _withFacebook() {\n    return Web3AuthFlutter.login(provider: Provider.facebook);\n  }\n\n  Future<Web3AuthResponse> _withReddit() {\n    return Web3AuthFlutter.login(provider: Provider.reddit);\n  }\n\n  Future<Web3AuthResponse> _withDiscord() {\n    return Web3AuthFlutter.login(provider: Provider.discord);\n  }\n}\n",
  "web3auth/ios/ContentView.swift":
    'import SwiftUI\nimport Web3Auth\n\nstruct ContentView: View {\n    @SwiftUI.State var text = ""\n    var body: some View {\n        VStack {\n            Button(\n                action: {\n                    Web3Auth()\n                        .login(W3ALoginParams()) {\n                            switch $0 {\n                            case .success(let result):\n                                showResult(result: result)\n                            case .failure(let error):\n                                print("Error: \\(error)")\n                            }\n                        }\n                },\n                label: {\n                    Text("Sign In")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth()\n                        .login(W3ALoginParams(loginProvider: .GOOGLE)) {\n                            switch $0 {\n                            case .success(let result):\n                                showResult(result: result)\n                            case .failure(let error):\n                                print("Error: \\(error)")\n                            }\n                        }\n                },\n                label: {\n                    Text("Sign In with Google")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth(\n                        W3AInitParams(\n                            clientId: "your-client-id",\n                            network: .mainnet\n                        )\n                    )\n                    .login(W3ALoginParams(loginProvider: .GOOGLE)) {\n                        switch $0 {\n                        case .success(let result):\n                            showResult(result: result)\n                        case .failure(let error):\n                            print("Error: \\(error)")\n                        }\n                    }\n                },\n                label: {\n                    Text("Sign In with Google with Constructor Init Params")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth()\n                        .login(W3ALoginParams(loginProvider: .APPLE)) {\n                            switch $0 {\n                            case .success(let result):\n                                showResult(result: result)\n                            case .failure(let error):\n                                print("Error: \\(error)")\n                            }\n                        }\n                },\n                label: {\n                    Text("Sign In with Apple")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth()\n                        .login(W3ALoginParams(\n                            loginProvider: .EMAIL_PASSWORDLESS,\n                            extraLoginOptions: ExtraLoginOptions(\n                                display: nil,\n                                prompt: nil,\n                                max_age: nil,\n                                ui_locales: nil,\n                                id_token_hint: nil,\n                                id_token: nil,\n                                login_hint: "your-email@example.com",\n                                acr_values: nil,\n                                scope: nil,\n                                audience: nil,\n                                connection: nil,\n                                domain: nil,\n                                client_id: nil,\n                                redirect_uri: nil,\n                                leeway: nil,\n                                verifierIdField: nil,\n                                isVerifierIdCaseSensitive: nil\n                            )\n                        )) {\n                            switch $0 {\n                            case .success(let result):\n                                showResult(result: result)\n                            case .failure(let error):\n                                print("Error: \\(error)")\n                            }\n                        }\n                },\n                label: {\n                    Text("Sign In with Email Passwordless")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth(\n                        W3AInitParams(\n                            clientId: "your-client-id",\n                            network: .testnet,\n                            whiteLabel: W3AWhiteLabelData(\n                                name: "Web3Auth Stub",\n                                dark: true,\n                                theme: ["primary": "#123456"]\n                            )\n                        )\n                    )\n                    .login(W3ALoginParams(loginProvider: .GOOGLE)) {\n                        switch $0 {\n                        case .success(let result):\n                            showResult(result: result)\n                        case .failure(let error):\n                            print("Error: \\(error)")\n                        }\n                    }\n                },\n                label: {\n                    Text("Sign In with Whitelabel")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth(\n                        W3AInitParams(\n                            clientId: "your-client-id",\n                            network: .testnet,\n                            loginConfig: [\n                                "jwt": W3ALoginConfig(\n                                    verifier: "your-verifier-id",\n                                    typeOfLogin: TypeOfLogin.jwt,\n                                    name: "display name",\n                                    verifierSubIdentifier: "sub"\n                                )\n                            ]\n                        )\n                    )\n                    .login(W3ALoginParams(\n                        loginProvider: .JWT,\n                        extraLoginOptions: ExtraLoginOptions(\n                            display: nil,\n                            prompt: nil,\n                            max_age: nil,\n                            ui_locales: nil,\n                            id_token_hint: nil,\n                            id_token: "jwt-id-token",\n                            login_hint: nil,\n                            acr_values: nil,\n                            scope: nil,\n                            audience: nil,\n                            connection: nil,\n                            domain: nil,\n                            client_id: nil,\n                            redirect_uri: nil,\n                            leeway: nil,\n                            verifierIdField: nil,\n                            isVerifierIdCaseSensitive: nil\n                        )\n                    )) {\n                        switch $0 {\n                        case .success(let result):\n                            showResult(result: result)\n                        case .failure(let error):\n                            print("Error: \\(error)")\n                        }\n                    }\n                },\n                label: {\n                    Text("Sign In with Custom Authentication")\n                        .padding()\n                }\n            )\n            \n            Button(\n                action: {\n                    Web3Auth(\n                        W3AInitParams(\n                            clientId: "your-client-id",\n                            network: .testnet,\n                            loginConfig: [\n                                "jwt": W3ALoginConfig(\n                                    verifier: "your-verifier-id",\n                                    typeOfLogin: TypeOfLogin.jwt,\n                                    name: "display name",\n                                    verifierSubIdentifier: "sub"\n                                )\n                            ],\n                            whiteLabel: W3AWhiteLabelData(\n                                name: "Web3Auth Stub",\n                                dark: true,\n                                theme: ["primary": "#123456"]\n                            )\n                        )\n                    )\n                    .login(W3ALoginParams(\n                        loginProvider: .JWT,\n                        extraLoginOptions: ExtraLoginOptions(\n                            display: nil,\n                            prompt: nil,\n                            max_age: nil,\n                            ui_locales: nil,\n                            id_token_hint: nil,\n                            id_token: "jwt-id-token",\n                            login_hint: nil,\n                            acr_values: nil,\n                            scope: nil,\n                            audience: nil,\n                            connection: nil,\n                            domain: nil,\n                            client_id: nil,\n                            redirect_uri: nil,\n                            leeway: nil,\n                            verifierIdField: nil,\n                            isVerifierIdCaseSensitive: nil\n                        )\n                    )) {\n                        switch $0 {\n                        case .success(let result):\n                            showResult(result: result)\n                        case .failure(let error):\n                            print("Error: \\(error)")\n                        }\n                    }\n                },\n                label: {\n                    Text("Sign In with Custom Authentication With Whitelabel")\n                        .padding()\n                }\n            )\n            \n            Text(text).foregroundColor(.white)\n        }\n    }\n    \n    func showResult(result: Web3AuthState) {\n        print("""\n        Signed in successfully!\n            Private key: \\(result.privKey)\n            Ed25519 Private key: \\(result.ed25519PrivKey)\n            User info:\n                Name: \\(result.userInfo.name)\n                Profile image: \\(result.userInfo.profileImage ?? "N/A")\n                Type of login: \\(result.userInfo.typeOfLogin)\n        """)\n        text = """\n        Signed in successfully!\n            Private key: \\(result.privKey)\n            Ed25519 Private key: \\(result.ed25519PrivKey)\n            User info:\n                Name: \\(result.userInfo.name)\n                Profile image: \\(result.userInfo.profileImage ?? "N/A")\n                Type of login: \\(result.userInfo.typeOfLogin)\n        """\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n',
  "web3auth/ios/Podfile":
    "platform :ios, '13.0'\nsource 'https://github.com/CocoaPods/Specs.git'\n\ntarget 'Web3AuthSample' do\n  # Comment the next line if you don't want to use dynamic frameworks\n  use_frameworks!\n  pod 'Web3Auth'\nend\n",
  "web3auth/ios/Web3Auth.plist":
    '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n\t<key>ClientId</key>\n\t<string>your-client-id</string>\n\t<key>Network</key>\n\t<string>mainnet</string>\n</dict>\n</plist>\n',
  "web3auth/nextjs/App.css":
    ".container {\n  width: 60%;\n  margin: auto;\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.title {\n  line-height: 1.15;\n  font-size: 3rem;\n  text-align: center;\n  margin: 50px;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.card {\n  margin: 0.5rem;\n  padding: 0.7rem;\n  text-align: center;\n  color: #0070f3;\n  background-color: #fafafa;\n  text-decoration: none;\n  border: 1px solid #0070f3;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  width: 100%;\n}\n\n.card:hover,\n.card:focus,\n.card:active {\n  cursor: pointer;\n  background-color: #f1f1f1;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n\n@media (max-width: 1200px) {\n  .container {\n    width: 100%;\n  }\n}\n",
  "web3auth/nextjs/App.tsx":
    'import { ADAPTER_EVENTS, SafeEventEmitterProvider } from "@web3auth/base";\nimport type { Web3Auth, Web3AuthOptions } from "@web3auth/web3auth";\nimport { useEffect, useState } from "react";\nimport "./App.css";\n\n// REPLACE-web3authChainRpcImport-\n\nfunction App() {\n  const [web3AuthInstance, setWeb3AuthInstance] = useState<Web3Auth | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        const { Web3Auth } = await import("@web3auth/web3auth");\n        const web3AuthInstance = new Web3Auth(web3AuthCtorParams as Web3AuthOptions);\n        subscribeAuthEvents(web3AuthInstance);\n        setWeb3AuthInstance(web3AuthInstance);\n        await web3AuthInstance.initModal();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3AuthInstance: Web3Auth) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3AuthInstance.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log("Yeah!, you are successfully logged in", data);\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log("connecting");\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log("disconnected");\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error("some error or user has cancelled login request", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3AuthInstance) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const provider = await web3AuthInstance.connect();\n    setProvider(provider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3AuthInstance) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const user = await web3AuthInstance.getUserInfo();\n    console.log("User info", user);\n  };\n\n  const logout = async () => {\n    if (!web3AuthInstance) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    await web3AuthInstance.logout();\n    setProvider(null);\n  };\n\n  const onGetAccounts = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const userAccount = await rpc.getAccounts();\n    console.log("User account", userAccount);\n  };\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className="card">\n        Get User Info\n      </button>\n      <button onClick={onGetAccounts} className="card">\n        Get Accounts\n      </button>\n      <button onClick={logout} className="card">\n        Log Out\n      </button>\n    </>\n  );\n\n  const unloggedInView = (\n    <button onClick={login} className="card">\n      Login\n    </button>\n  );\n\n  return (\n    <div className="container">\n      <h1 className="title">\n        <a target="_blank" href="http://web3auth.io/" rel="noreferrer">\n          Web3Auth\n        </a>{" "}\n        & ReactJS Example\n      </h1>\n\n      <div className="grid">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className="footer">\n        <a href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app" target="_blank" rel="noopener noreferrer">\n          Source code {"  "}\n          <img className="logo" src="/images/github-logo.png" alt="github-logo" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n',
  "web3auth/nextjs/custom-auth/App.tsx":
    'import { ADAPTER_EVENTS, SafeEventEmitterProvider, WALLET_ADAPTERS } from "@web3auth/base";\nimport type { Web3AuthCore } from "@web3auth/core";\nimport { useEffect, useState } from "react";\nimport "./App.css";\n\n// REPLACE-web3authChainRpcImport-\n\nfunction CustomAuth() {\n  const [web3AuthInstance, setWeb3AuthInstance] = useState<Web3AuthCore | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n  const clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const { Web3AuthCore } = await import("@web3auth/core");\n        const { OpenloginAdapter } = await import("@web3auth/openlogin-adapter");\n\n        // REPLACE-const web3AuthCoreCtorParams = {};-\n\n        const web3AuthInstance = new Web3AuthCore(web3AuthCoreCtorParams);\n\n        subscribeAuthEvents(web3AuthInstance);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        web3AuthInstance.configureAdapter(openloginAdapter);\n        setWeb3AuthInstance(web3AuthInstance);\n        await web3AuthInstance.init();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3AuthInstance: Web3AuthCore) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3AuthInstance.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log("Yeah!, you are successfully logged in", data);\n        setProvider(web3AuthInstance.provider);\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log("connecting");\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log("disconnected");\n      });\n\n      web3AuthInstance.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error("some error or user has cancelled login request", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3AuthInstance) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n\n    // REPLACE-const web3AuthConnect = {};-\n\n    setProvider(web3authProvider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3AuthInstance) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const user = await web3AuthInstance.getUserInfo();\n    console.log("User info", user);\n  };\n\n  const logout = async () => {\n    if (!web3AuthInstance) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    await web3AuthInstance.logout();\n    setProvider(null);\n  };\n\n  const onGetAccounts = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const userAccount = await rpc.getAccounts();\n    console.log("User account", userAccount);\n  };\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className="card">\n        Get User Info\n      </button>\n      <button onClick={onGetAccounts} className="card">\n        Get Accounts\n      </button>\n      <button onClick={logout} className="card">\n        Log Out\n      </button>\n    </>\n  );\n\n  const unloggedInView = (\n    <>\n      <button onClick={() => login()} className="card">\n        Google Login\n      </button>\n    </>\n  );\n\n  return (\n    <div className="container">\n      <h1 className="title">\n        <a target="_blank" href="http://web3auth.io/" rel="noreferrer">\n          Web3Auth\n        </a>{" "}\n        & ReactJS Example\n      </h1>\n\n      <div className="grid">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className="footer">\n        <a href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app" target="_blank" rel="noopener noreferrer">\n          Source code {"  "}\n          <img className="logo" src="/images/github-logo.png" alt="github-logo" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default CustomAuth;\n',
  "web3auth/nextjs/custom-auth/package.json":
    '{\n  "name": "react-test",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "@web3auth/base": "^0.9.0",\n    "@web3auth/core": "^0.9.0",\n    "@web3auth/openlogin-adapter": "^0.9.0",\n    "@web3auth/solana-provider": "^0.9.0",\n    "firebase": "^9.6.8",\n    "react": "^17.0.2",\n    "react-dom": "^17.0.2",\n    "web3": "^1.7.0",\n    "@solana/web3.js": "^1.36.0"\n  },\n  "scripts": {\n    "start": "react-app-rewired start",\n    "build": "react-app-rewired build",\n    "lint": "eslint --fix \'src/**/*.ts\' \'src/**/*.tsx\'",\n    "eject": "react-scripts eject"\n  },\n  "eslintConfig": {\n    "extends": [\n      "react-app",\n      "react-app/jest"\n    ]\n  },\n  "browserslist": {\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ],\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ]\n  },\n  "devDependencies": {\n    "@types/node": "^16.11.22",\n    "@types/react": "^17.0.39",\n    "@types/react-dom": "^17.0.11",\n    "assert": "^2.0.0",\n    "buffer": "^6.0.3",\n    "crypto-browserify": "^3.12.0",\n    "https-browserify": "^1.0.0",\n    "os-browserify": "^0.3.0",\n    "process": "^0.11.10",\n    "react-app-rewired": "^2.2.1",\n    "react-scripts": "5.0.0",\n    "stream-browserify": "^3.0.0",\n    "stream-http": "^3.2.0",\n    "typescript": "^4.5.5",\n    "url": "^0.11.0"\n  }\n}\n',
  "web3auth/nextjs/package.json":
    '{\n  "name": "react-test",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "@web3auth/base": "^0.7.0",\n    "@web3auth/web3auth": "^0.7.0",\n    "@web3auth/solana-provider": "^0.7.0",\n    "react": "^17.0.2",\n    "react-dom": "^17.0.2",\n    "web3": "^1.7.0",\n    "@solana/web3.js": "^1.36.0"\n  },\n  "scripts": {\n    "start": "react-app-rewired start",\n    "build": "react-app-rewired build",\n    "lint": "eslint --fix \'src/**/*.ts\' \'src/**/*.tsx\'",\n    "eject": "react-scripts eject"\n  },\n  "eslintConfig": {\n    "extends": [\n      "react-app",\n      "react-app/jest"\n    ]\n  },\n  "browserslist": {\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ],\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ]\n  },\n  "devDependencies": {\n    "@types/node": "^16.11.22",\n    "@types/react": "^17.0.39",\n    "@types/react-dom": "^17.0.11",\n    "assert": "^2.0.0",\n    "buffer": "^6.0.3",\n    "crypto-browserify": "^3.12.0",\n    "https-browserify": "^1.0.0",\n    "os-browserify": "^0.3.0",\n    "process": "^0.11.10",\n    "react-app-rewired": "^2.2.1",\n    "react-scripts": "5.0.0",\n    "stream-browserify": "^3.0.0",\n    "stream-http": "^3.2.0",\n    "typescript": "^4.5.5",\n    "url": "^0.11.0"\n  }\n}\n',
  "web3auth/nextjs/provider-ethereum.ts":
    'import { SafeEventEmitterProvider } from "@web3auth/base";\nimport Web3 from "web3";\n\nexport const getAccounts = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    console.log("Eth accounts", accounts);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const getBalance = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    const balance = await web3.eth.getBalance(accounts[0]);\n    console.log("Eth balance", balance);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const signMessage = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const pubKey = (await provider.request({\n      method: "eth_accounts",\n    })) as string[];\n    const web3 = new Web3(provider as any);\n    const message =\n      "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad";\n    (web3.currentProvider as any)?.send(\n      {\n        method: "eth_sign",\n        params: [pubKey[0], message],\n        from: pubKey[0],\n      },\n      (err: Error, result: any) => {\n        if (err) {\n          return console.log(err);\n        }\n        console.log("Eth sign message => true", result);\n      }\n    );\n  } catch (error) {\n    console.log("error", error);\n  }\n};\n\nexport const signTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    // only supported with social logins (openlogin adapter)\n    const txRes = await web3.eth.signTransaction({\n      from: accounts[0],\n      to: accounts[0],\n      value: web3.utils.toWei("0.01"),\n    });\n    console.log("txRes", txRes);\n  } catch (error) {\n    console.log("error", error);\n  }\n};\n\nexport const sendTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    const txRes = await web3.eth.sendTransaction({\n      from: accounts[0],\n      to: accounts[0],\n      value: web3.utils.toWei("0.01"),\n    });\n    console.log("txRes", txRes);\n  } catch (error) {\n    console.log("error", error);\n  }\n};\n',
  "web3auth/nextjs/provider-solana.ts":
    'import {\n  Connection,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  Transaction\n} from "@solana/web3.js";\nimport { CustomChainConfig, SafeEventEmitterProvider } from "@web3auth/base";\nimport { SolanaWallet } from "@web3auth/solana-provider";\n\nconst getConnection = async (\n  provider: SafeEventEmitterProvider\n): Promise<Connection> => {\n  const solanaWallet = new SolanaWallet(provider);\n  const connectionConfig = await solanaWallet.request<CustomChainConfig>({\n    method: "solana_provider_config",\n    params: [],\n  });\n  const conn = new Connection(connectionConfig.rpcTarget);\n  return conn;\n};\n\nexport const getAccounts = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const acc = await solanaWallet.requestAccounts();\n    console.log("Solana accounts", acc);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const getBalance = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const conn = await getConnection(provider);\n    const accounts = await solanaWallet.requestAccounts();\n    const balance = await conn.getBalance(new PublicKey(accounts[0]));\n    console.log("Solana balance", balance);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const signMessage = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const msg = Buffer.from("Test Signing Message ", "utf8");\n    const res = await solanaWallet.signMessage(msg);\n    console.log("Solana sign message", res);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const signTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const conn = await getConnection(provider);\n    const solWeb3 = new SolanaWallet(provider);\n    const pubKey = await solWeb3.requestAccounts();\n    const blockhash = (await conn.getRecentBlockhash("finalized")).blockhash;\n    console.log(blockhash);\n    const TransactionInstruction = SystemProgram.transfer({\n      fromPubkey: new PublicKey(pubKey[0]),\n      toPubkey: new PublicKey(pubKey[0]),\n      lamports: 0.01 * LAMPORTS_PER_SOL,\n    });\n    const transaction = new Transaction({\n      recentBlockhash: blockhash,\n      feePayer: new PublicKey(pubKey[0]),\n    }).add(TransactionInstruction);\n    const signedTx = await solWeb3.signTransaction(transaction);\n    signedTx.serialize();\n    console.log("Signature", signedTx);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const sendTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const conn = await getConnection(provider);\n    const solWeb3 = new SolanaWallet(provider);\n    const pubKey = await solWeb3.requestAccounts();\n    const blockhash = (await conn.getRecentBlockhash("finalized")).blockhash;\n    const TransactionInstruction = SystemProgram.transfer({\n      fromPubkey: new PublicKey(pubKey[0]),\n      toPubkey: new PublicKey(pubKey[0]),\n      lamports: 0.01 * LAMPORTS_PER_SOL,\n    });\n    const transaction = new Transaction({\n      recentBlockhash: blockhash,\n      feePayer: new PublicKey(pubKey[0]),\n    }).add(TransactionInstruction);\n    const signature = await solWeb3.signAndSendTransaction(transaction);\n    console.log("Signature", signature);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n',
  "web3auth/react-starkex/App.css":
    ".container {\n  width: 60%;\n  margin: auto;\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.title {\n  line-height: 1.15;\n  font-size: 3rem;\n  text-align: center;\n  margin: 50px;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.card {\n  margin: 0.5rem;\n  padding: 0.7rem;\n  text-align: center;\n  color: #0070f3;\n  background-color: #fafafa;\n  text-decoration: none;\n  border: 1px solid #0070f3;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  width: 100%;\n}\n\n.card:hover,\n.card:focus,\n.card:active {\n  cursor: pointer;\n  background-color: #f1f1f1;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n\n@media (max-width: 1200px) {\n  .container {\n    width: 100%;\n  }\n}\n",
  "web3auth/react-starkex/App.tsx":
    'import { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider } from "@web3auth/base";\nimport { Web3Auth } from "@web3auth/web3auth";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\nimport { useEffect, useState } from "react";\nimport "./App.css";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n\nfunction App() {\n  const [web3auth, setWeb3auth] = useState<Web3Auth | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthInitParams = {};-\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        const web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n        web3auth.configureAdapter(openloginAdapter);\n        subscribeAuthEvents(web3auth);\n        setWeb3auth(web3auth);\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3auth: Web3Auth) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3auth.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log("Yeah!, you are successfully logged in", data);\n        setProvider(web3auth.provider);\n      });\n\n      web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log("connecting");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log("disconnected");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error("some error or user has cancelled login request", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const provider = await web3auth.connect();\n    setProvider(provider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const user = await web3auth.getUserInfo();\n    uiConsole(user);\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    await web3auth.logout();\n    setProvider(null);\n  };\n\n  const onGetStarkHDAccount = async () => {\n    await getStarkAccount();\n  };\n\n  const onMintRequest = async () => {\n    await getMintRequest();\n  };\n\n  const onDepositRequest = async () => {\n    await getDepositRequest();\n  };\n\n  const onWithdrawalRequest = async () => {\n    await getWithdrawalRequest();\n  };\n\n  function uiConsole(...args: any[]): void {\n    const el = document.querySelector("#console>p");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className="card">\n        Get User Info\n      </button>\n      <button onClick={onGetStarkHDAccount} className="card">\n        Get Stark Accounts\n      </button>\n      <button onClick={onMintRequest} className="card">\n        Mint Request\n      </button>\n      <button onClick={onDepositRequest} className="card">\n        Deposit Request\n      </button>\n      <button onClick={onWithdrawalRequest} className="card">\n        Withdraw Request\n      </button>\n      <button onClick={logout} className="card">\n        Log Out\n      </button>\n\n      <div id="console" style={{ whiteSpace: "pre-line" }}>\n        <p style={{ whiteSpace: "pre-line" }}></p>\n      </div>\n    </>\n  );\n\n  const unloggedInView = (\n    <button onClick={login} className="card">\n      Login\n    </button>\n  );\n\n  return (\n    <div className="container">\n      <h1 className="title">\n        <a target="_blank" href="http://web3auth.io/" rel="noreferrer">\n          Web3Auth\n        </a>{" "}\n        & ReactJS Example\n      </h1>\n\n      <div className="grid">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className="footer">\n        <a href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app" target="_blank" rel="noopener noreferrer">\n          Source code {"  "}\n          <img className="logo" src="/images/github-logo.png" alt="github-logo" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n',
  "web3auth/react-starkex/package.json":
    '{\n  "name": "react-test",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "@web3auth/base": "^0.7.0",\n    "@web3auth/web3auth": "^0.7.0",\n    "@web3auth/openlogin-adapter": "^0.6.3",\n    "@starkware-industries/starkex-js": "0.0.6",\n    "@toruslabs/starkware-crypto": "^1.1.0",\n    "bn.js": "^5.2.0",\n    "elliptic": "^6.5.4",\n    "react": "^17.0.2",\n    "react-dom": "^17.0.2"\n  },\n  "scripts": {\n    "start": "react-app-rewired start",\n    "build": "react-app-rewired build",\n    "lint": "eslint --fix \'src/**/*.ts\' \'src/**/*.tsx\'",\n    "eject": "react-scripts eject"\n  },\n  "eslintConfig": {\n    "extends": [\n      "react-app",\n      "react-app/jest"\n    ]\n  },\n  "browserslist": {\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ],\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ]\n  },\n  "devDependencies": {\n    "@types/node": "^16.11.22",\n    "@types/react": "^17.0.39",\n    "@types/react-dom": "^17.0.11",\n    "assert": "^2.0.0",\n    "buffer": "^6.0.3",\n    "crypto-browserify": "^3.12.0",\n    "https-browserify": "^1.0.0",\n    "os-browserify": "^0.3.0",\n    "process": "^0.11.10",\n    "react-app-rewired": "^2.2.1",\n    "react-scripts": "5.0.0",\n    "stream-browserify": "^3.0.0",\n    "stream-http": "^3.2.0",\n    "typescript": "^4.5.5",\n    "url": "^0.11.0"\n  }\n}\n',
  "web3auth/react-starkex/provider-ethereum.ts":
    'import { SafeEventEmitterProvider } from "@web3auth/base";\nimport Web3 from "web3";\n\nexport const getAccounts = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    console.log("Eth accounts", accounts);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const getBalance = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    const balance = await web3.eth.getBalance(accounts[0]);\n    console.log("Eth balance", balance);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const signMessage = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const pubKey = (await provider.request({\n      method: "eth_accounts",\n    })) as string[];\n    const web3 = new Web3(provider as any);\n    const message =\n      "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad";\n    (web3.currentProvider as any)?.send(\n      {\n        method: "eth_sign",\n        params: [pubKey[0], message],\n        from: pubKey[0],\n      },\n      (err: Error, result: any) => {\n        if (err) {\n          return console.log(err);\n        }\n        console.log("Eth sign message => true", result);\n      }\n    );\n  } catch (error) {\n    console.log("error", error);\n  }\n};\n\nexport const signTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    // only supported with social logins (openlogin adapter)\n    const txRes = await web3.eth.signTransaction({\n      from: accounts[0],\n      to: accounts[0],\n      value: web3.utils.toWei("0.01"),\n    });\n    console.log("txRes", txRes);\n  } catch (error) {\n    console.log("error", error);\n  }\n};\n\nexport const sendTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const web3 = new Web3(provider as any);\n    const accounts = await web3.eth.getAccounts();\n    const txRes = await web3.eth.sendTransaction({\n      from: accounts[0],\n      to: accounts[0],\n      value: web3.utils.toWei("0.01"),\n    });\n    console.log("txRes", txRes);\n  } catch (error) {\n    console.log("error", error);\n  }\n};\n',
  "web3auth/react-starkex/provider-solana.ts":
    'import {\n  Connection,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  Transaction\n} from "@solana/web3.js";\nimport { CustomChainConfig, SafeEventEmitterProvider } from "@web3auth/base";\nimport { SolanaWallet } from "@web3auth/solana-provider";\n\nconst getConnection = async (\n  provider: SafeEventEmitterProvider\n): Promise<Connection> => {\n  const solanaWallet = new SolanaWallet(provider);\n  const connectionConfig = await solanaWallet.request<CustomChainConfig>({\n    method: "solana_provider_config",\n    params: [],\n  });\n  const conn = new Connection(connectionConfig.rpcTarget);\n  return conn;\n};\n\nexport const getAccounts = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const acc = await solanaWallet.requestAccounts();\n    console.log("Solana accounts", acc);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const getBalance = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const conn = await getConnection(provider);\n    const accounts = await solanaWallet.requestAccounts();\n    const balance = await conn.getBalance(new PublicKey(accounts[0]));\n    console.log("Solana balance", balance);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const signMessage = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const solanaWallet = new SolanaWallet(provider);\n    const msg = Buffer.from("Test Signing Message ", "utf8");\n    const res = await solanaWallet.signMessage(msg);\n    console.log("Solana sign message", res);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const signTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const conn = await getConnection(provider);\n    const solWeb3 = new SolanaWallet(provider);\n    const pubKey = await solWeb3.requestAccounts();\n    const blockhash = (await conn.getRecentBlockhash("finalized")).blockhash;\n    console.log(blockhash);\n    const TransactionInstruction = SystemProgram.transfer({\n      fromPubkey: new PublicKey(pubKey[0]),\n      toPubkey: new PublicKey(pubKey[0]),\n      lamports: 0.01 * LAMPORTS_PER_SOL,\n    });\n    const transaction = new Transaction({\n      recentBlockhash: blockhash,\n      feePayer: new PublicKey(pubKey[0]),\n    }).add(TransactionInstruction);\n    const signedTx = await solWeb3.signTransaction(transaction);\n    signedTx.serialize();\n    console.log("Signature", signedTx);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n\nexport const sendTransaction = async (provider: SafeEventEmitterProvider) => {\n  try {\n    const conn = await getConnection(provider);\n    const solWeb3 = new SolanaWallet(provider);\n    const pubKey = await solWeb3.requestAccounts();\n    const blockhash = (await conn.getRecentBlockhash("finalized")).blockhash;\n    const TransactionInstruction = SystemProgram.transfer({\n      fromPubkey: new PublicKey(pubKey[0]),\n      toPubkey: new PublicKey(pubKey[0]),\n      lamports: 0.01 * LAMPORTS_PER_SOL,\n    });\n    const transaction = new Transaction({\n      recentBlockhash: blockhash,\n      feePayer: new PublicKey(pubKey[0]),\n    }).add(TransactionInstruction);\n    const signature = await solWeb3.signAndSendTransaction(transaction);\n    console.log("Signature", signature);\n  } catch (error) {\n    console.error("Error", error);\n  }\n};\n',
  "web3auth/react-starknet/App.tsx":
    'import { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider } from "@web3auth/base";\nimport { Web3Auth } from "@web3auth/web3auth";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\nimport { useEffect, useState } from "react";\nimport "./App.css";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n\nfunction App() {\n  const [web3auth, setWeb3auth] = useState<Web3Auth | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthInitParams = {};-\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        const web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n        web3auth.configureAdapter(openloginAdapter);\n        subscribeAuthEvents(web3auth);\n        setWeb3auth(web3auth);\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3auth: Web3Auth) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3auth.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log("Yeah!, you are successfully logged in", data);\n        setProvider(web3auth.provider);\n      });\n\n      web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log("connecting");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log("disconnected");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error("some error or user has cancelled login request", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const provider = await web3auth.connect();\n    setProvider(provider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const user = await web3auth.getUserInfo();\n    uiConsole(user);\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    await web3auth.logout();\n    setProvider(null);\n  };\n\n  const onGetStarkHDAccount = async () => {\n    await getStarkHDAccount();\n  };\n\n  const onDeployAccount = async () => {\n    await deployAccount();\n  };\n\n  function uiConsole(...args: any[]): void {\n    const el = document.querySelector("#console>p");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className="card">\n        Get User Info\n      </button>\n      <button onClick={onGetStarkHDAccount} className="card">\n        Get Stark Accounts\n      </button>\n      <button onClick={onDeployAccount} className="card">\n        Deploy Account\n      </button>\n      <button onClick={logout} className="card">\n        Log Out\n      </button>\n\n      <div id="console" style={{ whiteSpace: "pre-line" }}>\n        <p style={{ whiteSpace: "pre-line" }}></p>\n      </div>\n    </>\n  );\n\n  const unloggedInView = (\n    <button onClick={login} className="card">\n      Login\n    </button>\n  );\n\n  return (\n    <div className="container">\n      <h1 className="title">\n        <a target="_blank" href="http://web3auth.io/" rel="noreferrer">\n          Web3Auth\n        </a>{" "}\n        & ReactJS Example\n      </h1>\n\n      <div className="grid">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className="footer">\n        <a href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app" target="_blank" rel="noopener noreferrer">\n          Source code {"  "}\n          <img className="logo" src="/images/github-logo.png" alt="github-logo" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n',
  "web3auth/react-starknet/package.json":
    '{\n  "name": "react-test",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "@web3auth/base": "^0.7.0",\n    "@web3auth/web3auth": "^0.7.0",\n    "@toruslabs/openlogin-starkkey": "^1.7.0",\n    "starknet": "^1.5.4",\n    "bn.js": "^5.2.0",\n    "elliptic": "^6.5.4",\n    "react": "^17.0.2",\n    "react-dom": "^17.0.2",\n    "web3": "^1.7.0"\n  },\n  "scripts": {\n    "start": "react-app-rewired start",\n    "build": "react-app-rewired build",\n    "lint": "eslint --fix \'src/**/*.ts\' \'src/**/*.tsx\'",\n    "eject": "react-scripts eject"\n  },\n  "eslintConfig": {\n    "extends": [\n      "react-app",\n      "react-app/jest"\n    ]\n  },\n  "browserslist": {\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ],\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ]\n  },\n  "devDependencies": {\n    "@types/node": "^16.11.22",\n    "@types/react": "^17.0.39",\n    "@types/react-dom": "^17.0.11",\n    "assert": "^2.0.0",\n    "buffer": "^6.0.3",\n    "crypto-browserify": "^3.12.0",\n    "https-browserify": "^1.0.0",\n    "os-browserify": "^0.3.0",\n    "process": "^0.11.10",\n    "react-app-rewired": "^2.2.1",\n    "react-scripts": "5.0.0",\n    "stream-browserify": "^3.0.0",\n    "stream-http": "^3.2.0",\n    "typescript": "^4.5.5",\n    "url": "^0.11.0"\n  }\n}\n',
  "web3auth/react/App.css":
    ".container {\n  width: 60%;\n  margin: auto;\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.title {\n  line-height: 1.15;\n  font-size: 3rem;\n  text-align: center;\n  margin: 50px;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.card {\n  margin: 0.5rem;\n  padding: 0.7rem;\n  text-align: center;\n  color: #0070f3;\n  background-color: #fafafa;\n  text-decoration: none;\n  border: 1px solid #0070f3;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  width: 100%;\n}\n\n.card:hover,\n.card:focus,\n.card:active {\n  cursor: pointer;\n  background-color: #f1f1f1;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n\n@media (max-width: 1200px) {\n  .container {\n    width: 100%;\n  }\n}\n",
  "web3auth/react/App.tsx":
    'import { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider } from "@web3auth/base";\nimport { Web3Auth } from "@web3auth/web3auth";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\nimport { useEffect, useState } from "react";\nimport "./App.css";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n\nfunction App() {\n  const [web3auth, setWeb3auth] = useState<Web3Auth | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthInitParams = {};-\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        const web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n        web3auth.configureAdapter(openloginAdapter);\n        subscribeAuthEvents(web3auth);\n        setWeb3auth(web3auth);\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3auth: Web3Auth) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3auth.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log("Yeah!, you are successfully logged in", data);\n        setProvider(web3auth.provider);\n      });\n\n      web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log("connecting");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log("disconnected");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error("some error or user has cancelled login request", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const provider = await web3auth.connect();\n    setProvider(provider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const user = await web3auth.getUserInfo();\n    uiConsole(user);\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    await web3auth.logout();\n    setProvider(null);\n  };\n\n  const getAccounts = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const userAccount = await rpc.getAccounts();\n    uiConsole(userAccount);\n  };\n\n  const getBalance = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const balance = await rpc.getBalance();\n    uiConsole(balance);\n  };\n\n  const signMessage = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signMessage();\n    uiConsole(result);\n  };\n\n  const signTransaction = async () => {\n    if (!provider) {\n      uiConsole("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signTransaction();\n    uiConsole(result);\n  };\n\n  const sendTransaction = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signAndSendTransaction();\n    uiConsole(result);\n  };\n\n  function uiConsole(...args: any[]): void {\n    const el = document.querySelector("#console>p");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className="card">\n        Get User Info\n      </button>\n      <button onClick={getAccounts} className="card">\n        Get Accounts\n      </button>\n      <button onClick={getBalance} className="card">\n        Get Balance\n      </button>\n      <button onClick={signMessage} className="card">\n        Sign Message\n      </button>\n      <button onClick={signTransaction} className="card">\n        Sign Transaction\n      </button>\n      <button onClick={sendTransaction} className="card">\n        Send Transaction\n      </button>\n      <button onClick={logout} className="card">\n        Log Out\n      </button>\n\n      <div id="console" style={{ whiteSpace: "pre-line" }}>\n        <p style={{ whiteSpace: "pre-line" }}></p>\n      </div>\n    </>\n  );\n\n  const unloggedInView = (\n    <button onClick={login} className="card">\n      Login\n    </button>\n  );\n\n  return (\n    <div className="container">\n      <h1 className="title">\n        <a target="_blank" href="http://web3auth.io/" rel="noreferrer">\n          Web3Auth\n        </a>{" "}\n        & ReactJS Example\n      </h1>\n\n      <div className="grid">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className="footer">\n        <a href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app" target="_blank" rel="noopener noreferrer">\n          Source code {"  "}\n          <img className="logo" src="/images/github-logo.png" alt="github-logo" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n',
  "web3auth/react/custom/App.tsx":
    'import { ADAPTER_EVENTS, CHAIN_NAMESPACES, SafeEventEmitterProvider, WALLET_ADAPTERS } from "@web3auth/base";\nimport { Web3AuthCore } from "@web3auth/core";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\nimport { useEffect, useState } from "react";\nimport "./App.css";\n// REPLACE-web3authChainRpcImport-\n\nconst clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n\nfunction CustomUI() {\n  const [web3auth, setWeb3auth] = useState<Web3AuthCore | null>(null);\n  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // REPLACE-const web3AuthCoreCtorParams = {};-\n\n        const web3auth = new Web3AuthCore(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents(web3auth);\n        setWeb3auth(web3auth);\n        await web3auth.init();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const subscribeAuthEvents = (web3auth: Web3AuthCore) => {\n      // Can subscribe to all ADAPTER_EVENTS and LOGIN_MODAL_EVENTS\n      web3auth.on(ADAPTER_EVENTS.CONNECTED, (data: unknown) => {\n        console.log("Yeah!, you are successfully logged in", data);\n        setProvider(web3auth.provider);\n      });\n\n      web3auth.on(ADAPTER_EVENTS.CONNECTING, () => {\n        console.log("connecting");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.DISCONNECTED, () => {\n        console.log("disconnected");\n      });\n\n      web3auth.on(ADAPTER_EVENTS.ERRORED, (error) => {\n        console.error("some error or user has cancelled login request", error);\n      });\n    };\n\n    init();\n  }, []);\n\n  const login = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n\n    // REPLACE-const web3AuthConnect = {};-\n\n    setProvider(web3authProvider);\n  };\n\n  const getUserInfo = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    const user = await web3auth.getUserInfo();\n    console.log("User info", user);\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log("web3auth not initialized yet");\n      return;\n    }\n    await web3auth.logout();\n    setProvider(null);\n  };\n\n  const getAccounts = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const userAccount = await rpc.getAccounts();\n    uiConsole(userAccount);\n  };\n\n  const getBalance = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const balance = await rpc.getBalance();\n    uiConsole(balance);\n  };\n\n  const signMessage = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signMessage();\n    uiConsole(result);\n  };\n\n  const signTransaction = async () => {\n    if (!provider) {\n      uiConsole("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signTransaction();\n    uiConsole(result);\n  };\n\n  const sendTransaction = async () => {\n    if (!provider) {\n      console.log("provider not initialized yet");\n      return;\n    }\n    const rpc = new RPC(provider);\n    const result = await rpc.signAndSendTransaction();\n    uiConsole(result);\n  };\n\n  function uiConsole(...args: any[]): void {\n    const el = document.querySelector("#console>p");\n    if (el) {\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\n    }\n  }\n\n  const loggedInView = (\n    <>\n      <button onClick={getUserInfo} className="card">\n        Get User Info\n      </button>\n      <button onClick={getAccounts} className="card">\n        Get Accounts\n      </button>\n      <button onClick={getBalance} className="card">\n        Get Balance\n      </button>\n      <button onClick={signMessage} className="card">\n        Sign Message\n      </button>\n      <button onClick={signTransaction} className="card">\n        Sign Transaction\n      </button>\n      <button onClick={sendTransaction} className="card">\n        Send Transaction\n      </button>\n      <button onClick={logout} className="card">\n        Log Out\n      </button>\n\n      <div id="console" style={{ whiteSpace: "pre-line" }}>\n        <p style={{ whiteSpace: "pre-line" }}></p>\n      </div>\n    </>\n  );\n\n  const unloggedInView = (\n    <>\n      <button onClick={login} className="card">\n        Google Login\n      </button>\n    </>\n  );\n\n  return (\n    <div className="container">\n      <h1 className="title">\n        <a target="_blank" href="http://web3auth.io/" rel="noreferrer">\n          Web3Auth\n        </a>{" "}\n        & ReactJS Example\n      </h1>\n\n      <div className="grid">{provider ? loggedInView : unloggedInView}</div>\n\n      <footer className="footer">\n        <a href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/react-app" target="_blank" rel="noopener noreferrer">\n          Source code {"  "}\n          <img className="logo" src="/images/github-logo.png" alt="github-logo" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default CustomUI;\n',
  "web3auth/react/custom/package.json":
    '{\n  "name": "react-test",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "@web3auth/base": "^0.7.0",\n    "@web3auth/core": "^0.7.0",\n    "@web3auth/openlogin-adapter": "^0.7.0",\n    "@web3auth/solana-provider": "^0.7.0",\n    "react": "^17.0.2",\n    "react-dom": "^17.0.2",\n    "web3": "^1.7.0",\n    "@solana/web3.js": "^1.36.0"\n  },\n  "scripts": {\n    "start": "react-app-rewired start",\n    "build": "react-app-rewired build",\n    "lint": "eslint --fix \'src/**/*.ts\' \'src/**/*.tsx\'",\n    "eject": "react-scripts eject"\n  },\n  "eslintConfig": {\n    "extends": [\n      "react-app",\n      "react-app/jest"\n    ]\n  },\n  "browserslist": {\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ],\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ]\n  },\n  "devDependencies": {\n    "@types/node": "^16.11.22",\n    "@types/react": "^17.0.39",\n    "@types/react-dom": "^17.0.11",\n    "assert": "^2.0.0",\n    "buffer": "^6.0.3",\n    "crypto-browserify": "^3.12.0",\n    "https-browserify": "^1.0.0",\n    "os-browserify": "^0.3.0",\n    "process": "^0.11.10",\n    "react-app-rewired": "^2.2.1",\n    "react-scripts": "5.0.0",\n    "stream-browserify": "^3.0.0",\n    "stream-http": "^3.2.0",\n    "typescript": "^4.5.5",\n    "url": "^0.11.0"\n  }\n}\n',
  "web3auth/react/package.json":
    '{\n  "name": "react-test",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "@web3auth/base": "^0.7.0",\n    "@web3auth/web3auth": "^0.7.0",\n    "@web3auth/openlogin-adapter": "^0.7.0",\n    "@web3auth/solana-provider": "^0.7.0",\n    "react": "^17.0.2",\n    "react-dom": "^17.0.2",\n    "web3": "^1.7.0",\n    "@solana/web3.js": "^1.36.0"\n  },\n  "scripts": {\n    "start": "react-app-rewired start",\n    "build": "react-app-rewired build",\n    "lint": "eslint --fix \'src/**/*.ts\' \'src/**/*.tsx\'",\n    "eject": "react-scripts eject"\n  },\n  "eslintConfig": {\n    "extends": [\n      "react-app",\n      "react-app/jest"\n    ]\n  },\n  "browserslist": {\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ],\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ]\n  },\n  "devDependencies": {\n    "@types/node": "^16.11.22",\n    "@types/react": "^17.0.39",\n    "@types/react-dom": "^17.0.11",\n    "assert": "^2.0.0",\n    "buffer": "^6.0.3",\n    "crypto-browserify": "^3.12.0",\n    "https-browserify": "^1.0.0",\n    "os-browserify": "^0.3.0",\n    "process": "^0.11.10",\n    "react-app-rewired": "^2.2.1",\n    "react-scripts": "5.0.0",\n    "stream-browserify": "^3.0.0",\n    "stream-http": "^3.2.0",\n    "typescript": "^4.5.5",\n    "url": "^0.11.0"\n  }\n}\n',
  "web3auth/vue-starkex/Home.vue":
    '<template>\n  <div id="app">\n    <h2>Web3Auth X Vue.js</h2>\n    <section\n      :style="{\n        fontSize: \'12px\',\n      }"\n    >\n      <button class="rpcBtn" v-if="!provider" @click="connect()" style="cursor: pointer">Connect</button>\n      <button class="rpcBtn" v-if="provider" @click="logout()" style="cursor: pointer">Logout</button>\n      <button class="rpcBtn" v-if="provider" @click="getUserInfo()" style="cursor: pointer">Get User Info</button>\n      <button class="rpcBtn" v-if="provider" @click="onGetStarkHDAccount()" style="cursor: pointer">Get Stark Accounts</button>\n      <button class="rpcBtn" v-if="provider" @click="onMintRequest()" style="cursor: pointer">Mint Request</button>\n      <button class="rpcBtn" v-if="provider" @click="onDepositRequest()" style="cursor: pointer">Deposit Request</button>\n      <button class="rpcBtn" v-if="provider" @click="onWithdrawalRequest()" style="cursor: pointer">Withdraw Request</button>\n    </section>\n    <div id="console" style="white-space: pre-line">\n      <p style="white-space: pre-line"></p>\n    </div>\n  </div>\n</template>\n\n<script lang="ts">\nimport { ADAPTER_STATUS, CONNECTED_EVENT_DATA, SafeEventEmitterProvider } from "@web3auth/base";\nimport { LOGIN_MODAL_EVENTS } from "@web3auth/ui";\nimport { Web3Auth } from "@web3auth/web3auth";\nimport { ref, onMounted } from "vue";\n// REPLACE-web3authChainRpcImport-\n\nexport default {\n  name: "Home",\n  props: {\n    msg: String,\n  },\n  setup() {\n    const loading = ref<boolean>(false);\n    const loginButtonStatus = ref<string>("");\n    const connecting = ref<boolean>(false);\n    const provider = ref<SafeEventEmitterProvider | null>(null);\n    const clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n\n    // REPLACE-const web3AuthInitParams = {};-\n\n    // REPLACE-const web3AuthCtorParams = {};-\n\n    let web3auth = new Web3Auth(web3AuthCtorParams);\n    onMounted(async () => {\n      try {\n        loading.value = true;\n\n        web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents();\n\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.log("error", error);\n        uiConsole("error", error);\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    function subscribeAuthEvents() {\n      web3auth.on(ADAPTER_STATUS.CONNECTED, async (data: CONNECTED_EVENT_DATA) => {\n        uiConsole("connected to wallet", data);\n        provider.value = web3auth.provider;\n      });\n      web3auth.on(ADAPTER_STATUS.CONNECTING, () => {\n        uiConsole("connecting");\n        connecting.value = true;\n      });\n      web3auth.on(ADAPTER_STATUS.DISCONNECTED, () => {\n        uiConsole("disconnected");\n        provider.value = null;\n      });\n      web3auth.on(ADAPTER_STATUS.ERRORED, (error) => {\n        uiConsole("errored", error);\n      });\n      web3auth.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, (isVisible: boolean) => {\n        connecting.value = isVisible;\n      });\n    }\n    async function connect() {\n      try {\n        const web3authProvider = await web3auth.connect();\n        provider.value = web3authProvider;\n      } catch (error) {\n        console.error(error);\n        uiConsole("error", error);\n      }\n    }\n    async function logout() {\n      await web3auth.logout();\n      provider.value = null;\n    }\n    async function getUserInfo() {\n      const userInfo = await web3auth.getUserInfo();\n      uiConsole(userInfo);\n    }\n\n    const onGetStarkHDAccount = async () => {\n      await getStarkHDAccount();\n    };\n\n    const onMintRequest = async () => {\n      await getMintRequest();\n    };\n\n    const onDepositRequest = async () => {\n      await getDepositRequest();\n    };\n\n    const onWithdrawalRequest = async () => {\n      await getWithdrawalRequest();\n    };\n\n    function uiConsole(...args: any[]): void {\n      const el = document.querySelector("#console>p");\n      if (el) {\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\n      }\n    }\n    return {\n      loading,\n      loginButtonStatus,\n      connecting,\n      provider,\n      web3auth,\n      connect,\n      logout,\n      subscribeAuthEvents,\n      getUserInfo,\n      getStarkHDAccount,\n      getMintRequest,\n      getDepositRequest,\n      getWithdrawalRequest,\n    };\n  },\n};\n</script>\n\n<!-- Add "scoped" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n',
  "web3auth/vue-starkex/package.json":
    '{\n    "name": "vue3-app",\n    "version": "0.1.0",\n    "private": true,\n    "scripts": {\n        "serve": "vue-cli-service serve",\n        "build": "vue-cli-service build",\n        "lint": "vue-cli-service lint"\n    },\n    "dependencies": {\n        "@web3auth/base": "^0.7.0",\n        "@web3auth/web3auth": "^0.7.0",\n        "@web3auth/openlogin-adapter": "^0.6.3",\n        "@starkware-industries/starkex-js": "0.0.6",\n        "@toruslabs/starkware-crypto": "^1.1.0",\n        "bn.js": "^5.2.0",\n        "elliptic": "^6.5.4",\n        "core-js": "^3.6.5",\n        "vue": "^3.0.0",\n        "web3": "^1.7.0"\n    },\n    "devDependencies": {\n        "@typescript-eslint/eslint-plugin": "^4.18.0",\n        "@typescript-eslint/parser": "^4.18.0",\n        "@vue/cli-plugin-babel": "~4.5.15",\n        "@vue/cli-plugin-eslint": "~4.5.15",\n        "@vue/cli-plugin-typescript": "~4.5.15",\n        "@vue/cli-service": "~4.5.15",\n        "@vue/compiler-sfc": "^3.0.0",\n        "@vue/eslint-config-typescript": "^7.0.0",\n        "babel-eslint": "^10.1.0",\n        "eslint": "^6.7.2",\n        "eslint-plugin-vue": "^7.0.0",\n        "typescript": "~4.1.5"\n    },\n    "eslintConfig": {\n        "root": true,\n        "env": {\n            "node": true\n        },\n        "extends": [\n            "plugin:vue/vue3-essential",\n            "eslint:recommended",\n            "@vue/typescript"\n        ],\n        "parserOptions": {\n            "parser": "@typescript-eslint/parser"\n        },\n        "rules": {}\n    },\n    "browserslist": [\n        "> 1%",\n        "last 2 versions",\n        "not dead"\n    ]\n}\n',
  "web3auth/vue-starknet/Home.vue":
    '<template>\n  <div id="app">\n    <h2>Web3Auth X Vue.js</h2>\n    <section\n      :style="{\n        fontSize: \'12px\',\n      }"\n    >\n      <button class="rpcBtn" v-if="!provider" @click="connect()" style="cursor: pointer">Connect</button>\n      <button class="rpcBtn" v-if="provider" @click="logout()" style="cursor: pointer">Logout</button>\n      <button class="rpcBtn" v-if="provider" @click="getUserInfo()" style="cursor: pointer">Get User Info</button>\n      <button class="rpcBtn" v-if="provider" @click="onGetStarkHDAccount()" style="cursor: pointer">Get Stark Accounts</button>\n      <button class="rpcBtn" v-if="provider" @click="onDeployAccount()" style="cursor: pointer">Deploy Account</button>\n    </section>\n    <div id="console" style="white-space: pre-line">\n      <p style="white-space: pre-line"></p>\n    </div>\n  </div>\n</template>\n\n<script lang="ts">\nimport { ADAPTER_STATUS, CONNECTED_EVENT_DATA, SafeEventEmitterProvider } from "@web3auth/base";\nimport { LOGIN_MODAL_EVENTS } from "@web3auth/ui";\nimport { Web3Auth } from "@web3auth/web3auth";\nimport { ref, onMounted } from "vue";\n// REPLACE-web3authChainRpcImport-\n\nexport default {\n  name: "Home",\n  props: {\n    msg: String,\n  },\n  setup() {\n    const loading = ref<boolean>(false);\n    const loginButtonStatus = ref<string>("");\n    const connecting = ref<boolean>(false);\n    const provider = ref<SafeEventEmitterProvider | null>(null);\n    const clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n\n    // REPLACE-const web3AuthInitParams = {};-\n\n    // REPLACE-const web3AuthCtorParams = {};-\n\n    let web3auth = new Web3Auth(web3AuthCtorParams);\n    onMounted(async () => {\n      try {\n        loading.value = true;\n\n        web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents();\n\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.log("error", error);\n        uiConsole("error", error);\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    function subscribeAuthEvents() {\n      web3auth.on(ADAPTER_STATUS.CONNECTED, async (data: CONNECTED_EVENT_DATA) => {\n        uiConsole("connected to wallet", data);\n        provider.value = web3auth.provider;\n      });\n      web3auth.on(ADAPTER_STATUS.CONNECTING, () => {\n        uiConsole("connecting");\n        connecting.value = true;\n      });\n      web3auth.on(ADAPTER_STATUS.DISCONNECTED, () => {\n        uiConsole("disconnected");\n        provider.value = null;\n      });\n      web3auth.on(ADAPTER_STATUS.ERRORED, (error) => {\n        uiConsole("errored", error);\n      });\n      web3auth.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, (isVisible: boolean) => {\n        connecting.value = isVisible;\n      });\n    }\n    async function connect() {\n      try {\n        const web3authProvider = await web3auth.connect();\n        provider.value = web3authProvider;\n      } catch (error) {\n        console.error(error);\n        uiConsole("error", error);\n      }\n    }\n    async function logout() {\n      await web3auth.logout();\n      provider.value = null;\n    }\n    async function getUserInfo() {\n      const userInfo = await web3auth.getUserInfo();\n      uiConsole(userInfo);\n    }\n\n    async function onGetStarkHDAccount() {\n      await getStarkHDAccount();\n    }\n\n    async function onDeployAccount() {\n      await deployAccount();\n    }\n\n    function uiConsole(...args: any[]): void {\n      const el = document.querySelector("#console>p");\n      if (el) {\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\n      }\n    }\n    return {\n      loading,\n      loginButtonStatus,\n      connecting,\n      provider,\n      web3auth,\n      connect,\n      logout,\n      subscribeAuthEvents,\n      getUserInfo,\n      onGetStarkHDAccount,\n      onDeployAccount,\n    };\n  },\n};\n</script>\n\n<!-- Add "scoped" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n',
  "web3auth/vue-starknet/package.json":
    '{\n    "name": "vue3-app",\n    "version": "0.1.0",\n    "private": true,\n    "scripts": {\n        "serve": "vue-cli-service serve",\n        "build": "vue-cli-service build",\n        "lint": "vue-cli-service lint"\n    },\n    "dependencies": {\n        "@web3auth/base": "^0.7.0",\n        "@web3auth/web3auth": "^0.7.0",\n        "@toruslabs/openlogin-starkkey": "^1.7.0",\n        "starknet": "^1.5.4",\n        "bn.js": "^5.2.0",\n        "elliptic": "^6.5.4",\n        "core-js": "^3.6.5",\n        "vue": "^3.0.0",\n        "web3": "^1.7.0"\n    },\n    "devDependencies": {\n        "@typescript-eslint/eslint-plugin": "^4.18.0",\n        "@typescript-eslint/parser": "^4.18.0",\n        "@vue/cli-plugin-babel": "~4.5.15",\n        "@vue/cli-plugin-eslint": "~4.5.15",\n        "@vue/cli-plugin-typescript": "~4.5.15",\n        "@vue/cli-service": "~4.5.15",\n        "@vue/compiler-sfc": "^3.0.0",\n        "@vue/eslint-config-typescript": "^7.0.0",\n        "babel-eslint": "^10.1.0",\n        "eslint": "^6.7.2",\n        "eslint-plugin-vue": "^7.0.0",\n        "typescript": "~4.1.5"\n    },\n    "eslintConfig": {\n        "root": true,\n        "env": {\n            "node": true\n        },\n        "extends": [\n            "plugin:vue/vue3-essential",\n            "eslint:recommended",\n            "@vue/typescript"\n        ],\n        "parserOptions": {\n            "parser": "@typescript-eslint/parser"\n        },\n        "rules": {}\n    },\n    "browserslist": [\n        "> 1%",\n        "last 2 versions",\n        "not dead"\n    ]\n}\n',
  "web3auth/vue/App.vue":
    '<template>\n  <img alt="Vue logo" src="./assets/logo.png" />\n  <Home msg="Welcome to Your Vue.js + TypeScript App" />\n</template>\n\n<script lang="ts">\nimport { defineComponent } from "vue";\nimport Home from "./components/Home.vue";\n\nexport default defineComponent({\n  name: "App",\n  components: {\n    Home,\n  },\n});\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n',
  "web3auth/vue/Connect.ts": "// Start Connect function:\n// REPLACE-const web3AuthConnect = {};-\n// End Connect function:\n",
  "web3auth/vue/CustomLogin.vue":
    '<template>\n  <div id="app">\n    <h2>Web3Auth X Vue.js</h2>\n    <section\n      :style="{\n        fontSize: \'12px\',\n      }"\n    >\n      <button class="rpcBtn" v-if="!provider && !loading" @click="connect()" style="cursor: pointer">Login With Google</button>\n      <button class="rpcBtn" v-if="provider" @click="logout()" style="cursor: pointer">Logout</button>\n      <button class="rpcBtn" v-if="provider" @click="getUserInfo()" style="cursor: pointer">Get User Info</button>\n      <button class="rpcBtn" v-if="provider" @click="getUserAccount()" style="cursor: pointer">Get User Account</button>\n    </section>\n    <div id="console" style="white-space: pre-line">\n      <p style="white-space: pre-line"></p>\n    </div>\n  </div>\n</template>\n\n<script lang="ts">\nimport { ADAPTER_STATUS, CONNECTED_EVENT_DATA, SafeEventEmitterProvider, WALLET_ADAPTERS } from "@web3auth/base";\nimport { LOGIN_MODAL_EVENTS } from "@web3auth/ui";\nimport { Web3AuthCore } from "@web3auth/core";\nimport { ref, onMounted } from "vue";\n// REPLACE-web3authChainRpcImport-\n\nexport default {\n  name: "Home",\n  props: {\n    msg: String,\n  },\n  setup() {\n    const loading = ref<boolean>(false);\n    const loginButtonStatus = ref<string>("");\n    const connecting = ref<boolean>(false);\n    const provider = ref<SafeEventEmitterProvider | null>(null);\n    const clientId = "YOUR_CLIENT_ID";\n\n    // REPLACE-const web3AuthCoreCtorParams = {};-\n\n    let web3auth = new Web3AuthCore(web3AuthCtorParams);\n\n    onMounted(async () => {\n      try {\n        loading.value = true;\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        web3auth = new Web3AuthCore(web3AuthCoreCtorParams);\n\n        web3auth.configureAdapter(openloginAdapter);\n        subscribeAuthEvents();\n        await web3auth.init();\n      } catch (error) {\n        console.log("error", error);\n        uiConsole("error", error);\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    function subscribeAuthEvents() {\n      web3auth.on(ADAPTER_STATUS.CONNECTED, async (data: CONNECTED_EVENT_DATA) => {\n        uiConsole("connected to wallet", data);\n        provider.value = web3auth.provider;\n      });\n      web3auth.on(ADAPTER_STATUS.CONNECTING, () => {\n        uiConsole("connecting");\n        connecting.value = true;\n      });\n      web3auth.on(ADAPTER_STATUS.DISCONNECTED, () => {\n        uiConsole("disconnected");\n        provider.value = null;\n      });\n      web3auth.on(ADAPTER_STATUS.ERRORED, (error) => {\n        uiConsole("errored", error);\n      });\n      web3auth.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, (isVisible: boolean) => {\n        connecting.value = isVisible;\n      });\n    }\n    async function connect() {\n      try {\n        // REPLACE-const web3AuthConnect = {};-\n\n        provider.value = web3authProvider;\n      } catch (error) {\n        console.error(error);\n        uiConsole("error", error);\n      }\n    }\n    async function logout() {\n      await web3auth.logout();\n      provider.value = null;\n    }\n    async function getUserInfo() {\n      const userInfo = await web3auth.getUserInfo();\n      uiConsole(userInfo);\n    }\n    async function getUserAccount() {\n      if (!provider.value) {\n        throw new Error("provider is not set");\n      }\n      const rpc = new RPC(provider.value);\n      const userAccount = await rpc.getAccounts();\n      uiConsole(userAccount);\n    }\n    function uiConsole(...args: any[]): void {\n      const el = document.querySelector("#console>p");\n      if (el) {\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\n      }\n    }\n    return {\n      loading,\n      loginButtonStatus,\n      connecting,\n      provider,\n      web3auth,\n      connect,\n      logout,\n      subscribeAuthEvents,\n      getUserInfo,\n      getUserAccount,\n    };\n  },\n};\n</script>\n\n<!-- Add "scoped" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n',
  "web3auth/vue/Home.vue":
    '<template>\n  <div id="app">\n    <h2>Web3Auth X Vue.js</h2>\n    <section\n      :style="{\n        fontSize: \'12px\',\n      }"\n    >\n      <button class="rpcBtn" v-if="!provider" @click="connect()" style="cursor: pointer">Connect</button>\n      <button class="rpcBtn" v-if="provider" @click="logout()" style="cursor: pointer">Logout</button>\n      <button class="rpcBtn" v-if="provider" @click="getUserInfo()" style="cursor: pointer">Get User Info</button>\n      <button class="rpcBtn" v-if="provider" @click="getUserAccount()" style="cursor: pointer">Get User Account</button>\n    </section>\n    <div id="console" style="white-space: pre-line">\n      <p style="white-space: pre-line"></p>\n    </div>\n  </div>\n</template>\n\n<script lang="ts">\nimport { ADAPTER_STATUS, CONNECTED_EVENT_DATA, SafeEventEmitterProvider } from "@web3auth/base";\nimport { LOGIN_MODAL_EVENTS } from "@web3auth/ui";\nimport { Web3Auth } from "@web3auth/web3auth";\nimport { ref, onMounted } from "vue";\n// REPLACE-web3authChainRpcImport-\n\nexport default {\n  name: "Home",\n  props: {\n    msg: String,\n  },\n  setup() {\n    const loading = ref<boolean>(false);\n    const loginButtonStatus = ref<string>("");\n    const connecting = ref<boolean>(false);\n    const provider = ref<SafeEventEmitterProvider | null>(null);\n    const clientId = "YOUR_CLIENT_ID"; // get from https://dashboard.web3auth.io\n\n    // REPLACE-const web3AuthInitParams = {};-\n\n    // REPLACE-const web3AuthCtorParams = {};-\n\n    let web3auth = new Web3Auth(web3AuthCtorParams);\n    onMounted(async () => {\n      try {\n        loading.value = true;\n\n        web3auth = new Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents();\n\n        await web3auth.initModal(initParams);\n      } catch (error) {\n        console.log("error", error);\n        uiConsole("error", error);\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    function subscribeAuthEvents() {\n      web3auth.on(ADAPTER_STATUS.CONNECTED, async (data: CONNECTED_EVENT_DATA) => {\n        uiConsole("connected to wallet", data);\n        provider.value = web3auth.provider;\n      });\n      web3auth.on(ADAPTER_STATUS.CONNECTING, () => {\n        uiConsole("connecting");\n        connecting.value = true;\n      });\n      web3auth.on(ADAPTER_STATUS.DISCONNECTED, () => {\n        uiConsole("disconnected");\n        provider.value = null;\n      });\n      web3auth.on(ADAPTER_STATUS.ERRORED, (error) => {\n        uiConsole("errored", error);\n      });\n      web3auth.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, (isVisible: boolean) => {\n        connecting.value = isVisible;\n      });\n    }\n    async function connect() {\n      try {\n        const web3authProvider = await web3auth.connect();\n        provider.value = web3authProvider;\n      } catch (error) {\n        console.error(error);\n        uiConsole("error", error);\n      }\n    }\n    async function logout() {\n      await web3auth.logout();\n      provider.value = null;\n    }\n    async function getUserInfo() {\n      const userInfo = await web3auth.getUserInfo();\n      uiConsole(userInfo);\n    }\n    async function getUserAccount() {\n      if (!provider.value) {\n        throw new Error("provider is not set");\n      }\n      const rpc = new RPC(provider.value);\n      const userAccount = await rpc.getAccounts();\n      uiConsole(userAccount);\n    }\n    function uiConsole(...args: any[]): void {\n      const el = document.querySelector("#console>p");\n      if (el) {\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\n      }\n    }\n    return {\n      loading,\n      loginButtonStatus,\n      connecting,\n      provider,\n      web3auth,\n      connect,\n      logout,\n      subscribeAuthEvents,\n      getUserInfo,\n      getUserAccount,\n    };\n  },\n};\n</script>\n\n<!-- Add "scoped" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n',
  "web3auth/vue/main.js":
    'import Vue from "vue";\nimport App from "./App.vue";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  render: (h) => h(App),\n}).$mount("#app");\n',
  "web3auth/vue/package.json":
    '{\n    "name": "vue3-app",\n    "version": "0.1.0",\n    "private": true,\n    "scripts": {\n        "serve": "vue-cli-service serve",\n        "build": "vue-cli-service build",\n        "lint": "vue-cli-service lint"\n    },\n    "dependencies": {\n        "@web3auth/base": "^0.7.0",\n        "@web3auth/web3auth": "^0.7.0",\n        "core-js": "^3.6.5",\n        "vue": "^3.0.0",\n        "web3": "^1.7.0"\n    },\n    "devDependencies": {\n        "@typescript-eslint/eslint-plugin": "^4.18.0",\n        "@typescript-eslint/parser": "^4.18.0",\n        "@vue/cli-plugin-babel": "~4.5.15",\n        "@vue/cli-plugin-eslint": "~4.5.15",\n        "@vue/cli-plugin-typescript": "~4.5.15",\n        "@vue/cli-service": "~4.5.15",\n        "@vue/compiler-sfc": "^3.0.0",\n        "@vue/eslint-config-typescript": "^7.0.0",\n        "babel-eslint": "^10.1.0",\n        "eslint": "^6.7.2",\n        "eslint-plugin-vue": "^7.0.0",\n        "typescript": "~4.1.5"\n    },\n    "eslintConfig": {\n        "root": true,\n        "env": {\n            "node": true\n        },\n        "extends": [\n            "plugin:vue/vue3-essential",\n            "eslint:recommended",\n            "@vue/typescript"\n        ],\n        "parserOptions": {\n            "parser": "@typescript-eslint/parser"\n        },\n        "rules": {}\n    },\n    "browserslist": [\n        "> 1%",\n        "last 2 versions",\n        "not dead"\n    ]\n}\n',
  "web3auth/web-starkex/index.html":
    '<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Ethereum Web3Auth Getting Started</title>\n  <meta charset="UTF-8" />\n  <link rel="style" src="./style.css">\n  </link>\n</head>\n\n<body>\n  <div class="container">\n    <h1 class="title"><a target="_blank" href="http://web3auth.io/">Web3Auth</a> ETH & JS Integration Example</h1>\n    <!-- Logged In -->\n    <div class="grid btn-logged-in">\n      <button id="get-user-info" class="btn">Get User Info</button>\n      <button id="get-stark-account" class="btn">Get Stark Accounts</button>\n      <button id="mint-request" class="btn">Mint Request</button>\n      <button id="deposit-request" class="btn">Deposit Request</button>\n      <button id="withdraw-request" class="btn">Withdraw Request</button>\n\n      <button id="logout" class="btn">Logout</button>\n\n      <div class="console" id="console">\n        <p id="code" class="code"></p>\n      </div>\n    </div>\n\n    <!-- Logged Logout -->\n    <div class="grid btn-logged-out">\n      <button id="login" class="btn">Login</button>\n    </div>\n    <footer class="footer">\n      <a href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/getting-started" target="_blank"\n        rel="noopener noreferrer">\n        Source code\n        <img class="logo" src="https://images.web3auth.io/login-github.svg" />\n      </a>\n    </footer>\n  </div>\n\n  <script src="./inputs.js"></script>\n  <script src="https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>\n  <script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1/dist/web3.min.js"></script>\n  <script src="https://cdn.jsdelivr.net/npm/@web3auth/web3auth@0/dist/web3auth.umd.min.js"></script>\n  <script>\n    const web3authSdk = window.Web3auth;\n    let web3AuthInstance = null;\n\n    (async function init() {\n      $(".btn-logged-in").hide();\n      $("#sign-tx").hide();\n\n      web3AuthInstance = new web3authSdk.Web3Auth(web3AuthCtorParams);\n\n      subscribeAuthEvents(web3AuthInstance);\n\n      await web3AuthInstance.initModal();\n      console.log("web3AuthInstance", web3AuthInstance, web3AuthInstance.provider);\n      if (web3AuthInstance.provider) {\n        $(".btn-logged-in").show();\n        $(".btn-logged-out").hide();\n        if (web3AuthInstance.connectedAdapterName === "openlogin") {\n          $("#sign-tx").show();\n        }\n      } else {\n        $(".btn-logged-out").show();\n        $(".btn-logged-in").hide();\n      }\n    })();\n\n    function subscribeAuthEvents(web3auth) {\n      web3auth.on("connected", (data) => {\n        console.log("Yeah!, you are successfully logged in", data);\n      });\n\n      web3auth.on("connecting", () => {\n        console.log("connecting");\n      });\n\n      web3auth.on("disconnected", () => {\n        console.log("disconnected");\n      });\n\n      web3auth.on("errored", (error) => {\n        console.log("some error or user have cancelled login request", error);\n      });\n\n      web3auth.on("MODAL_VISIBILITY", (isVisible) => {\n        console.log("modal visibility", isVisible);\n      });\n    }\n\n    $("#login").click(async function (event) {\n      try {\n        const provider = await web3AuthInstance.connect();\n        console.log("provider after login", provider);\n        $(".btn-logged-out").hide();\n        $(".btn-logged-in").show();\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n\n    $("#logout").click(async function (event) {\n      try {\n        await web3AuthInstance.logout();\n        $(".btn-logged-in").hide();\n        $(".btn-logged-out").show();\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n\n    $("#get-user-info").click(async function (event) {\n      try {\n        const user = await web3AuthInstance.getUserInfo();\n        $("#code").text(JSON.stringify(user || {}, null, 2));\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n\n    $("#get-stark-account").click(async function (event) {\n      try {\n        await getStarkHDAccount();\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n    $("#mint-request").click(async function (event) {\n      try {\n        const user = await web3AuthInstance.getUserInfo();\n        $("#code").text(JSON.stringify(user || {}, null, 2));\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n    $("#deposit-request").click(async function (event) {\n      try {\n        const user = await web3AuthInstance.getUserInfo();\n        $("#code").text(JSON.stringify(user || {}, null, 2));\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n    $("#withdraw-request").click(async function (event) {\n      try {\n        const user = await web3AuthInstance.getUserInfo();\n        $("#code").text(JSON.stringify(user || {}, null, 2));\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n  </script>\n</body>\n\n</html>\n',
  "web3auth/web/custom.html":
    '<!DOCTYPE html>\n<html>\n  <head>\n    <title>Web3Auth Getting Started</title>\n    <meta charset="UTF-8" />\n    <link rel="stylesheet" href="style.css" />\n  </head>\n\n  <body>\n    <div class="container">\n      <h1 class="title"><a target="_blank" href="http://web3auth.io/">Web3Auth</a> & JS Integration Example</h1>\n      <!-- Logged In -->\n      <div class="grid btn-logged-in">\n        <button id="get-user-info" class="btn">Get User Info</button>\n        <button id="get-accounts" class="btn">Get Accounts</button>\n        <button id="get-balance" class="btn">Get Balance</button>\n        <button id="sign-message" class="btn">Sign Message</button>\n\n        <button id="logout" class="btn">Logout</button>\n\n        <div class="console" id="console">\n          <p id="code" class="code"></p>\n        </div>\n      </div>\n\n      <!-- Logged Logout -->\n      <div class="grid btn-logged-out">\n        <button id="login" class="btn">Login</button>\n      </div>\n      <footer class="footer">\n        <a href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/getting-started" target="_blank" rel="noopener noreferrer">\n          Source code\n          <img class="logo" src="/github-logo.png" />\n        </a>\n      </footer>\n    </div>\n\n    <script src="https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>\n    <script src="https://cdn.jsdelivr.net/npm/@web3auth/openlogin-adapter@0/dist/openloginAdapter.umd.min.js"></script>\n\n    // REPLACE-deps-import-\n\n    <script>\n      const web3authSdk = window.Core;\n      let web3auth = null;\n      const OpenloginAdapter = window.OpenloginAdapter;\n\n      (async function init() {\n        console.log("rpc", rpc);\n        $(".btn-logged-in").hide();\n        $("#sign-tx").hide();\n\n        const clientId = "YOUR_CLIENT_ID_HERE"; // get your clientId from https://developer.web3auth.io\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        web3auth = new web3authSdk.Web3AuthCore(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents(web3auth);\n\n        await web3auth.init();\n        console.log("web3auth", web3auth, web3auth.provider);\n        if (web3auth.provider) {\n          $(".btn-logged-in").show();\n          $(".btn-logged-out").hide();\n          if (web3auth.connectedAdapterName === "openlogin") {\n            $("#sign-tx").show();\n          }\n        } else {\n          $(".btn-logged-out").show();\n          $(".btn-logged-in").hide();\n        }\n      })();\n\n      function subscribeAuthEvents(web3auth) {\n        web3auth.on("connected", (data) => {\n          console.log("Yeah!, you are successfully logged in", data);\n        });\n\n        web3auth.on("connecting", () => {\n          console.log("connecting");\n        });\n\n        web3auth.on("disconnected", () => {\n          console.log("disconnected");\n        });\n\n        web3auth.on("errored", (error) => {\n          console.log("some error or user have cancelled login request", error);\n        });\n\n        web3auth.on("MODAL_VISIBILITY", (isVisible) => {\n          console.log("modal visibility", isVisible);\n        });\n      }\n\n      $("#login").click(async function (event) {\n        try {\n          // REPLACE-const web3AuthConnect = {};-\n          console.log("provider after login", provider);\n          $(".btn-logged-out").hide();\n          $(".btn-logged-in").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#logout").click(async function (event) {\n        try {\n          await web3auth.logout();\n          $(".btn-logged-in").hide();\n          $(".btn-logged-out").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#get-user-info").click(async function (event) {\n        try {\n          const user = await web3auth.getUserInfo();\n          $("#code").text(JSON.stringify(user || {}, null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#get-accounts").click(async function (event) {\n        try {\n          const accounts = await rpc.getAccounts(web3auth.provider);\n          $("#code").text(JSON.stringify(["accounts", accounts], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#get-balance").click(async function (event) {\n        try {\n          const balance = await rpc.getBalance(web3auth.provider);\n          $("#code").text(JSON.stringify(["balance", balance], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#sign-message").click(async function (event) {\n        try {\n          const signedMsg = await rpc.signMessage(web3auth.provider);\n          $("#code").text(JSON.stringify(["signed message", signedMsg], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n    </script>\n  </body>\n</html>\n',
  "web3auth/web/index.html":
    '<!DOCTYPE html>\n<html>\n  <head>\n    <title>Web3Auth Getting Started</title>\n    <meta charset="UTF-8" />\n    <link rel="stylesheet" href="style.css" />\n  </head>\n\n  <body>\n    <div class="container">\n      <h1 class="title"><a target="_blank" href="http://web3auth.io/">Web3Auth</a> & JS Integration Example</h1>\n      <!-- Logged In -->\n      <div class="grid btn-logged-in">\n        <button id="get-user-info" class="btn">Get User Info</button>\n        <button id="get-accounts" class="btn">Get Accounts</button>\n        <button id="get-balance" class="btn">Get Balance</button>\n        <button id="sign-message" class="btn">Sign Message</button>\n\n        <button id="logout" class="btn">Logout</button>\n\n        <div class="console" id="console">\n          <p id="code" class="code"></p>\n        </div>\n      </div>\n\n      <!-- Logged Logout -->\n      <div class="grid btn-logged-out">\n        <button id="login" class="btn">Login</button>\n      </div>\n      <footer class="footer">\n        <a href="https://github.com/Web3Auth/Web3Auth/tree/master/examples/getting-started" target="_blank" rel="noopener noreferrer">\n          Source code\n          <img class="logo" src="/github-logo.png" />\n        </a>\n      </footer>\n    </div>\n\n    <script src="https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>\n    <script src="https://cdn.jsdelivr.net/npm/@web3auth/openlogin-adapter@0/dist/openloginAdapter.umd.min.js"></script>\n\n    // REPLACE-deps-import-\n\n    <script>\n      const web3authSdk = window.Web3auth;\n      let web3AuthInstance = null;\n      const OpenloginAdapter = window.OpenloginAdapter;\n\n      (async function init() {\n        console.log("rpc", rpc);\n        $(".btn-logged-in").hide();\n        $("#sign-tx").hide();\n\n        const clientId = "YOUR_CLIENT_ID_HERE"; // get your clientId from https://developer.web3auth.io\n\n        // REPLACE-const web3AuthCtorParams = {};-\n\n        web3AuthInstance = new web3authSdk.Web3Auth(web3AuthCtorParams);\n\n        // REPLACE-const web3AuthOpenloginConfigure = {};-\n\n        subscribeAuthEvents(web3AuthInstance);\n\n        await web3AuthInstance.initModal();\n        console.log("web3AuthInstance", web3AuthInstance, web3AuthInstance.provider);\n        if (web3AuthInstance.provider) {\n          $(".btn-logged-in").show();\n          $(".btn-logged-out").hide();\n          if (web3AuthInstance.connectedAdapterName === "openlogin") {\n            $("#sign-tx").show();\n          }\n        } else {\n          $(".btn-logged-out").show();\n          $(".btn-logged-in").hide();\n        }\n      })();\n\n      function subscribeAuthEvents(web3auth) {\n        web3auth.on("connected", (data) => {\n          console.log("Yeah!, you are successfully logged in", data);\n        });\n\n        web3auth.on("connecting", () => {\n          console.log("connecting");\n        });\n\n        web3auth.on("disconnected", () => {\n          console.log("disconnected");\n        });\n\n        web3auth.on("errored", (error) => {\n          console.log("some error or user have cancelled login request", error);\n        });\n\n        web3auth.on("MODAL_VISIBILITY", (isVisible) => {\n          console.log("modal visibility", isVisible);\n        });\n      }\n\n      $("#login").click(async function (event) {\n        try {\n          const provider = await web3AuthInstance.connect();\n          console.log("provider after login", provider);\n          $(".btn-logged-out").hide();\n          $(".btn-logged-in").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#logout").click(async function (event) {\n        try {\n          await web3AuthInstance.logout();\n          $(".btn-logged-in").hide();\n          $(".btn-logged-out").show();\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#get-user-info").click(async function (event) {\n        try {\n          const user = await web3AuthInstance.getUserInfo();\n          $("#code").text(JSON.stringify(user || {}, null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#get-accounts").click(async function (event) {\n        try {\n          const accounts = await rpc.getAccounts(web3AuthInstance.provider);\n          $("#code").text(JSON.stringify(["accounts", accounts], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#get-balance").click(async function (event) {\n        try {\n          const balance = await rpc.getBalance(web3AuthInstance.provider);\n          $("#code").text(JSON.stringify(["balance", balance], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n\n      $("#sign-message").click(async function (event) {\n        try {\n          const signedMsg = await rpc.signMessage(web3AuthInstance.provider);\n          $("#code").text(JSON.stringify(["signed message", signedMsg], null, 2));\n        } catch (error) {\n          console.error(error.message);\n        }\n      });\n    </script>\n  </body>\n</html>\n',
  "web3auth/web/style.css":
    "html,\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n* {\n  box-sizing: border-box;\n}\n.container {\n  width: 60%;\n  margin: auto;\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.title {\n  line-height: 1.15;\n  font-size: 3rem;\n  text-align: center;\n  margin: 50px;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.console {\n  max-width: 100%;\n}\n\n.code {\n  background: #fafafa;\n  border-radius: 5px;\n  padding: 0.75rem;\n  font-size: 1.1rem;\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;\n  overflow-wrap: break-word;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.btn {\n  margin: 0.5rem;\n  padding: 0.7rem;\n  text-align: center;\n  color: #0070f3;\n  text-decoration: none;\n  border: 1px solid #0070f3;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  width: 100%;\n  background-color: white;\n}\n\n.btn:hover,\n.btn:focus,\n.btn:active {\n  cursor: pointer;\n  background-color: #fafafa;\n}\n\n.row {\n  display: flex;\n  margin-bottom: 0.5rem;\n  width: 100%;\n}\n.label {\n  flex-basis: 45%;\n  padding-right: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: right;\n  font-weight: bold;\n}\n\n.select {\n  flex-basis: 30%;\n  text-align: left;\n  padding: 0.3rem 0.8rem;\n  font-size: 1rem;\n  border-radius: 8px;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10rem;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.logo {\n  height: 1.5rem;\n  margin-left: 0.5rem;\n}\n\n@media (max-width: 1200px) {\n  .container {\n    width: 100%;\n  }\n}\n",
};
